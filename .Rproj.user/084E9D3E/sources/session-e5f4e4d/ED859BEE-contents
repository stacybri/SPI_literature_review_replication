---
title: "SPI_lit_review_charts"
author: "Brian Stacy"
date: "9/15/2022"
output: 
  word_document:
    keep_md: true
bibliography: references.bib  
csl: apa-single-spaced.csl
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = FALSE,
	message = FALSE,
	warning = FALSE,
	fig.height=6,
	fig.width = 8,
	dev=c("png","tiff")
)
library(data.table)
library(tidyverse)
library(flextable)
library(here)
library(ggthemes)
library(Hmisc)
library(httr)
library(patchwork)
library(ggrepel)
library(haven)
library(zoo)
library(estimatr)
library(ggpmisc)
library(ggthemes)
library(ggtext)
library(modelsummary)
library(readxl)
library(extrafont)
library(wbstats)
library(fixest) 


dir <- here()
raw_dir <- paste0(dir, "/01_raw_data/")
output_dir <- paste(dir, '03_output', sep="/")
#weights (either unity (1) or population)
wgt <- 1
end_date=2022
```


```{r fun}



# define stle for ggplot based on BBC plotting styles
bbc_style <- function() {
  font <- "Helvetica"
  
  ggplot2::theme(
    
    #Text format:
    #This sets the font, size, type and colour of text for the chart's title
    plot.title = ggplot2::element_text(family=font,
                                       size=32,
                                       face="bold",
                                       color="#222222"),
    #This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
    plot.subtitle = ggplot2::element_text(family=font,
                                          size=20,
                                          margin=ggplot2::margin(9,0,9,0)),
    plot.caption = ggplot2::element_blank(),
    #This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
    
    #Legend format
    #This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
    legend.position = "top",
    legend.text.align = 0,
    legend.background = ggplot2::element_blank(),
    legend.title = ggplot2::element_blank(),
    legend.key = ggplot2::element_blank(),
    legend.text = ggplot2::element_text(family=font,
                                        size=18,
                                        color="#222222"),
    
    #Axis format
    #This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks. In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
    axis.title = ggplot2::element_blank(),
    axis.text = ggplot2::element_text(family=font,
                                      size=14,
                                      color="#222222"),
    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10)),
    axis.ticks = ggplot2::element_blank(),
    axis.line = ggplot2::element_blank(),
    
    #Grid lines
    #This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
    panel.grid.minor = ggplot2::element_blank(),
    panel.grid.major.x = ggplot2::element_line(color="#cbcbcb"),
    panel.grid.major.y = ggplot2::element_blank(),
    
    #Blank background
    #This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
    panel.background = ggplot2::element_blank(),
    
    #Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
    strip.background = ggplot2::element_rect(fill="white"),
    strip.text = ggplot2::element_text(size  = 22,  hjust = 0)
  )
}

geom_curve_polar <- function(...) {
  layer <- geom_curve(...)
  new_layer <- ggproto(NULL, layer)
  old_geom <- new_layer$geom
  geom <- ggproto(
    NULL, old_geom,
    draw_panel = function(data, panel_params, coord, 
                          curvature = 0.5, angle = 90, ncp = 5,
                          arrow = NULL, arrow.fill = NULL,
                          lineend = "butt", linejoin = "round",
                          na.rm = FALSE) {
      data <- ggplot2:::remove_missing(
        data, na.rm = na.rm, c("x", "y", "xend", "yend", 
                               "linetype", "size", "shape")
      )
      if (ggplot2:::empty(data)) {
        return(zeroGrob())
      }
      coords <- coord$transform(data, panel_params)
      ends <- transform(data, x = xend, y = yend)
      ends <- coord$transform(ends, panel_params)
      
      arrow.fill <- if (!is.null(arrow.fill)) arrow.fill else coords$colour
      return(grid::curveGrob(
        coords$x, coords$y, ends$x, ends$y,
        default.units = "native", gp = grid::gpar(
          col = alpha(coords$colour, coords$alpha),
          fill = alpha(arrow.fill, coords$alpha),
          lwd = coords$size * .pt,
          lty = coords$linetype,
          lineend = lineend,
          linejoin = linejoin
        ),
        curvature = curvature, angle = angle, ncp = ncp,
        square = FALSE, squareShape = 1, inflect = FALSE, open = TRUE,
        arrow = arrow
      ))
      
    }
  )
  new_layer$geom <- geom
  return(new_layer)
}

gg_bars <- function(z) {
  
  #set color pallete
  col_pal <- c("#ff595e","#ffca3a","#8ac926","#1982c4","#6a4c93")  
  names(col_pal) <- c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10))
  
  
  z <- z
  z <- na.omit(z)
  x <- factor(x=c(1,2,3,4,5), labels=c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10)))
  z <- data.frame(x = x, z = z, w = z < 0)
  ggplot(z, aes(x = x, y = z)) +
    geom_col(show.legend = FALSE, fill='#7A8776') +
    geom_text(aes(label=scales::percent(z)), nudge_y = .01, size=5) +
    geom_hline(aes(yintercept=0.2)) +
    bbc_style() +
    expand_limits(y=c(0,1)) +
    theme(
      axis.text.x = element_text()
    ) +
    annotate('text', x=1.1, y=0.5, label=str_wrap("Line of Equal Weight",15)) +
    geom_curve(aes(x=0.9,y=0.4, xend=1.2,yend=0.2), curvature=-0.2) 
}

gg_bars2 <- function(z) {
  
  #set color pallete
  col_pal <- c("#ff595e","#ffca3a","#8ac926","#1982c4","#6a4c93")  
  names(col_pal) <- c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10))
  
  
  z <- z
  z <- na.omit(z)
  x <- factor(x=c(1,2,3,4,5), labels=c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10)))
  z <- data.frame(x = x, z = z, w = z < 0)
  ggplot(z, aes(x = x, y = z)) +
    geom_col(show.legend = FALSE, fill='#7A8776') +
    geom_text(aes(label=scales::percent(z)), nudge_y = .01, size=5) +
    geom_hline(aes(yintercept=0.2)) +
    bbc_style() +
    expand_limits(y=c(0,1)) +
    theme(
      axis.text.x = element_text()
    ) +
    annotate('text', x=1.1, y=0.5, label=str_wrap("Line of Equal Weight",15)) +
    geom_curve(aes(x=0.9,y=0.4, xend=1.2,yend=0.2), curvature=-0.2) 
}

gg_polar <- function(z) {
  
    #set color pallete
  col_pal <- c("#ff595e","#ffca3a","#8ac926","#1982c4","#6a4c93")  
  names(col_pal) <- c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10))
  
  z <- z
  z <- na.omit(z)
  x <- factor(x=c(1,2,3,4,5), labels=c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10)))
  z <- data.frame(x = x, z = z, w = z < 0)
  ggplot(z, aes(x = x, y = z, fill = x)) +
    geom_col(show.legend = FALSE) +
    geom_text(aes(y=0.35,label=scales::percent(z)), nudge_y = .01) +
    geom_text(aes(y=0.6,label=x), nudge_y = .01, fontface="bold", font="TT Arial") +
    geom_hline(aes(yintercept=0.2)) + 
    #geom_hline(aes(yintercept=0.4)) + 
    #geom_hline(aes(yintercept=0.8)) + 
    geom_vline(aes(xintercept=0.5)) +
    geom_vline(aes(xintercept=1.5)) +
    geom_vline(aes(xintercept=2.5)) +
    geom_vline(aes(xintercept=3.5)) +
    geom_vline(aes(xintercept=4.5)) +
      scale_fill_manual(
        values=col_pal,
        na.value='grey'
      ) +    
    theme_void() +
    expand_limits(y=c(0,1)) +
    theme(
      axis.text.y = element_blank(),
    #Text format:
    #This sets the font, size, type and colour of text for the chart's title
    plot.title = ggplot2::element_text(family="TT Arial",
                                       size=20,
                                       face="bold",
                                       color="#222222"),
    #This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
    plot.subtitle = ggplot2::element_text(family="TT Arial",
                                          size=22,
                                          margin=ggplot2::margin(9,0,9,0)),
    plot.caption = ggplot2::element_blank(),
    #This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
    
    #Legend format
    #This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
    legend.position = "top",
    legend.text.align = 0,
    legend.background = ggplot2::element_blank(),
    legend.title = ggplot2::element_blank(),
    legend.key = ggplot2::element_blank(),
    legend.text = ggplot2::element_text(family="TT Arial",
                                        size=18,
                                        color="#222222"),
    
    #Axis format
    #This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks. In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
    axis.title = ggplot2::element_blank(),
    axis.text = ggplot2::element_text(family="TT Arial",
                                      size=8,
                                      color="#222222"),
    axis.text.x = ggplot2::element_blank(),
    axis.ticks = ggplot2::element_blank(),
    axis.line = ggplot2::element_blank(),
    
    #Grid lines
    #This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
    panel.grid.minor = ggplot2::element_blank(),
    #panel.grid.major.x = ggplot2::element_line(color="#cbcbcb"),
    panel.grid.major.y = ggplot2::element_blank(),
    
    #Blank background
    #This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
    panel.background = ggplot2::element_blank(),
    
    #Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
    strip.background = ggplot2::element_rect(fill="white"),
    strip.text = ggplot2::element_text(size  = 22,  hjust = 0)      
    ) + 
    coord_polar() +
    # annotate('text', x=1.5, y=0.6, label=str_wrap("Line of Equal Weight",10)) +
    # geom_curve_polar(aes(x=1.4,y=0.5, xend=1.6,yend=0.2), curvature=-0.2,
    #                  arrow = arrow(length = unit(0.03, "npc")))     +      # Zoom in & cut off values
   ylim(0, 0.65)

}

load(paste0(raw_dir, '/misc/maps.Rdata'))
standard_crop_wintri <- function() {
  l <- list(
    left=-12000000, right=16396891,
    top=9400000, bottom=-6500000
  )
  l$xlim <- c(l$left, l$right)
  l$ylim <- c(l$bottom, l$top)
  l
}
country_metadata <- wbstats::wbcountries()

spi_mapper <- function(data, indicator, title) {
  
 indicator<-indicator
   map_df <- get(data) %>%
    filter(date==max(date, na.rm=T)) %>%
    filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
    group_by( country) %>%
    #summarise(across(!! indicator,last)) %>%
    rename(data_available=!! indicator) %>%
    select(iso3c, date, data_available, weights) %>%
    right_join(country_metadata) %>%
    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))     
  spi_groups_quantiles <- quantile(map_df$data_available, probs=c(1,2,3,4)/5,na.rm=T)
  
  SPI_map <- map_df %>%
    mutate(spi_groups=case_when(
      between(data_available, spi_groups_quantiles[4],100) ~ "Top 20%",
      between(data_available, spi_groups_quantiles[3],spi_groups_quantiles[4]) ~ "4th Quintile",
      between(data_available, spi_groups_quantiles[2],spi_groups_quantiles[3]) ~ "3rd Quintile",
      between(data_available, spi_groups_quantiles[1],spi_groups_quantiles[2]) ~ "2nd Quintile",
      between(data_available, 0,spi_groups_quantiles[1]) ~ "Bottom 20%"
      
    )) %>%
    mutate(spi_groups=factor(spi_groups, 
                             levels=c("Top 20%","4th Quintile","3rd Quintile","2nd Quintile","Bottom 20%" )))  
  
  #set color pallete
  col_pal <- c("#2ec4b6","#acece7","#f1dc76","#ffbf69","#ff9f1c")  
  names(col_pal) <- c("Top 20%","4th Quintile","3rd Quintile","2nd Quintile","Bottom 20%" )
  
  p1<-ggplot() +
    geom_map(data = SPI_map, aes(map_id = iso3c, fill = spi_groups), map = maps$countries) + 
    geom_polygon(data = maps$disputed, aes(long, lat, group = group, map_id = id), fill = "grey80") + 
    geom_polygon(data = maps$lakes, aes(long, lat, group = group), fill = "white")  +
    geom_path(data = maps$boundaries,
              aes(long, lat, group = group),
              color = "white",
              size = 0.4,
              lineend = maps$boundaries$lineend,
              linetype = maps$boundaries$linetype) +
    scale_x_continuous(expand = c(0, 0), limits = standard_crop_wintri()$xlim) +
    scale_y_continuous(expand = c(0, 0), limits = standard_crop_wintri()$ylim) +
    scale_fill_manual(
      name='SPI Score',
      values=col_pal,
      na.value='grey'
    ) +
    coord_equal() +
    theme_map(base_size=12) +
    labs(
      title=str_wrap(title,100),
      caption = 'Source: World Bank. Statistical Performance Indicators'
    ) +
    theme(
      text=element_text(size=14)
    )
 print(p1)
}
spi_charts  <- function(data, indicator, title) {
  
 indicator<-indicator
  map_df <- get(data) %>%
    filter(date==max(date, na.rm=T)) %>%
    filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
    group_by( country) %>%
    #summarise(across(!! indicator,last)) %>%
    rename(data_available=!! indicator) %>%
    select(country, date, data_available, weights ) %>%
    right_join(country_metadata) %>%
    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))    
  
  #add histogram by region 
  p2 <- map_df %>%
    group_by(region) %>%
    filter(region!='Aggregates') %>%
    mutate(`SPI Score`=wtd.mean(data_available, weights = weights, na.rm=T),
           Label = paste(round(`SPI Score`,0))) %>%
    ggplot(aes(x=`SPI Score`, y=region, fill=region)) +
      geom_bar(stat="identity",position='dodge') +
      geom_text(aes(label=Label)) +
      labs(
      title=str_wrap(paste(title, 'By Region', sep=" - "),100),
      caption = 'Source: World Bank. Statistical Performance Indicators.',
      subtitle= 'Based on data for 2022 or the latest year available'
      ) +
      expand_limits(x=c(0,100)) +
      theme_spi() +
    theme(
      text=element_text(size=14)
    )
  
  #by income
    income <- c("Low income", "Lower middle income","Upper middle income","High income")
    p3 <- map_df %>%
    group_by(income) %>%
    filter(region!='Aggregates') %>%
    mutate(`SPI Score`=wtd.mean(data_available, weights=weights, na.rm=T),
           Label = paste(round(`SPI Score`,0))) %>%
    ggplot(aes(x=`SPI Score`, y=income, fill=income)) +
      geom_bar(stat="identity",position='dodge') +
      geom_text(aes(label=Label)) +
      labs(
      title=str_wrap(paste(title, 'By Income', sep=" - "),100),
      caption = 'Source: World Bank. Statistical Performance Indicators.',
      subtitle= 'Based on data for 2022 or the latest year available'
      ) +
      scale_y_discrete(limits = income) +
      expand_limits(x=c(0,100)) +
      theme_spi() +
    theme(
      text=element_text(size=14)
    )
    
  # #add line graph over time
  p4 <- get(data)  %>%
    rename(data_available=!! indicator) %>%
    # right_join(spi_df_empty) %>%
    group_by( date) %>%
    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available))) %>%
    mutate(`SPI Score`=mean(data_available, na.rm=T),
           Label = paste(round(`SPI Score`,0))) %>%
    ungroup() %>%
    ggplot(aes(y=`SPI Score`, x=date)) +
      geom_point() +
      geom_line(fill='blue') +
      # geom_text_repel(aes(label=Label)) +
      labs(
      title=str_wrap(paste(title, 'By Date', sep=" - "),100),
      caption = 'Source: World Bank. Statistical Performance Indicators.'
      ) +
    
      expand_limits(y=c(0,100)) +
      theme_spi() +
    theme(
      text=element_text(size=14)
    )
      
 (p2 / p3) 
    
}
spi_country_charts  <- function(data, indicator, title) {
  
 indicator<-indicator
  map_df <- get(data) %>%
    filter(date==max(date, na.rm=T)) %>%
    filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
    group_by( country) %>%
    #summarise(across(!! indicator,last)) %>%
    rename(data_available=!! indicator) %>%
    select(country, date, data_available, weights ) %>%
    right_join(country_metadata) %>%
    filter(region!="Aggregates") %>%
    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))    
  
   spi_groups_quantiles <- quantile(map_df$data_available, probs=c(1,2,3,4)/5,na.rm=T)
  
  SPI_map <- map_df %>%
    mutate(spi_groups=case_when(
      between(data_available, spi_groups_quantiles[4],100) ~ "Top 20%",
      between(data_available, spi_groups_quantiles[3],spi_groups_quantiles[4]) ~ "4th Quintile",
      between(data_available, spi_groups_quantiles[2],spi_groups_quantiles[3]) ~ "3rd Quintile",
      between(data_available, spi_groups_quantiles[1],spi_groups_quantiles[2]) ~ "2nd Quintile",
      between(data_available, 0,spi_groups_quantiles[1]) ~ "Bottom 20%"
      
    )) %>%
    mutate(spi_groups=factor(spi_groups, 
                             levels=c("Top 20%","4th Quintile","3rd Quintile","2nd Quintile","Bottom 20%" )))  
  
  #set color pallete
  col_pal <- c("#2ec4b6","#acece7","#f1dc76","#ffbf69","#ff9f1c")  
  names(col_pal) <- c("Top 20%","4th Quintile","3rd Quintile","2nd Quintile","Bottom 20%" )
  
  p2_alt <- SPI_map %>%
    ungroup() %>%
    ggplot(aes(x=data_available, y=region, color=spi_groups)) +
      geom_point() +
      geom_text(aes(label=country), position=position_jitter(width=.1,height=.4), check_overlap=T) +
      labs(
      title=str_wrap(paste(title, 'By Country', sep=" - "),100),
      caption = 'Source: World Bank. Statistical Performance Indicators.',
      subtitle= 'Based on data for 2022 or the latest year available'
      ) +
      xlab('Score') +
      expand_limits(x=c(0,100)) +
      scale_color_manual(
        name='SPI Score',
        values=col_pal,
        na.value='grey'
      ) +
      theme_spi() +
      theme(legend.position = 'top',
            text=element_text(size=14)
            ) 
p2_alt
}
income_charts <- function(data, indicator, title) { 
 indicator<-indicator
  map_df <- get(data) %>%
    filter(date==max(date, na.rm=T)) %>%
    filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
    group_by( country) %>%
    #summarise(across(!! indicator,last)) %>%
    rename(data_available=!! indicator) %>%
    select(country, date, data_available, weights ) %>%
    right_join(country_metadata) %>%
    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))    
  
  income <- c("Low income", "Lower middle income","Upper middle income","High income")
  p2_alt3 <- map_df %>%
    ungroup() %>%
    filter(region!='Aggregates') %>%
    mutate(`SPI Score`=(data_available),
           Label = paste(round(`SPI Score`,0))) %>%
    ggplot(aes(x=`SPI Score`, y=income, color=income)) +
      geom_point() +
      geom_text(aes(label=country), position=position_jitter(width=.1,height=.4), check_overlap=T) +
      labs(
      title=str_wrap(paste(title, 'By Income', sep=" - "),100),
      caption = 'Source: World Bank. Statistical Performance Indicators.',
      subtitle= 'Based on data for 2022 or the latest year available'
      ) +
      scale_y_discrete(limits = income) +
      expand_limits(x=c(0,100)) +
      theme_spi() +
      theme(legend.position = 'top',
            text=element_text(size=14) )
   
p2_alt3 
  
 
}
spi_income_aggregates <- function(data, indicator, title) {
   indicator<-indicator
  map_df <- get(data) %>%
    filter(date==max(date, na.rm=T)) %>%
    filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
    group_by( country) %>%
    #summarise(across(!! indicator,last)) %>%
    rename(data_available=!! indicator) %>%
    select(country, date, data_available, weights ) %>%
    right_join(country_metadata) %>%
    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))   
  
    income <- c("Low income", "Lower middle income","Upper middle income","High income")
    p3 <- map_df %>%
    group_by(income) %>%
    filter(region!='Aggregates') %>%
    mutate(`SPI Score`=wtd.mean(data_available, weights=weights, na.rm=T),
           Label = paste(round(`SPI Score`,0))) %>%
    ggplot(aes(x=`SPI Score`, y=income, fill=income)) +
      geom_bar(stat="identity",position='dodge') +
      geom_text(aes(label=Label)) +
      labs(
      title=str_wrap(paste(title, 'By Income', sep=" - "),100),
      caption = 'Source: World Bank. Statistical Performance Indicators.',
      subtitle= 'Based on data for 2022 or the latest year available'
      ) +
      scale_y_discrete(limits = income) +
      expand_limits(x=c(0,100)) +
      theme_spi() +
    theme(
      text=element_text(size=14)
    )
    
    p3
}
lending_charts <- function(data, indicator, title) { 
 indicator<-indicator
  map_df <- get(data) %>%
    filter(date==max(date, na.rm=T)) %>%
    filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
    group_by( country) %>%
    #summarise(across(!! indicator,last)) %>%
    rename(data_available=!! indicator) %>%
    select(country, date, data_available, weights ) %>%
    right_join(country_metadata) %>%
    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))    
  
  lending_list <- c("Not classified", "IBRD", "Blend", "IDA" )
  
  p2_alt3 <- map_df %>%
    ungroup() %>%
    filter(region!='Aggregates') %>%
    mutate(`SPI Score`=(data_available),
           Label = paste(round(`SPI Score`,0))) %>%
    ggplot(aes(x=`SPI Score`, y=lending, color=lending)) +
      geom_point() +
      geom_text(aes(label=country), position=position_jitter(width=.1,height=.4), check_overlap=T) +
      labs(
      title=str_wrap(paste(title, 'By Lending Status', sep=" - "),100),
      caption = 'Source: World Bank. Statistical Performance Indicators.',
      subtitle= 'Based on data for 2022 or the latest year available'
      ) +
      scale_y_discrete(limits = lending_list) +
      expand_limits(x=c(0,100)) +
      theme_spi() +
      theme(legend.position = 'top',
            text=element_text(size=14) )
   
p2_alt3 
  
 
}
lending_chart_aggregate <- function(data, indicator, title) { 
 indicator<-indicator
  map_df <- get(data) %>%
    filter(date==max(date, na.rm=T)) %>%
    filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
    group_by( country) %>%
    #summarise(across(!! indicator,last)) %>%
    rename(data_available=!! indicator) %>%
    select(country, date, data_available, weights ) %>%
    right_join(country_metadata) %>%
    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))    
  
  lending_list <- c("Not classified", "IBRD", "Blend", "IDA" )
  
  
  p2_alt3 <- map_df %>%
    group_by(lending) %>%
    filter(region!='Aggregates') %>%
    mutate(`SPI Score`=wtd.mean(data_available, weights = weights, na.rm=T),
           Label = paste(round(`SPI Score`,0))) %>%
    ggplot(aes(x=`SPI Score`, y=lending, fill=lending)) +
      geom_bar(stat="identity",position='dodge') +
      geom_text(aes(label=Label)) +
      labs(
      title=str_wrap(paste(title, 'By Lending Status', sep=" - "),100),
      caption = 'Source: World Bank. Statistical Performance Indicators.',
      subtitle= 'Based on data for 2022 or the latest year available'
      ) +
      scale_y_discrete(limits = lending_list) +
      expand_limits(x=c(0,100)) +
      theme_spi() +
      theme(legend.position = 'top',
            text=element_text(size=14) )
   
p2_alt3 
  
 
}
fcs_charts <- function(data, indicator, title) { 
  #FY21 Fragile and conflict-affected situations (http://pubdocs.worldbank.org/en/888211594267968803/FCSList-FY21.pdf)
  high_intensity_conflict <- c('Afghanistan', 'Libya', 'Somalia', 'Syrian Arab Republic' )
  
  medium_intensity_conflict <- c('Burkina Faso', 'Cameroon','Central African Republic', 'Chad', 'Congo, Dem. Rep.',
                                 'Iraq','Mali','Mozambique','Myanmar','Niger','Nigeria','South Sudan','Yemen, Rep.')
  
  high_institutional_social_fragility <- c('Burundi','Congo, Rep.','Eritrea','Gambia, The','Guinea-Bissau',
                                           'Haiti','Kosovo','Lao PDR','Lebanon','Liberia','Papua New Guinea',
                                           'Sudan','Venezuela, RB','West Bank and Gaza','Zimbabwe')
  
  small_states <- c('Comoros','Kiribati','Marshall Islands','Micronesia, Fed. Sts.','Solomon Islands','Timor-Leste','Tuvalu')
  
 indicator<-indicator
  map_df <- get(data) %>%
    filter(date==max(date, na.rm=T)) %>%
    filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
    mutate(fcs=case_when( #create indicators for Fragile and Conflict-affected Situations
      country %in% high_intensity_conflict ~ "FCS country",
      country %in% medium_intensity_conflict ~ "FCS country",
      country %in% high_institutional_social_fragility ~ "FCS country",
      country %in% small_states ~ "FCS country",
      TRUE ~ "Non-FCS country"
    )) %>%
    mutate(fcs_detail=case_when( #create indicators for Fragile and Conflict-affected Situations
      country %in% high_intensity_conflict ~ "High-Intensity Conflict",
      country %in% medium_intensity_conflict ~ "Medium-Intensity Conflict",
      country %in% high_institutional_social_fragility ~ "High Institutional & Social Fragility",
      country %in% small_states ~ "Small States",
      TRUE ~ "Non-FCS country"
    )) %>%
    group_by( country) %>%
    #summarise(across(!! indicator,last)) %>%
    rename(data_available=!! indicator) %>%
    select(country,fcs,fcs_detail, date, data_available, weights ) %>%
    right_join(country_metadata) %>%
    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))    
  
  fcs_list <- c("High-Intensity Conflict", "Medium-Intensity Conflict","High Institutional & Social Fragility","Small States","Non-FCS country")
  fcs_list <- c("FCS country","Non-FCS country")
  p2_alt2 <- map_df %>%
    ungroup() %>%
    filter(region!='Aggregates') %>%
    mutate(`SPI Score`=(data_available),
           Label = paste(round(`SPI Score`,0))) %>%
    ggplot(aes(x=`SPI Score`, y=fcs, color=fcs)) +
      geom_point() +
      geom_text(aes(label=country), position=position_jitter(width=.1,height=.4), check_overlap=T) +
      labs(
      title=str_wrap(paste(title, 'By Fragile and Conflict-affected Situations (FCS)', sep=" - "),100),
      caption = 'Source: World Bank. Statistical Performance Indicators.',
      subtitle= 'Based on data for 2022 or the latest year available'
      ) +
      scale_y_discrete(limits = fcs_list) +
      expand_limits(x=c(0,100)) +
      theme_spi() +
      theme(legend.position = 'top',
            text=element_text(size=14)) 
   
p2_alt2 
  
 
}
fcs_chart_aggregate <- function(data, indicator, title) { 
  #FY21 Fragile and conflict-affected situations (http://pubdocs.worldbank.org/en/888211594267968803/FCSList-FY21.pdf)
  high_intensity_conflict <- c('Afghanistan', 'Libya', 'Somalia', 'Syrian Arab Republic' )
  
  medium_intensity_conflict <- c('Burkina Faso', 'Cameroon','Central African Republic', 'Chad', 'Congo, Dem. Rep.',
                                 'Iraq','Mali','Mozambique','Myanmar','Niger','Nigeria','South Sudan','Yemen, Rep.')
  
  high_institutional_social_fragility <- c('Burundi','Congo, Rep.','Eritrea','Gambia, The','Guinea-Bissau',
                                           'Haiti','Kosovo','Lao PDR','Lebanon','Liberia','Papua New Guinea',
                                           'Sudan','Venezuela, RB','West Bank and Gaza','Zimbabwe')
  
  small_states <- c('Comoros','Kiribati','Marshall Islands','Micronesia, Fed. Sts.','Solomon Islands','Timor-Leste','Tuvalu')
  
 indicator<-indicator
  map_df <- get(data) %>%
    filter(date==max(date, na.rm=T)) %>%
    filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
    mutate(fcs=case_when( #create indicators for Fragile and Conflict-affected Situations
      country %in% high_intensity_conflict ~ "FCS country",
      country %in% medium_intensity_conflict ~ "FCS country",
      country %in% high_institutional_social_fragility ~ "FCS country",
      country %in% small_states ~ "FCS country",
      TRUE ~ "Non-FCS country"
    )) %>%
    mutate(fcs_detail=case_when( #create indicators for Fragile and Conflict-affected Situations
      country %in% high_intensity_conflict ~ "High-Intensity Conflict",
      country %in% medium_intensity_conflict ~ "Medium-Intensity Conflict",
      country %in% high_institutional_social_fragility ~ "High Institutional & Social Fragility",
      country %in% small_states ~ "Small States",
      TRUE ~ "Non-FCS country"
    )) %>%
    group_by( country) %>%
    #summarise(across(!! indicator,last)) %>%
    rename(data_available=!! indicator) %>%
    select(country,fcs,fcs_detail, date, data_available, weights ) %>%
    right_join(country_metadata) %>%
    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))    
  
  fcs_list <- c("High-Intensity Conflict", "Medium-Intensity Conflict","High Institutional & Social Fragility","Small States","Non-FCS country")
  fcs_list <- c("FCS country","Non-FCS country")
  p2_alt2 <- map_df %>%
    group_by(fcs) %>%
    filter(region!='Aggregates') %>%
    mutate(`SPI Score`=wtd.mean(data_available, weights = weights, na.rm=T),
           Label = paste(round(`SPI Score`,0))) %>%
    ggplot(aes(x=`SPI Score`, y=fcs, fill=fcs)) +
      geom_bar(stat="identity",position='dodge') +
      geom_text(aes(label=Label)) +
      labs(
      title=str_wrap(paste(title, 'By Fragile and Conflict-affected Situations (FCS)', sep=" - "),100),
      caption = 'Source: World Bank. Statistical Performance Indicators.',
      subtitle= 'Based on data for 2022 or the latest year available'
      ) +
      scale_y_discrete(limits = fcs_list) +
      expand_limits(x=c(0,100)) +
      theme_spi() +
      theme(legend.position = 'top',
            text=element_text(size=14)) 
  
  
  
p2_alt2 
  
 
}
FitFlextableToPage <- function(ft, pgwidth = 6){
  ft_out <- ft %>% autofit()
  ft_out <- width(ft_out, width = dim(ft_out)$widths*pgwidth /(flextable_dim(ft_out)$widths))
  return(ft_out)
}
#add equations to plots
eq_plot_txt <- function(data) {
  eq <- lm_robust(SPI.INDEX ~ value, data=data, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )
}

```

## Figure 4. Mapping of Key Assessment Tools to SPI Framework

Below shows a number of options for the chart.


```{r tab2}
table_2_df <- read_excel(path = paste0(output_dir, "/SPI_Index_compare.xlsx"))

dat <- table_2_df %>%
  select(Index, `Assessment Type`, `Country Coverage`, `Time Coverage`, `Index Methodology`, `Number of Indicators`, ends_with("Percentage")) %>%
  pivot_longer(cols=ends_with("Percentage"),
               names_to = 'Pillar',
               values_to = 'Pillar Coverage') %>%
  mutate(Pillar=str_remove_all(Pillar, " Percentage"),
         Pillar=str_remove_all(Pillar, "Data "),
         short_name=case_when(
           Index=="SPI" ~ "SPI",
           Index=="SCI" ~ "SCI",
           Index=="ODIN" ~ "ODIN",
           Index=="Open Data Barometer" ~ "ODB",
           Index=="Global Data Barometer" ~ "GDB",
           Index=="Ibrahim Index of African Governance Statistical Capacity Measure" ~ "IIAG",
           Index=="EU Snapshot tool"    ~ "Snapshot",
           Index=="UN NQAF self checklist"  ~ "NQAF" ,                     
           Index=="Paris21 NSDS self assessment" ~ "NSDS"
         )) 
```

### Stacked Bar Chart

Figure. Mapping of Assessments to SPI Framework
```{r}

    #set color pallete
  col_pal <- c("#ff595e","#ffca3a","#8ac926","#1982c4","#6a4c93")  
  names(col_pal) <- c("Use", "Services", "Products", "Sources", "Infrastructure")

  
  plot_dat <- dat %>%
    mutate(Index=if_else(Index=="Ibrahim Index of African Governance Statistical Capacity Measure", "Ibrahim Index", Index)) %>%
    mutate(Index=factor(Index,
                        levels=rev(unique(Index))
                        )) %>%
  mutate(`Pillar Coverage`=round(`Pillar Coverage`,2)) %>%
  mutate(Pillar=str_remove(Pillar, " Indicator")) %>%
  group_by(Index) %>%
  mutate(`Pillar Coverage`=`Pillar Coverage`/sum(`Pillar Coverage`))

    ggplot(plot_dat) + 
    geom_bar(aes(x = `Pillar Coverage`, y = Index, fill = Pillar), 
           stat = "identity", 
           position = position_stack()) +
    scale_fill_manual(
        name='',
        values=col_pal,
        na.value='grey'
      ) +
    # geom_text(data = plot_dat %>% filter(Index == 'SPI'),
    #   aes(x = `Pillar Coverage`, y = Index, 
    #             label = scales::percent(round(`Pillar Coverage`/sum(`Pillar Coverage`),2))) ,
    #         position = position_stack(vjust = .5),
    #   check_overlap = TRUE) +
    # geom_text(data = plot_dat %>% filter(Index == 'SCI'),
    #   aes(x = `Pillar Coverage`, y = Index, 
    #             label = scales::percent(round(`Pillar Coverage`/sum(`Pillar Coverage`),2))) ,
    #         position = position_stack(vjust = .5),
    #   check_overlap = TRUE) +
    # geom_text(data = plot_dat %>% filter(Index == 'ODIN'),
    #   aes(x = `Pillar Coverage`, y = Index, 
    #             label = scales::percent(round(`Pillar Coverage`/sum(`Pillar Coverage`),2))) ,
    #         position = position_stack(vjust = .5),
    #   check_overlap = TRUE) +
    # geom_text(data = plot_dat %>% filter(Index == 'Open Data Barometer'),
    #   aes(x = `Pillar Coverage`, y = Index, 
    #             label = scales::percent(round(`Pillar Coverage`/sum(`Pillar Coverage`),2))) ,
    #         position = position_stack(vjust = .5),
    #   check_overlap = TRUE) +
    # geom_text(data = plot_dat %>% filter(Index == 'Global Data Barometer'),
    #   aes(x = `Pillar Coverage`, y = Index, 
    #             label = scales::percent(round(`Pillar Coverage`/sum(`Pillar Coverage`),2))) ,
    #         position = position_stack(vjust = .5),
    #   check_overlap = TRUE) +
    # geom_text(data = plot_dat %>% filter(Index == 'Ibrahim Index'),
    #   aes(x = `Pillar Coverage`, y = Index, 
    #             label = scales::percent(round(`Pillar Coverage`/sum(`Pillar Coverage`),2))) ,
    #         position = position_stack(vjust = .5),
    #   check_overlap = TRUE) +
    # geom_text(data = plot_dat %>% filter(Index == 'EU Snapshot tool'),
    #   aes(x = `Pillar Coverage`, y = Index, 
    #             label = scales::percent(round(`Pillar Coverage`/sum(`Pillar Coverage`),2))) ,
    #         position = position_stack(vjust = .5),
    #   check_overlap = TRUE) +
    # geom_text(data = plot_dat %>% filter(Index == 'UN NQAF self checklist'),
    #   aes(x = `Pillar Coverage`, y = Index, 
    #             label = scales::percent(round(`Pillar Coverage`/sum(`Pillar Coverage`),2))) ,
    #         position = position_stack(vjust = .5),
    #   check_overlap = TRUE) +
    # geom_text(data = plot_dat %>% filter(Index == 'Paris21 NSDS self assessment'),
    #   aes(x = `Pillar Coverage`, y = Index, 
    #             label = scales::percent(round(`Pillar Coverage`/sum(`Pillar Coverage`),2))) ,
    #         position = position_stack(vjust = .5),
    #   check_overlap = TRUE)   +
      scale_x_continuous(labels=scales::percent) +
      bbc_style() +
      theme(legend.position='top',
            legend.text = element_text(size=12),
            
            ) +
      labs(
        subtitle="Share of Indicators Mapped to Pillar (%)"
      )
    # annotate("text", x=1.5,y=0.8, label=str_wrap(variables,25), size=6)
  



```

### Bar Chart

```{r Table2fig, fig.height=5, fig.width=7}



index_plotter <- function(variables) {
  
  if (variables=="Ibrahim Index of African Governance Statistical Capacity Measure") {
    title="Ibrahim Index"
  } else {
    title=variables
  }
  
  dat %>%
    filter(Index== variables) %>%
    pull(`Pillar Coverage`) %>%
    round(2) %>%
    gg_bars() + 
    scale_y_continuous(labels=scales::percent) +
    ggtitle(title) +
    theme(
    plot.title = ggplot2::element_text(family='Helvetica',
                                       size=24,
                                       face="bold",
                                       color="#222222"))
    # annotate("text", x=1.5,y=0.8, label=str_wrap(variables,25), size=6)
  
}

spi_plt <- index_plotter('SPI') 
spi_plt + coord_flip()

sci_plt <- index_plotter('SCI')  
sci_plt + coord_flip()

odin_plt <- index_plotter('ODIN')  
odin_plt + coord_flip()

odb_plt <- index_plotter('Open Data Barometer') 
odb_plt + coord_flip()

gdb_plt <- index_plotter('Global Data Barometer')  
gdb_plt + coord_flip()

iiag_plt <- index_plotter('Ibrahim Index of African Governance Statistical Capacity Measure')  
iiag_plt + coord_flip()

eu_plt <- index_plotter('EU Snapshot tool') 
eu_plt + coord_flip()

nqaf_plt <- index_plotter('UN NQAF self checklist')  
nqaf_plt + coord_flip()

nsds_plt <- index_plotter('Paris21 NSDS self assessment')  
nsds_plt + coord_flip()




```

```{r, fig.height=15, fig.width=15}




(spi_plt + sci_plt + odin_plt ) / (odb_plt + gdb_plt + iiag_plt) / (eu_plt + nqaf_plt + nsds_plt) & 
  theme(
        plot.title = element_text(size=20),
        axis.text = element_text( size = rel(.7)),
        plot.margin = margin(.2, .2, .2, .2, "cm"), 
        ) 

```

### Radar Chart

```{r echo=FALSE, fig.height=15, fig.width=15, message=FALSE, warning=FALSE}
library(fmsb)
radarfun <- function(variables) {
    temp <- dat %>%
    filter(Index== variables) %>%
    select(Pillar, `Pillar Coverage`) %>%
    mutate(`Pillar`=str_remove(`Pillar`, " Indicator")) %>%
    pivot_wider(
      names_from=Pillar,
      values_from=`Pillar Coverage`
    ) 
}

radarfun2 <- function(variables) {
    temp <- dat %>%
    filter(Index== variables) %>%
    select(Pillar, `Pillar Coverage`) %>%
    mutate(`Pillar`=str_remove(`Pillar`, " Indicator")) 
}


  min <- data.frame(  
    Use          = c(0) ,
    Services     = c(0) ,  
    Products     = c(0) ,  
    Sources      = c(0) , 
    Infrastructure = c(0) 
  )

  max <- data.frame(  
    Use          = c(1) ,
    Services     = c(1) ,  
    Products     = c(1) ,  
    Sources      = c(1) , 
    Infrastructure = c(1) 
  )  
  
  ideal <-    data.frame(  
    Use          = c(0.2) ,
    Services     = c(0.2) ,  
    Products     = c(0.2) ,  
    Sources      = c(0.2) , 
    Infrastructure = c(0.2) 
  )  
  
  # max %>%
  #   bind_rows(min) %>%
  #   bind_rows(radarfun('SPI')) %>%
  #   bind_rows(radarfun('SCI')) %>%
  #   bind_rows(radarfun('ODIN')) %>%
  #   bind_rows(radarfun('Open Data Barometer')) %>%
  #   bind_rows(radarfun('Global Data Baromete')) %>%
  #   bind_rows(radarfun('Ibrahim Index of African Governance Statistical Capacity Measure')) %>%
  #   bind_rows(radarfun('EU Snapshot tool')) %>%
  #   bind_rows(radarfun('UN NQAF self checklist')) %>%
  #   bind_rows(radarfun('Paris21 NSDS self assessment')) %>%
  #   radarchart()

  color <- c("#33a8c7",
             "#52e3e1",
             "#a0e426",
             "#fdf148",
             "#ffab00",
             "#f77976",
             "#f050ae",
             "#bdb2ff",
             "#d883ff",
             "#9336fd")
  
  names(color) <- unique(dat$Index)
  
radarplt <- function(variables, color = "#00AFBB", 
                                        vlabels = colnames(data), vlcex = 0.7,
                                        caxislabels = NULL,  ...) {
  if (variables=="Ibrahim Index of African Governance Statistical Capacity Measure") {
    title="Ibrahim Index"
  } else {
    title=variables
  }
  

  max %>%
    bind_rows(min) %>%
    bind_rows(ideal) %>%    
    bind_rows(radarfun(variables)) %>%
    radarchart(axistype = 1,
    # Customize the polygon
    pcol = c('#83c5be',color), pfcol = c(scales::alpha('#83c5be', 0.5),scales::alpha(color, 0.7)), plwd = 2, plty = 1,
    # Customize the grid
    cglcol = "grey", cglty = 1, cglwd = 0.8,cex.main=2,
    # Customize the axis
    axislabcol = "grey", 
    # Variable labels
    vlcex = vlcex, vlabels = vlabels,
    caxislabels = caxislabels, title = title, ...)
}  
  
spi_plt <-   function(){radarplt('SPI')}
#spi_plt()

sci_plt <- function(){radarplt('SCI')  }
#sci_plt()

odin_plt <- function(){radarplt('ODIN')  }
#odin_plt()

odb_plt <- function(){radarplt('Open Data Barometer') }
#odb_plt()

gdb_plt <- function(){radarplt('Global Data Barometer')  }
#gdb_plt()

iiag_plt <- function(){radarplt('Ibrahim Index of African Governance Statistical Capacity Measure')  }
#iiag_plt()

eu_plt <- function(){radarplt('EU Snapshot tool') }
#eu_plt()

nqaf_plt <- function(){radarplt('UN NQAF self checklist')  }
#nqaf_plt()

nsds_plt <- function(){radarplt('Paris21 NSDS self assessment')  }
#nsds_plt()


```

```{r echo=FALSE, fig.height=15, fig.width=15, message=FALSE, warning=FALSE}
par(mar = c(1, 1, 1, 1)) #decrease default margin
layout(matrix(1:9, ncol=3)) #draw 4 plots to device
#loop over rows to draw them, add 1 as max and 0 as min for each var
lapply(unique(dat$Index), function(i) { 
    
    radarplt(i, color=color[i],
             vlcex=1.1,
             calcex=1.1)
})
```


## Figure 5. Correlation of SPI with Human Capital Levels, Poverty, Gini





```{r corprograms}
#ggplot theme
theme_spi <- function () { 
    bbc_style() %+replace%
    theme(
      plot.caption = element_text(hjust = 0),
      plot.title = ggplot2::element_text(family="Helvetica",
                                       size=16,
                                       face="bold",
                                       color="#222222")      
      #plot.title=element_blank() #remove all titles from plots (sometimes we may need to bring title outside plot)
    )
}


FitFlextableToPage <- function(ft, pgwidth = 6){

  ft_out <- ft %>% 
    autofit()

  ft_out <- width(ft_out, width = dim(ft_out)$widths*pgwidth /(flextable_dim(ft_out)$widths))
  return(ft_out)
}

#add equations to plots
eq_plot_txt <- function(data, inp, var) {
  eq <- lm_robust(inp ~ var, data=data, se_type='HC2')
  coef <- round(coef(eq),1)
  std_err <- round(sqrt(diag(vcov(eq))),1)
  r_2<- round(summary(eq)$r.squared,2)
  sprintf(" y = %.1f + %.1f x, R<sup>2</sup> = %.2f <br> (%.1f) <span style='color:white'> %s</span> (%.1f) ", coef[1], coef[2], r_2[1], std_err[1],"s", std_err[2])
  
}

```

```{r spiload1, echo=FALSE}
#add in population
pop_df <- wbstats::wb_data(country="all",
             indicator='SP.POP.TOTL',
             start_date=2004,
             end_date=end_date) %>%
  mutate(date=as.numeric(date)) %>%
  mutate(population=SP.POP.TOTL) %>%
  select(country, date, population) 
#import data
spi_index_df <- read_csv(paste(raw_dir, 'SPI_index.csv', sep="/")) %>%
    left_join(pop_df) 


spi_df_final <- read_csv( file = paste(raw_dir, 'SPI_data.csv', sep="/")) %>%
  left_join(pop_df) 
#metadata 
metadata <- data.frame(
  series = c('SPI.INDEX', 'SPI.INDEX.PIL1', 'SPI.INDEX.PIL2', 'SPI.INDEX.PIL3', 'SPI.INDEX.PIL4', 'SPI.INDEX.PIL5'),
  indicator_name = c('SPI Overall Score', 'Pillar 1: Data Use', 'Pillar 2: Data Services', 'Pillar 3: Data Products', 'Pillar 4: Data Sources', 'Pillar 5: Data Infrastructure')
)
#get list of country info
country_list <- wbstats::wb_countries()

SPI_end_date <- spi_index_df %>%
  filter(date==end_date) %>%
  filter(!is.na(SPI.INDEX) & !is.na(weights)) %>%
  mutate(ISO_A3_EH=iso3c) 


SPI <- spi_index_df
#read in TopoJSON from World Bank
#countries <- geojsonio::geojson_read("WB_countries_Admin0_lowres.geojson",
#                                     what = "sp")
```









```{r}
span <- c(2004:end_date)

spi_df_empty <- bind_rows(replicate(length(span), wbstats::wbcountries(), simplify = FALSE), .id='date') %>%
  mutate(date=as.numeric(date)+span[1]-1) %>%
  filter(region!="Aggregates") # take out the aggregates (LAC, SAR, etc)

```


```{r correlates}


start_date=2010

correlates_df <- wb_data(country="all", 
              indicator=c('SI.POV.DDAY', 'SI.POV.GINI'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('SI.POV.DDAY', 'SI.POV.GINI'), .direction = 'downup') %>%
  filter(date==end_date)


ge_df <- wb_data(country="all", 
              indicator=c('GE.EST'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('GE.EST'), .direction = 'downup') %>%
  filter(date==end_date) %>%
  select(iso3c, date, GE.EST)

gdp_df <- wb_data(country="all", 
              indicator=c('NY.GDP.PCAP.KD'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('NY.GDP.PCAP.KD'), .direction = 'downup') %>%
  filter(date==end_date) %>%  select(iso3c, date, NY.GDP.PCAP.KD)

hci_df <- wb_data(country="all", 
              indicator=c('HD.HCI.OVRL'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('HD.HCI.OVRL'), .direction = 'downup') %>%
  filter(date==end_date) %>%
  select(iso3c, HD.HCI.OVRL)

undernourish_df <- wb_data(country="all", 
              indicator=c('SN.ITK.DEFC.ZS'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('SN.ITK.DEFC.ZS'), .direction = 'downup') %>%
  filter(date==end_date) %>%
  select(iso3c, date, SN.ITK.DEFC.ZS)

mmt_df <-  wb_data(country="all", 
              indicator=c('SH.STA.MMRT'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('SH.STA.MMRT'), .direction = 'downup') %>%
  filter(date==end_date) %>%
  select(iso3c,  SH.STA.MMRT)


lpov_df <-  wb_data(country="all", 
              indicator=c('SE.LPV.PRIM'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('SE.LPV.PRIM'), .direction = 'downup') %>%
  filter(date==end_date)  %>%
  select(iso3c, date, SE.LPV.PRIM)  


wbl_df <- wb_data(country="all", 
              indicator=c('SG.LAW.INDX'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('SG.LAW.INDX'), .direction = 'downup') %>%
  filter(date==end_date) %>%
  select(iso3c, date, SG.LAW.INDX)

safely_df <- wb_data(country="all", 
              indicator=c('SH.H2O.SMDW.ZS'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('SH.H2O.SMDW.ZS'), .direction = 'downup') %>%
  filter(date==end_date) %>%
  select(iso3c, date, SH.H2O.SMDW.ZS)
  
elect_df <- wb_data(country="all", 
              indicator=c('EG.ELC.ACCS.ZS'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('EG.ELC.ACCS.ZS'), .direction = 'downup') %>%
  filter(date==end_date) %>%
  select(iso3c, date, EG.ELC.ACCS.ZS)
  
manuf_df <- wb_data(country="all", 
              indicator=c('NV.IND.MANF.ZS'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('NV.IND.MANF.ZS'), .direction = 'downup') %>%
  filter(date==end_date) %>%
  select(iso3c, date, NV.IND.MANF.ZS)


slums_df <- wb_data(country="all", 
              indicator=c('EN.POP.SLUM.UR.ZS'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('EN.POP.SLUM.UR.ZS'), .direction = 'downup') %>%
  filter(date==end_date) %>%
  select(iso3c,  EN.POP.SLUM.UR.ZS)

ff_sub_df <- read_csv(paste0(raw_dir, "/Subsidies.csv")) %>%
  rename(iso3c=code)
  

ghg_df <- wb_data(country="all", 
              indicator=c('EN.ATM.GHGT.KT.CE'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  right_join(spi_df_empty) %>%
  fill(c('EN.ATM.GHGT.KT.CE'), .direction = 'downup') %>%
  filter(date==end_date) %>%
  select(iso3c,  EN.ATM.GHGT.KT.CE)

protected_df <- wb_data(country="all", 
              indicator=c('ER.MRN.PTMR.ZS','ER.LND.PTLD.ZS'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  fill(c('ER.MRN.PTMR.ZS','ER.LND.PTLD.ZS'), .direction = 'downup') %>%

  filter(date==end_date) %>%
  select(iso3c, date, ER.MRN.PTMR.ZS,ER.LND.PTLD.ZS)

debt_df <- wb_data(country="all", 
              indicator=c('DT.TDS.DECT.EX.ZS'),
              start_date=start_date,
              end_date=end_date,
              ) %>% # fill forward 
  group_by(country) %>%
  fill(c('DT.TDS.DECT.EX.ZS'), .direction = 'downup') %>%

  filter(date==end_date) %>%
  select(iso3c, date, DT.TDS.DECT.EX.ZS)

#bring in Sachs SDG index
#https://dashboards.sdgindex.org/explorer
# accessed on 2023-07-20

sdg_index <- read_excel(path=paste0(raw_dir, "/SDR2023-data.xlsx"),
                        sheet='Backdated SDG Index'
) %>%
  transmute(iso3c=`Country Code ISO3`,
         date=year,
         sdg_index_score=`SDG Index Score`)

#bring it all together
correlates_df_end_date <- correlates_df %>%
  left_join(ge_df) %>%
  left_join(gdp_df) %>%
  left_join(hci_df) %>%
  left_join(undernourish_df) %>%
  left_join(mmt_df) %>%
  left_join(lpov_df) %>%
  left_join(wbl_df) %>%
  left_join(safely_df) %>%
  left_join(elect_df) %>%
  left_join(manuf_df) %>%
  left_join(slums_df) %>%
  left_join(ff_sub_df) %>%
  left_join(ghg_df) %>%
  left_join(protected_df) %>%
  left_join(debt_df) %>%
  left_join(sdg_index) %>%
  filter(region!="Aggregates") %>%
  select(iso3c, c('SI.POV.DDAY', 'SI.POV.GINI','GE.EST','NY.GDP.PCAP.KD','HD.HCI.OVRL','SN.ITK.DEFC.ZS','SH.STA.MMRT','SE.LPV.PRIM','SG.LAW.INDX','SH.H2O.SMDW.ZS',"EG.ELC.ACCS.ZS",'NV.IND.MANF.ZS','EN.POP.SLUM.UR.ZS','subsidies','EN.ATM.GHGT.KT.CE','ER.MRN.PTMR.ZS','ER.LND.PTLD.ZS','DT.TDS.DECT.EX.ZS', 'sdg_index_score'))


sdgs <- c('SI.POV.DDAY','SN.ITK.DEFC.ZS','SH.STA.MMRT','SE.LPV.PRIM','SG.LAW.INDX',
          'SH.H2O.SMDW.ZS','EG.ELC.ACCS.ZS','NY.GDP.PCAP.KD','NV.IND.MANF.ZS','SI.POV.GINI',
          'EN.POP.SLUM.UR.ZS','subsidies','EN.ATM.GHGT.KT.CE','ER.MRN.PTMR.ZS','ER.LND.PTLD.ZS'
          ,'GE.EST','DT.TDS.DECT.EX.ZS', 'sdg_index_score')

sdg_names <- c('SDG 1: Extreme Poverty','SDG 2: Undernourishment','SDG 3: Maternal Mortality','SDG 4: Learning Poverty','SDG 5: Women, Business, Law Index',
          'SDG 6: Safely Managed Water','SDG 7: Access to Electricity','SDG 8: GDP per capita (2015 constant $)','SDG 9: Manufacturing value added (% of GDP)','SDG 10: Gini Index',
          'SDG 11: Population in Slums','SDG 12: Fossil Fuel Subsidies (% of GDP)','SDG 13: Greenhouse Gas Emissions','SDG 14: Marine protected areas','SDG 15: Terrestrial Protected Areas','SDG 16: Government Effectiveness','SDG 17: Total Debt Service', 'SDR: SDG Index Overall Score')
```


```{r comparison, include=FALSE}



#pull SCI values

sci_df <- read_excel(paste0(raw_dir, "Statistical_Capacity_Indicators.xlsx")) %>%
  mutate(YR2004=as.numeric(YR2004),
         iso3c=`Country Code`) %>%
  filter(`Series Code`=="IQ.SCI.OVRL") %>%
  select(-`Country Code`, -`Series Code`) %>%
  pivot_longer(
    cols=c(YR2004:YR2020),
    names_to='YR',
    values_to='SCI'
  ) %>%
  mutate(date=str_remove_all(YR,"YR"),
         date=as.numeric(date)) %>%
  select(iso3c, date, SCI)
  
  
  

# Parse the JSON content and convert it to a data frame.
sci_df <- sci_df %>%
  left_join(spi_df_empty) %>% #add on country metadata
  filter(!is.na(income)) %>%
  select(iso3c, date, SCI  ) %>%
  group_by(date) %>%
  arrange(-SCI) %>%
  mutate(SCI_rank=rank(-SCI),
         SCI_rank=if_else(is.na(SCI),as.numeric(NA),SCI_rank)) 
  


#check unique values by dimension.
unique_scores_df <- sci_df %>% filter(date==2020) %>% mutate(SCI=round(SCI,3))
unique_scores_sci <-length(unique(unique_scores_df$SCI))



#read in ODIN data
  for (i in c(2015,2016,2017,2018,2020,2022)) {
   temp <- read_csv(paste(raw_dir, '/','ODIN_',i,'.csv', sep=""))  %>%
        as_tibble(.name_repair = 'universal') %>%
        mutate(date=i) %>%
        filter(Data.categories=='All Categories') %>%
        select(-Year)


    assign(paste('odin_df',i,sep="_"), temp)
  }

    #bind different years together
odin_df <- bind_rows(odin_df_2015, odin_df_2016, odin_df_2017, odin_df_2018, odin_df_2020, odin_df_2022)


odin_df <- odin_df %>%
    select(Country.Code, date, Overall.score) %>%
    rename(iso3c=Country.Code,
           ODIN_score=Overall.score) %>%
    group_by(date) %>%
    arrange(-ODIN_score) %>%
    mutate(ODIN_rank=rank(-ODIN_score, na.last='NA')) %>% 
  right_join(spi_df_empty) %>%
  arrange(country, date) %>%
  group_by(country) %>%
  mutate(across(starts_with("ODIN"), na.locf, na.rm=FALSE)) %>%
  left_join(wbstats::wb_countries()) %>%
  select(iso3c, date, starts_with("ODIN"))


#read in the ODB
odb_df_2017 <- read_excel(path=paste0(raw_dir, '/Open Data Barometer - Historical Data (All five Editions) - Public.xlsx'),
                     sheet='ODB-2017-Rankings') %>%
  transmute(
    iso3c=ISO3,
    odb=`ODB-Score`
  )


odb_df_2016_info <- read_excel(path=paste0(raw_dir, '/Open Data Barometer - Historical Data (All five Editions) - Public.xlsx'),
                     sheet='ODB-2016-Rankings') %>%
  select(ISO3, Country) 

odb_df_2016 <- read_excel(path=paste0(raw_dir, '/Open Data Barometer - Historical Data (All five Editions) - Public.xlsx'),
                     sheet='ODB-2016-Absolute-Recalculated') %>%
  left_join(odb_df_2016_info) %>%
  transmute(
    iso3c=ISO3,
    odb_2016=`ODB Score (0-100)`
  )

odb_df_2015 <- read_excel(path=paste0(raw_dir, '/Open Data Barometer - Historical Data (All five Editions) - Public.xlsx'),
                     sheet='ODB-2015-Rankings')
odb_df_2014 <- read_excel(path=paste0(raw_dir, '/Open Data Barometer - Historical Data (All five Editions) - Public.xlsx'),
                     sheet='ODB-2014-Rankings')
odb_df_2013 <- read_excel(path=paste0(raw_dir, '/Open Data Barometer - Historical Data (All five Editions) - Public.xlsx'),
                     sheet='ODB-2013-Rankings')


#read in the GDB
gdb_df <- read_csv(paste0(raw_dir, "/global-data-barometer-topic--all-countries.csv")) %>%
  transmute(iso3c=iso,
            gdb=`GDB 2021 score`)

#IIAG
iiag_df <- read_csv(paste0(raw_dir, "/2022 IIAG_Scores.csv")) %>%
  filter(Year==2022) %>%
  transmute(
    iso2c=Country_ISO,
    iiag_overall=`OVERALL GOVERNANCE`,
    iiag_stats=`Capacity of the Statistical System`
  ) %>%
  left_join(wbstats::wb_countries()) %>%
  select(iso3c,iiag_overall,iiag_stats )
  

#create one database
comparison_df <- spi_index_df %>%
  ungroup() %>%
  filter(date ==end_date) %>%
  arrange(-SPI.INDEX) %>%
  mutate(across(starts_with('SPI.INDEX'),~1*.),
         across(starts_with('SPI.INDEX'),round,1)) %>%
  select(country, iso3c, date, income, region, SPI.INDEX) %>%
  left_join(sci_df %>% filter(date==2020) %>% ungroup() %>% select(-date)) %>%
  left_join(odin_df) %>%
  left_join(odb_df_2017) %>%
  left_join(odb_df_2016) %>%
  mutate(odb=if_else(is.na(odb),odb_2016,odb)) %>%
  left_join(gdb_df) %>%
  left_join(iiag_df) %>%
  left_join(correlates_df_end_date)




```




Note: N.A. stands for not available. The number of countries are for the latest year for all the indexes. The SPI covers between 167 and 181 countries for 2016-2020. The SPI covers between 115 and 145 countries for 2004-2020. The ODIN covers between 125 and 187 countries for 2015-2020. The Open Data Barometer covers between 30 and 115 countries for 2013-2017. The Open Data Barometer covers 30 countries only in 2017 and is replaced by Global Data Barometer the after this year. The Global Data Barometer covers 109 countries for 2019-2021. The IIAG covers 54 countries for all years between 2010-2019. All the indexes provide annual data, except for the Global Data Barometer that provides a single data point for each country in the stated period.








```{r scatter_spi}

#HCI
hci_spi <- ggplot(data=comparison_df, aes(x=HD.HCI.OVRL, y=SPI.INDEX)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c), size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  ylab('SPI Overall Score') +
  xlab('Human Capital Index') +
  geom_richtext(
    aes(x = 0.7, y = 40,label = eq_plot_txt(comparison_df, SPI.INDEX,HD.HCI.OVRL)), hjust=0.2, size=4
  ) +
  labs(
    title="Panel A. Human Capital Index"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )

#poverty

pov_spi <- ggplot(data=comparison_df, aes(x=SI.POV.DDAY, y=SPI.INDEX)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c), size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('SPI Overall Score') +
  xlab('Poverty Headcount Ratio at $1.90 a day') +
  geom_richtext(
    aes(x = 40, y = 35,label = eq_plot_txt(comparison_df, SPI.INDEX,SI.POV.DDAY), hjust=0.2), size=4
  ) +
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_end_date), hjust = 0) +
  theme(legend.position = 'bottom'
        ) +
  labs(
    title="Panel B. Poverty Headcount. $1.90 a day"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )
#gini

gini_spi <- ggplot(data=comparison_df, aes(x=SI.POV.GINI, y=SPI.INDEX)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c),size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('SPI Overall Score') +
  xlab('Gini Index')  +
  geom_richtext(
    aes(x = 50, y = 35,label = eq_plot_txt(comparison_df, SPI.INDEX,SI.POV.GINI), hjust=0.2), size=4
  ) +
    theme(legend.position = 'bottom') +
  labs(
    title="Panel C. Gini Index"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )
```


```{r pov_giniplotvert, fig.width=8, fig.height=10}
### Scatterplot log GDP SPI
(hci_spi  / pov_spi / gini_spi)   +
  plot_annotation(
    #title='Plot of SPI overall score on Poverty Ratio and Gini Index',
    caption='Source: All indicators come from the World Bank. HD.HCI.OVRL, SI.POV.DDAY & SI.POV.GINI. SPI data for year 2022. \n HCI, Poverty, and Gini values are latest values available for countries.'
    ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    title = ggplot2::element_text(size=10)
  )
  
```


### Plots for ODIN

```{r scatter_odin}

#HCI
hci_odin <- ggplot(data=comparison_df, aes(x=HD.HCI.OVRL, y=ODIN_score)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c), size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  ylab('Open Data Watch - ODIN') +
  xlab('Human Capital Index') +
  geom_richtext(
    aes(x = 0.7, y = 40,label = eq_plot_txt(comparison_df, ODIN_score,HD.HCI.OVRL)), hjust=0.2, size=4
  ) +
  labs(
    title="Panel A. Human Capital Index"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )

#poverty

pov_odin <- ggplot(data=comparison_df, aes(x=SI.POV.DDAY, y=ODIN_score)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c), size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Open Data Watch - ODIN') +
  xlab('Poverty Headcount Ratio at $1.90 a day') +
  geom_richtext(
    aes(x = 40, y = 35,label = eq_plot_txt(comparison_df, ODIN_score,SI.POV.DDAY), hjust=0.2), size=4
  ) +
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_end_date), hjust = 0) +
  theme(legend.position = 'bottom'
        ) +
  labs(
    title="Panel B. Poverty Headcount. $1.90 a day"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )
#gini

gini_odin <- ggplot(data=comparison_df, aes(x=SI.POV.GINI, y=ODIN_score)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c),size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Open Data Watch - ODIN') +
  xlab('Gini Index')  +
  geom_richtext(
    aes(x = 50, y = 35,label = eq_plot_txt(comparison_df, ODIN_score,SI.POV.GINI), hjust=0.2), size=4
  ) +
    theme(legend.position = 'bottom') +
  labs(
    title="Panel C. Gini Index"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )
```


```{r pov_giniplotvert_odin, fig.width=8, fig.height=10}
### Scatterplot log GDP SPI
(hci_odin  / pov_odin / gini_odin)   +
  plot_annotation(
    #title='Plot of SPI overall score on Poverty Ratio and Gini Index',
    caption='Source: All indicators come from the World Bank and Open Data Watch. HD.HCI.OVRL, SI.POV.DDAY & SI.POV.GINI. \n ODIN data for year 2022. HCI, Poverty, and Gini values are latest values available for countries.'
    ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    title = ggplot2::element_text(size=10)
  )
  
```

### Plots for Open Data Barometer

```{r scatter_odb}

#HCI
hci_odb <- ggplot(data=comparison_df, aes(x=HD.HCI.OVRL, y=odb)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c), size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  ylab('Open Data Barometer') +
  xlab('Human Capital Index') +
  geom_richtext(
    aes(x = 0.7, y = 40,label = eq_plot_txt(comparison_df, odb,HD.HCI.OVRL)), hjust=0.2, size=4
  ) +
  labs(
    title="Panel A. Human Capital Index"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )

#poverty

pov_odb <- ggplot(data=comparison_df, aes(x=SI.POV.DDAY, y=odb)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c), size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Open Data Barometer') +
  xlab('Poverty Headcount Ratio at $1.90 a day') +
  geom_richtext(
    aes(x = 40, y = 35,label = eq_plot_txt(comparison_df, odb,SI.POV.DDAY), hjust=0.2), size=4
  ) +
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_end_date), hjust = 0) +
  theme(legend.position = 'bottom'
        ) +
  labs(
    title="Panel B. Poverty Headcount. $1.90 a day"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )
#gini

gini_odb <- ggplot(data=comparison_df, aes(x=SI.POV.GINI, y=odb)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c),size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Open Data Barometer') +
  xlab('Gini Index')  +
  geom_richtext(
    aes(x = 50, y = 35,label = eq_plot_txt(comparison_df, odb,SI.POV.GINI), hjust=0.2), size=4
  ) +
    theme(legend.position = 'bottom') +
  labs(
    title="Panel C. Gini Index"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )
```


```{r pov_giniplotvert_odb, fig.width=8, fig.height=10}
### Scatterplot log GDP SPI
(hci_odb  / pov_odb / gini_odb)   +
  plot_annotation(
    #title='Plot of SPI overall score on Poverty Ratio and Gini Index',
    caption='Source: All indicators come from the World Bank and Open Data Barometer. HD.HCI.OVRL, SI.POV.DDAY & SI.POV.GINI. \n Open Data Barometer data for year 2017. HCI, Poverty, and Gini values are latest values available for countries.'
    ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    title = ggplot2::element_text(size=10)
  )
  
```

### Plots for Global Data Barometer

```{r scatter_gdb}

#HCI
hci_gdb <- ggplot(data=comparison_df, aes(x=HD.HCI.OVRL, y=gdb)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c), size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  ylab('Global Data Barometer') +
  xlab('Human Capital Index') +
  geom_richtext(
    aes(x = 0.7, y = 40,label = eq_plot_txt(comparison_df, gdb,HD.HCI.OVRL)), hjust=0.2, size=4
  ) +
  labs(
    title="Panel A. Human Capital Index"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )

#poverty

pov_gdb <- ggplot(data=comparison_df, aes(x=SI.POV.DDAY, y=gdb)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c), size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Global Data Barometer') +
  xlab('Poverty Headcount Ratio at $1.90 a day') +
  geom_richtext(
    aes(x = 40, y = 35,label = eq_plot_txt(comparison_df, gdb,SI.POV.DDAY), hjust=0.2), size=4
  ) +
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_end_date), hjust = 0) +
  theme(legend.position = 'bottom'
        ) +
  labs(
    title="Panel B. Poverty Headcount. $1.90 a day"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )
#gini

gini_gdb <- ggplot(data=comparison_df, aes(x=SI.POV.GINI, y=gdb)) +
  #facet_wrap(~indicator) +
  geom_text(aes(label=iso3c),size=3) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Global Data Barometer') +
  xlab('Gini Index')  +
  geom_richtext(
    aes(x = 50, y = 35,label = eq_plot_txt(comparison_df, gdb,SI.POV.GINI), hjust=0.2), size=4
  ) +
    theme(legend.position = 'bottom') +
  labs(
    title="Panel C. Gini Index"
  ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    plot.title = ggplot2::element_text(size=12)
  )
```


```{r pov_giniplotvert_gdb, fig.width=8, fig.height=10}
### Scatterplot log GDP SPI
(hci_gdb  / pov_gdb / gini_gdb)   +
  plot_annotation(
    #title='Plot of SPI overall score on Poverty Ratio and Gini Index',
    caption='Source: All indicators come from the World Bank and Global Data Barometer. HD.HCI.OVRL, SI.POV.DDAY & SI.POV.GINI. Global Data Barometer data for year 2021. \n HCI, Poverty, and Gini values are latest values available for countries.'
    ) +
  theme(
    axis.title = ggplot2::element_text(size=10),
    title = ggplot2::element_text(size=10)
  )
  
```


## Correlations

```{r corr}


#get correlations with pvalues
index_cor_full <- comparison_df %>%
  select(SPI.INDEX, SCI, ODIN_score, odb, gdb) %>%
  rename(
    SPI=SPI.INDEX,
    SCI=SCI, 
    ODIN=ODIN_score, 
    ODB=odb, 
    GDB=gdb
  ) %>%
  as.matrix() %>%
  rcorr()

#get just pearon correlation
index_cor <- index_cor_full$r

#keep just the upper triangle
index_cor[upper.tri(index_cor)] <- NA # erase the upper triangle
diag(index_cor) <- NA 

#round
index_cor <- round(index_cor,2)

#color
index_col <- index_cor
index_col[index_cor>=0.5] <- "#fcca46"
index_col[index_cor>=0.65] <- "#a1c181"
index_col[index_cor>=0.8] <- "#619b8a"

#get statistical significance
index_sig <- index_cor_full$P
index_sig[upper.tri(index_sig)] <- NA # erase the upper triangle
diag(index_sig) <- NA 
#function for significance
stars <- function(x) {
  if (between(x,0.05,0.1)) {
    paste0(x,"*")
  } else if (between(x,0.05,0.1)) {
    paste0(x,"**")
  } else if (between(x,0.01,0.5)) {
    paste0(x,"***")
  } else {
    paste0(x,"")
  }
}

as_tibble(cbind(index_cor, index_sig,var=c("SPI", "SCI","ODIN", "ODB", "GDB")), .name_repair="universal") %>%
  mutate(across(c(1:10), as.numeric)) %>%
  mutate(SPI=case_when(
            between(SPI...6,0.05,0.1) ~   paste0(SPI...1,"*"),
            between(SPI...6,0.01,0.5) ~  paste0(SPI...1,"**"),
            between(SPI...6,0.0,0.01) ~ paste0(SPI...1,"***"),
           is.na(SPI...1) ~ "",
           TRUE ~      paste0(SPI...1,"")
            ),
         SCI=case_when(
           between(SCI...7,0.05,0.1) ~   paste0(SCI...2,"*"),
           between(SCI...7,0.01,0.5) ~  paste0(SCI...2,"**"),
           between(SCI...7,0.0,0.01) ~ paste0(SCI...2,"***"),
           is.na(SCI...2) ~ "",
           TRUE ~      paste0(SCI...2,"")
           ),
         ODIN=case_when(
           between(ODIN...8,0.05,0.1) ~   paste0(ODIN...3,"*"),
           between(ODIN...8,0.01,0.5) ~  paste0(ODIN...3,"**"),
           between(ODIN...8,0.0,0.01) ~ paste0(ODIN...3,"***"),
           is.na(ODIN...3) ~ "",
           TRUE ~      paste0(ODIN...3,"")
         ),
         ODB=case_when(
           between(ODB...9,0.05,0.1) ~   paste0(ODB...4,"*"),
           between(ODB...9,0.01,0.5) ~  paste0(ODB...4,"**"),
           between(ODB...9,0.0,0.01) ~ paste0(ODB...4,"***"),
           is.na(ODB...4) ~ "",
           TRUE ~      paste0(ODB...4,"")
         ),
         GDB=case_when(
           between(GDB...10,0.05,0.1) ~   paste0(GDB...5,"*"),
           between(GDB...10,0.01,0.5) ~  paste0(GDB...5,"**"),
           between(GDB...10,0.0,0.01) ~ paste0(GDB...5,"***"),
           is.na(GDB...5) ~ "",
           TRUE ~      paste0(GDB...5,"")
         )
    ) %>% select( var, SPI, SCI, ODIN, ODB, GDB) %>%
  flextable() %>%
  # bg(j=2,
  #      bg=index_col[,1]) %>%
  # bg(j=3,
  #      bg=index_col[,2]) %>%
  # bg(j=4,
  #      bg=index_col[,3]) %>%
  # bg(j=5,
  #      bg=index_col[,4]) %>%
  # bg(j=6,
  #      bg=index_col[,5]) %>%
  add_footer_lines(
    'Note: * p<0.1,** p<0.05,*** p<0.01 '
    
  ) %>%
  add_header_lines('Table. Correlation between Indexes')
  

```
Correlations with 17 SDGs & the SDR SDG Overall Score [Sustainable Development Report 2023](https://dashboards.sdgindex.org/).

```{r corr2}

#get correlations with pvalues
index_cor_full <- comparison_df %>%
  select(c('SPI.INDEX', 'SCI', 'ODIN_score', 'odb', 'gdb'),sdgs) %>%
  rename(
    SPI=SPI.INDEX,
    SCI=SCI, 
    ODIN=ODIN_score, 
    ODB=odb, 
    GDB=gdb
  ) %>%
  as.matrix() %>%
  rcorr()

#get just pearon correlation
index_cor <- index_cor_full$r
index_cor <- index_cor[6:23,1:5]


#round
index_cor <- round(index_cor,2)

#color
index_col <- index_cor
index_col[abs(index_cor)>=0.5] <- "#fcca46"
index_col[abs(index_cor)>=0.65] <- "#a1c181"
index_col[abs(index_cor)>=0.8] <- "#619b8a"
index_col[abs(index_cor)<0.5] <- "white"

#get statistical significance
index_sig <- index_cor_full$P
index_sig <- index_sig[6:23,1:5]

rownames(index_cor) <- sdg_names
rownames(index_sig) <- sdg_names 


tab <- as_tibble(cbind(index_cor, index_sig,var=sdg_names), .name_repair="universal") %>%
  mutate(across(c(1:10), as.numeric)) %>%
  mutate(SPI=case_when(
            between(SPI...6,0.05,0.1) ~   paste0(SPI...1,"*"),
            between(SPI...6,0.01,0.5) ~  paste0(SPI...1,"**"),
            between(SPI...6,0.0,0.01) ~ paste0(SPI...1,"***"),
           is.na(SPI...1) ~ "",
           TRUE ~      paste0(SPI...1,"")
            ),
         SCI=case_when(
           between(SCI...7,0.05,0.1) ~   paste0(SCI...2,"*"),
           between(SCI...7,0.01,0.5) ~  paste0(SCI...2,"**"),
           between(SCI...7,0.0,0.01) ~ paste0(SCI...2,"***"),
           is.na(SCI...2) ~ "",
           TRUE ~      paste0(SCI...2,"")
           ),
         ODIN=case_when(
           between(ODIN...8,0.05,0.1) ~   paste0(ODIN...3,"*"),
           between(ODIN...8,0.01,0.5) ~  paste0(ODIN...3,"**"),
           between(ODIN...8,0.0,0.01) ~ paste0(ODIN...3,"***"),
           is.na(ODIN...3) ~ "",
           TRUE ~      paste0(ODIN...3,"")
         ),
         ODB=case_when(
           between(ODB...9,0.05,0.1) ~   paste0(ODB...4,"*"),
           between(ODB...9,0.01,0.5) ~  paste0(ODB...4,"**"),
           between(ODB...9,0.0,0.01) ~ paste0(ODB...4,"***"),
           is.na(ODB...4) ~ "",
           TRUE ~      paste0(ODB...4,"")
         ),
         GDB=case_when(
           between(GDB...10,0.05,0.1) ~   paste0(GDB...5,"*"),
           between(GDB...10,0.01,0.5) ~  paste0(GDB...5,"**"),
           between(GDB...10,0.0,0.01) ~ paste0(GDB...5,"***"),
           is.na(GDB...5) ~ "",
           TRUE ~      paste0(GDB...5,"")
         )
    ) %>% select( var, SPI, SCI, ODIN, ODB, GDB) 

  flextable(tab) %>%
  # bg(j=2,
  #      bg=index_col[,1]) %>%
  # bg(j=3,
  #      bg=index_col[,2]) %>%
  # bg(j=4,
  #      bg=index_col[,3]) %>%
  # bg(j=5,
  #      bg=index_col[,4]) %>%
  # bg(j=6,
  #      bg=index_col[,5]) %>%
  add_footer_lines(
    'Note: * p<0.1,** p<0.05,*** p<0.01 '    
  ) %>%
  add_header_lines('Table. Correlation between Development Outcomes')
  
  
  
```
Figure. Correlations between Key SDGs and Indexes

```{r tabfig, fig.height=10, fig.width=8}
fig <- as_tibble(cbind(index_cor, index_sig,var=sdg_names), .name_repair="universal") %>%
  mutate(across(c(1:10), as.numeric)) %>%
  mutate(SPI=case_when(
            between(SPI...6,0.05,0.1) ~   paste0(SPI...1,"*"),
            between(SPI...6,0.01,0.5) ~  paste0(SPI...1,"**"),
            between(SPI...6,0.0,0.01) ~ paste0(SPI...1,"***"),
           is.na(SPI...1) ~ "",
           TRUE ~      paste0(SPI...1,"")
            ),
         SCI=case_when(
           between(SCI...7,0.05,0.1) ~   paste0(SCI...2,"*"),
           between(SCI...7,0.01,0.5) ~  paste0(SCI...2,"**"),
           between(SCI...7,0.0,0.01) ~ paste0(SCI...2,"***"),
           is.na(SCI...2) ~ "",
           TRUE ~      paste0(SCI...2,"")
           ),
         ODIN=case_when(
           between(ODIN...8,0.05,0.1) ~   paste0(ODIN...3,"*"),
           between(ODIN...8,0.01,0.5) ~  paste0(ODIN...3,"**"),
           between(ODIN...8,0.0,0.01) ~ paste0(ODIN...3,"***"),
           is.na(ODIN...3) ~ "",
           TRUE ~      paste0(ODIN...3,"")
         ),
         ODB=case_when(
           between(ODB...9,0.05,0.1) ~   paste0(ODB...4,"*"),
           between(ODB...9,0.01,0.5) ~  paste0(ODB...4,"**"),
           between(ODB...9,0.0,0.01) ~ paste0(ODB...4,"***"),
           is.na(ODB...4) ~ "",
           TRUE ~      paste0(ODB...4,"")
         ),
         GDB=case_when(
           between(GDB...10,0.05,0.1) ~   paste0(GDB...5,"*"),
           between(GDB...10,0.01,0.5) ~  paste0(GDB...5,"**"),
           between(GDB...10,0.0,0.01) ~ paste0(GDB...5,"***"),
           is.na(GDB...5) ~ "",
           TRUE ~      paste0(GDB...5,"")
         )
    )  %>%
  mutate(var=factor(var, levels=rev(var)))

ggplot(fig, aes(x=var, y=SPI...1)) +
  geom_point(aes(color="SPI"),size=4,) +
  geom_point(aes(y=SCI...2,color="SCI"),size=4) +
  geom_point(aes(y=ODIN...3,color="ODIN"),size=4) +
  geom_point(aes(y=ODB...4,color="ODB"),size=4) +
  geom_point(aes(y=GDB...5,color="GDB"),size=4) +
  scale_color_manual(
    values=c(
      "SPI"="#264653",
      "SCI"="#2a9d8f",
      "ODIN" = "#e9c46a",
      "ODB" = "#f4a261",
      "GDB" = "#e76f51"
    )
    #labels=c("SPI", "SCI","ODIN","ODB","GDB")
  ) +
  # scale_shape_manual(
  #   values=c(
  #     "SPI"=15,
  #     "SCI"=19,
  #     "ODIN" =19,
  #     "ODB" =19,
  #     "GDB" =19
  #   ),
  #   labels=c("SPI", "SCI","ODIN","ODB","GDB")
  # ) +
  guides(color= guide_legend()) +  
  coord_flip() +
  scale_x_discrete(labels=scales::wrap_format(30)) +
  theme_spi() +
  theme(axis.text.y=element_text(size=11),
        legend.text = element_text(size=11))







```

Figure. Absolute Value of Correlation between Key SDGs and Indexes
```{r, fig.height=10, fig.width=8}
ggplot(fig, aes(x=var, y=abs(SPI...1))) +
  geom_point(aes(color="SPI"), size=4) +
  geom_point(aes(y=abs(SCI...2),color="SCI"), size=4) +
  geom_point(aes(y=abs(ODIN...3),color="ODIN"), size=4) +
  geom_point(aes(y=abs(ODB...4),color="ODB"), size=4) +
  geom_point(aes(y=abs(GDB...5),color="GDB"), size=4) +
  coord_flip() +
  scale_color_manual(
    values=c(
      "SPI"="#264653",
      "SCI"="#2a9d8f",
      "ODIN" = "#e9c46a",
      "ODB" = "#f4a261",
      "GDB" = "#e76f51"
    )
  ) +
  scale_x_discrete(labels=scales::wrap_format(30)) +
  theme_spi() +
  theme(axis.text.y=element_text(size=11),
        legend.text = element_text(size=11))
```



Correlations with 5 Development Outcomes

```{r corr3}


#get correlations with pvalues
index_cor_full <- comparison_df %>%
  select(SPI.INDEX, SCI, ODIN_score, odb, gdb,c('SI.POV.DDAY', 'SI.POV.GINI','GE.EST','NY.GDP.PCAP.KD','HD.HCI.OVRL')) %>%
  rename(
    SPI=SPI.INDEX,
    SCI=SCI, 
    ODIN=ODIN_score, 
    ODB=odb, 
    GDB=gdb
  ) %>%
  as.matrix() %>%
  rcorr()

#get just pearon correlation
index_cor <- index_cor_full$r
index_cor <- index_cor[1:5,6:10]


#round
index_cor <- round(index_cor,2)

#color
index_col <- index_cor
index_col[abs(index_cor)>=0.5] <- "#fcca46"
index_col[abs(index_cor)>=0.65] <- "#a1c181"
index_col[abs(index_cor)>=0.8] <- "#619b8a"
index_col[abs(index_cor)<0.5] <- "white"

#get statistical significance
index_sig <- index_cor_full$P
index_sig <- index_sig[1:5,6:10]


as_tibble(cbind(index_cor, index_sig,var=c("SPI", "SCI","ODIN", "ODB", "GDB")), .name_repair="universal") %>%
  mutate(across(c(1:10), as.numeric)) %>%
  mutate(Poverty=case_when(
            between(SI.POV.DDAY...6,0.05,0.1) ~   paste0(SI.POV.DDAY...1,"*"),
            between(SI.POV.DDAY...6,0.01,0.5) ~  paste0(SI.POV.DDAY...1,"**"),
            between(SI.POV.DDAY...6,0.0,0.01) ~ paste0(SI.POV.DDAY...1,"***"),
            TRUE ~      paste0(SI.POV.DDAY...1,"")
            ),
         Gini=case_when(
           between(SI.POV.GINI...7,0.05,0.1) ~  paste0(SI.POV.GINI...2,"*"),
           between(SI.POV.GINI...7,0.01,0.5) ~  paste0(SI.POV.GINI...2,"**"),
           between(SI.POV.GINI...7,0.0,0.01) ~ paste0(SI.POV.GINI...2,"***"),
           TRUE ~      paste0(SI.POV.GINI...2,"")
         ),
         `Government Effectiveness`=case_when(
           between(GE.EST...8,0.05,0.1) ~   paste0(GE.EST...3,"*"),
           between(GE.EST...8,0.01,0.5) ~  paste0(GE.EST...3,"**"),
           between(GE.EST...8,0.0,0.01) ~ paste0(GE.EST...3,"***"),
           TRUE ~      paste0(GE.EST...3,"")
         ),
         `GDP per capita`=case_when(
           between(NY.GDP.PCAP.KD...9,0.05,0.1) ~   paste0(NY.GDP.PCAP.KD...4,"*"),
           between(NY.GDP.PCAP.KD...9,0.01,0.5) ~  paste0(NY.GDP.PCAP.KD...4,"**"),
           between(NY.GDP.PCAP.KD...9,0.0,0.01) ~ paste0(NY.GDP.PCAP.KD...4,"***"),
           TRUE ~      paste0(NY.GDP.PCAP.KD...4,"")
         ),
         HCI=case_when(
           between(HD.HCI.OVRL...10,0.05,0.1) ~   paste0(HD.HCI.OVRL...5,"*"),
           between(HD.HCI.OVRL...10,0.01,0.5) ~  paste0(HD.HCI.OVRL...5,"**"),
           between(HD.HCI.OVRL...10,0.0,0.01) ~ paste0(HD.HCI.OVRL...5,"***"),
           TRUE ~      paste0(HD.HCI.OVRL...5,"")
         )
    ) %>% select( var, `GDP per capita`, `Government Effectiveness`, HCI, Poverty, Gini) %>%
  flextable() %>%
  # bg(j=2,
  #      bg=index_col[,1]) %>%
  # bg(j=3,
  #      bg=index_col[,2]) %>%
  # bg(j=4,
  #      bg=index_col[,3]) %>%
  # bg(j=5,
  #      bg=index_col[,4]) %>%
  # bg(j=6,
  #      bg=index_col[,5]) %>%
  add_footer_lines(
    'Note: * p<0.1,** p<0.05,*** p<0.01 '    
  ) %>%
  add_header_lines('Table. Correlation between Development Outcomes')
  
  
```



# Estimating Relationship between Statistical Performance and Development Outcomes

## Log GDP per capita

```{r regdf, echo=FALSE}
options(modelsummary_factory_word = 'flextable')
custom_theme <- function(x, ...) {
    x %>% set_table_properties(layout = "autofit")
}
options("modelsummary_theme_flextable" = custom_theme)


#get some potential predictors
# predictors_df <- WDI(
#   indicator = c('NV.IND.MANF.ZS', 'NV.AGR.TOTL.ZS','SE.SEC.CMPT.LO.ZS','NE.TRD.GNFS.ZS', 'CC.EST', "GE.EST", 'PV.EST', "RQ.EST", "RL.EST", "VA.EST"),
#   start=2015,
#   end=2020,
#   extra=TRUE
#   ) %>% 
#   dplyr::arrange(iso3c,-year) %>%
#   filter(region!="Aggregates") %>%
#   rename(date=year)

predictors_df <- wbstats::wb_data(country="countries_only",
             indicator=c('NY.GDP.PCAP.KD', 'NV.IND.MANF.ZS', 'NV.AGR.TOTL.ZS','NE.TRD.GNFS.ZS', 'HD.HCI.OVRL','SE.PRM.ENRR','BN.CAB.XOKA.GD.ZS', 'CC.EST', "GE.EST", 'PV.EST', "RQ.EST", "RL.EST", "VA.EST", "BX.KLT.DINV.WD.GD.ZS", "SI.POV.DDAY", "SI.POV.GINI"),
             start_date=2010,
             end_date=2022) %>%
  mutate(date=as.numeric(date)) %>%
  arrange(iso3c, date) %>%
  group_by(iso3c) %>%
  fill(c( 'NY.GDP.PCAP.KD','NV.IND.MANF.ZS', 'NV.AGR.TOTL.ZS', 'SE.PRM.ENRR', 'HD.HCI.OVRL','NE.TRD.GNFS.ZS','BN.CAB.XOKA.GD.ZS', 'CC.EST', "GE.EST", 'PV.EST', "RQ.EST", "RL.EST", "VA.EST", "BX.KLT.DINV.WD.GD.ZS","SI.POV.DDAY", "SI.POV.GINI"), .direction="downup") %>%
  mutate(WGI.OVL=(CC.EST + GE.EST + PV.EST + RQ.EST + RL.EST + VA.EST)/6,
         lag_outcome=lag(NY.GDP.PCAP.KD),
         lag_fdi=lag(BX.KLT.DINV.WD.GD.ZS),
         lag_ge=lag(GE.EST),
         lag_poverty=lag(SI.POV.DDAY),
         lag_gini=lag(SI.POV.GINI)
         )  %>%
  ungroup()



# predictors_df <- predictors_df %>%
#   left_join(imf_dta)

SPI_2016 <- spi_index_df %>%
  filter(date>=2016) %>%
  group_by(iso3c) %>%
  fill(starts_with( 'SPI.INDEX'), .direction="downup") %>%
  ungroup() %>%
  filter(!is.na(SPI.INDEX))

countries_2016 <- unique(SPI_2016$country)

#add in some metadata about the country
reg_df <- SPI_2016 %>%
  select(country, iso3c, date, region, SPI.INDEX, SPI.INDEX.PIL1, SPI.INDEX.PIL2, SPI.INDEX.PIL3, SPI.INDEX.PIL4, SPI.INDEX.PIL5) %>%
  left_join(predictors_df) %>%
  filter(between(date,2016,2022)) %>%
  filter(!(is.na(SPI.INDEX) | 
             is.na(NY.GDP.PCAP.KD) |
             is.na(NV.IND.MANF.ZS) |
             is.na(NV.AGR.TOTL.ZS) |
             is.na(SE.PRM.ENRR) |
             is.na(NE.TRD.GNFS.ZS) |
             is.na(CC.EST) |
             is.na(GE.EST) |
             is.na(PV.EST) |
             is.na(RQ.EST) |
             is.na(RL.EST) |
             is.na(VA.EST) )) %>%
  mutate(region_year_fe=paste(region,date,sep=" - "))

ncountry <- length(unique(reg_df$country))

#ODIN regressions
#add in some metadata about the country
odin_reg_df <- odin_df %>%
  select(iso3c, date, ODIN_score) %>%
  left_join(country_metadata) %>%
  left_join(predictors_df) %>%
  filter(between(date,2016,2022)) %>%
  filter(!(is.na(ODIN_score) | 
             is.na(NY.GDP.PCAP.KD) |
             is.na(NV.IND.MANF.ZS) |
             is.na(NV.AGR.TOTL.ZS) |
             is.na(SE.PRM.ENRR) |
             is.na(NE.TRD.GNFS.ZS) |
             is.na(CC.EST) |
             is.na(GE.EST) |
             is.na(PV.EST) |
             is.na(RQ.EST) |
             is.na(RL.EST) |
             is.na(VA.EST) )) %>%
  mutate(region_year_fe=paste(region,date,sep=" - "))

#ODB Regression
odb_reg_df <- bind_rows(
  (odb_df_2017 %>% mutate(date=2017)),
  (odb_df_2016 %>% mutate(date=2016, odb=odb_2016)),
  (odb_df_2015 %>% mutate(date=2015, iso3c=ISO3, odb=`ODB-Score-Scaled`)),
  (odb_df_2014 %>% mutate(date=2014, iso3c=ISO3, odb=`ODB-Score-Scaled`)),
  (odb_df_2013 %>% mutate(date=2013, iso3c=ISO3, odb=`ODB-Score-Scaled`)),
  ) %>%
  select(iso3c, date, odb) %>%
  left_join(country_metadata) %>%
  left_join(predictors_df) %>%
  filter(between(date,2013,2022)) %>%
  filter(!(is.na(odb) | 
             is.na(NY.GDP.PCAP.KD) |
             is.na(NV.IND.MANF.ZS) |
             is.na(NV.AGR.TOTL.ZS) |
             is.na(SE.PRM.ENRR) |
             is.na(NE.TRD.GNFS.ZS) |
             is.na(CC.EST) |
             is.na(GE.EST) |
             is.na(PV.EST) |
             is.na(RQ.EST) |
             is.na(RL.EST) |
             is.na(VA.EST) )) %>%
  mutate(region_year_fe=paste(region,date,sep=" - "))

#ODB Regression
gdb_reg_df <- bind_rows(
  (gdb_df %>% mutate(date=2021))
  ) %>%
  select(iso3c, date, gdb) %>%
  left_join(country_metadata) %>%
  left_join(predictors_df) %>%
  filter(between(date,2016,2022)) %>%
  filter(!(is.na(gdb) | 
             is.na(NY.GDP.PCAP.KD) |
             is.na(NV.IND.MANF.ZS) |
             is.na(NV.AGR.TOTL.ZS) |
             is.na(SE.PRM.ENRR) |
             is.na(NE.TRD.GNFS.ZS) |
             is.na(CC.EST) |
             is.na(GE.EST) |
             is.na(PV.EST) |
             is.na(RQ.EST) |
             is.na(RL.EST) |
             is.na(VA.EST) )) %>%
  mutate(region_year_fe=paste(region,date,sep=" - "))


#use modelsumary to predict
#modelsummary output
gm <- tibble::tribble(
  ~raw,        ~clean,          ~fmt,
  "nobs",      "N",             0)






#create regression models
 models <- list(

 'Model 1' = feols(log(NY.GDP.PCAP.KD) ~  SPI.INDEX , data=reg_df, se='cluster', cluster='country') ,


 'Model 2' = feols(log(NY.GDP.PCAP.KD) ~  SPI.INDEX  + factor(date) | country, data=reg_df, se='cluster', cluster='country') ,

 'Model 3' = feols(log(NY.GDP.PCAP.KD) ~  SPI.INDEX  + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + WGI.OVL + factor(date)| country , data=reg_df, se='cluster', cluster='country'),
 
 'Model 4' = feols(log(NY.GDP.PCAP.KD) ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5 , data=reg_df, se='cluster', cluster='country') ,


 'Model 5' = feols(log(NY.GDP.PCAP.KD) ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5   + factor(date) | country, data=reg_df, se='cluster', cluster='country') ,

 'Model 6' = feols(log(NY.GDP.PCAP.KD) ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5  + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + WGI.OVL + factor(date)| country , data=reg_df, se='cluster', cluster='country')
 

 )



```


Table. Relationship between Log GDP per capita and SPI scores using data from 2016-2022.

```{r}
 modelsummary(models,
              estimate= "{estimate}{stars}",
              #vcov=list(NULL,"HC1",NULL),
              coef_map = c("SPI.INDEX"  = "Overall SPI Score",
                              "SPI.INDEX.PIL1"  = "SPI Pillar 1 Score (Data use)",
                              "SPI.INDEX.PIL2"  = "SPI Pillar 2 Score (Data services)",
                              "SPI.INDEX.PIL3"  = "SPI Pillar 3 Score (Data products)",
                              "SPI.INDEX.PIL4"  = "SPI Pillar 4 Score (Data sources)",
                              "SPI.INDEX.PIL5"  = "SPI Pillar 5 Score (Data infrastructure)",
                              "NE.TRD.GNFS.ZS" = "Trade (% of GDP)",
                              "NV.AGR.TOTL.ZS"= "Agriculture, forestry, fishing value added (% of GDP)",
                              "NV.IND.MANF.ZS"  = "Manufacturing value added (% of GDP)",
                              "SE.PRM.ENRR" = "School Enrollment, Primary (% gross)" ,
                              "WGI.OVL" = "WGI Index",
                              "factor(date)2017"="Year 2017",
                              "factor(date)2018"="Year 2018",
                              "factor(date)2019"="Year 2019",
                              "factor(date)2020"="Year 2020",
                              "factor(date)2021"="Year 2021",
                              "factor(date)2022"="Year 2022",
                              "(Intercept)" = "Constant",
                              "CC.EST" = "WGI: Control of Corruption: Estimate",
                              "GE.EST" = "WGI: Governance Effectiveness: Estimate",
                              "PV.EST" = "WGI: Political Stability and Absence of Violence/Terrorism: Estimate",
                              "RQ.EST" = "WGI: Regulatory Quality: Estimate",
                              "RL.EST" = "WGI: Rule of Law: Estimate",
                              "VA.EST" = "WGI: Voice and Accountability: Estimate"),
              notes="Note: * p<0.10, ** p<0.05, *** p<0.01. Standard errors are clustered at the country level. Data are from the World Bank's World Development Indicators (WDI) and SPI. In cases where data are missing for a particular covariate, the data are imputed forward using the nearest available value.",
              stars = c('*' = .1, '**' = .05, '***' = .01),
              fmt = fmt_statistic("estimate" = 3, "std.error" = 2),
              escape = FALSE
              )
```

```{r}

p <- plm::plm(log(NY.GDP.PCAP.KD) ~  SPI.INDEX, index=c('country', 'date'), data=reg_df, model='random') 
print(paste0("Model 2: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(log(NY.GDP.PCAP.KD) ~  SPI.INDEX + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + WGI.OVL, index=c('country', 'date'), data=reg_df, model='random') 
print(paste0("Model 3: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(log(NY.GDP.PCAP.KD) ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5, index=c('country', 'date'), data=reg_df, model='random') 
print(paste0("Model 5: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(log(NY.GDP.PCAP.KD) ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5 + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + WGI.OVL, index=c('country', 'date'), data=reg_df, model='random')
print(paste0("Model 6: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))


```
### ODIN, ODB, GDB Results

```{r}

#create regression models
 models <- list(

 'ODIN - Model 1' = feols(log(NY.GDP.PCAP.KD) ~  ODIN_score , data=odin_reg_df, se='cluster', cluster='country') ,


 'ODIN - Model 2' = feols(log(NY.GDP.PCAP.KD) ~  ODIN_score  + factor(date) | country, data=odin_reg_df, se='cluster', cluster='country') ,

 'ODIN - Model 3' = feols(log(NY.GDP.PCAP.KD) ~  ODIN_score  + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + WGI.OVL + factor(date)| country , data=odin_reg_df, se='cluster', cluster='country'),

  'ODB - Model 1' = feols(log(NY.GDP.PCAP.KD) ~  odb , data=odb_reg_df, se='cluster', cluster='country') ,


 'ODB - Model 2' = feols(log(NY.GDP.PCAP.KD) ~  odb  + factor(date) | country, data=odb_reg_df, se='cluster', cluster='country') ,

 'ODB - Model 3' = feols(log(NY.GDP.PCAP.KD) ~  odb  + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + WGI.OVL + factor(date)| country , data=odb_reg_df, se='cluster', cluster='country'),
 
  'GDB - Model 1' = feols(log(NY.GDP.PCAP.KD) ~  gdb , data=gdb_reg_df, se='cluster', cluster='country') 
)

 modelsummary(models,
              estimate= "{estimate}{stars}",
              #vcov=list(NULL,"HC1",NULL),
              coef_map = c("SPI.INDEX"  = "Overall SPI Score",
                              "SPI.INDEX.PIL1"  = "SPI Pillar 1 Score (Data use)",
                              "SPI.INDEX.PIL2"  = "SPI Pillar 2 Score (Data services)",
                              "SPI.INDEX.PIL3"  = "SPI Pillar 3 Score (Data products)",
                              "SPI.INDEX.PIL4"  = "SPI Pillar 4 Score (Data sources)",
                              "SPI.INDEX.PIL5"  = "SPI Pillar 5 Score (Data infrastructure)",
                           "ODIN_score" = "ODIN Score",
                           "odb" = "Open Data Barometer Score",
                           "gdb" = "Global Data Barometer Score",
                              "NE.TRD.GNFS.ZS" = "Trade (% of GDP)",
                              "NV.AGR.TOTL.ZS"= "Agriculture, forestry, fishing value added (% of GDP)",
                              "NV.IND.MANF.ZS"  = "Manufacturing value added (% of GDP)",
                              "SE.PRM.ENRR" = "School Enrollment, Primary (% gross)" ,
                              "WGI.OVL" = "WGI Index",
                              "factor(date)2013"="Year 2013",
                              "factor(date)2014"="Year 2014",
                              "factor(date)2015"="Year 2015",
                              "factor(date)2016"="Year 2016",
                              "factor(date)2017"="Year 2017",
                              "factor(date)2018"="Year 2018",
                              "factor(date)2019"="Year 2019",
                              "factor(date)2020"="Year 2020",
                              "factor(date)2021"="Year 2021",
                              "factor(date)2022"="Year 2022",
                              "(Intercept)" = "Constant",
                              "CC.EST" = "WGI: Control of Corruption: Estimate",
                              "GE.EST" = "WGI: Governance Effectiveness: Estimate",
                              "PV.EST" = "WGI: Political Stability and Absence of Violence/Terrorism: Estimate",
                              "RQ.EST" = "WGI: Regulatory Quality: Estimate",
                              "RL.EST" = "WGI: Rule of Law: Estimate",
                              "VA.EST" = "WGI: Voice and Accountability: Estimate"),
              notes=" Note: * p<0.10, ** p<0.05, *** p<0.01. Standard errors are clustered at the country level. Data from the World Bank's World Development Indicators (WDI), Open Data Watch (ODIN), Global Data Barometer (GDB), and Open Data Barometer (ODB). In cases where data are missing for a particular covariate, the data are imputed forward using the nearest available value. Estimates with country fixed effects not available for the Global Data Barometer, because the indicator contains on ly one time period.",
              stars = c('*' = .1, '**' = .05, '***' = .01),
              fmt = fmt_statistic("estimate" = 3, "std.error" = 2),
              escape = FALSE
              )
```

```{r}
p <- plm::plm(log(NY.GDP.PCAP.KD) ~  ODIN_score, index=c('country', 'date'), data=odin_reg_df, model='random') 
print(paste0("ODIN Model 2: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(log(NY.GDP.PCAP.KD) ~  ODIN_score + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + WGI.OVL, index=c('country', 'date'), data=odin_reg_df, model='random') 
print(paste0("ODIN Model 3: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(log(NY.GDP.PCAP.KD) ~  odb, index=c('country', 'date'), data=odb_reg_df, model='random') 
print(paste0("ODB Model 2: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(log(NY.GDP.PCAP.KD) ~  odb + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + WGI.OVL, index=c('country', 'date'), data=odb_reg_df, model='random') 
print(paste0("ODB Model 3: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))
```
### Test for significance between models

```{r}
#test differences between models
#step 1 combine data
combined_test_data <- bind_rows(reg_df %>% mutate(model='SPI', index=SPI.INDEX) ,
                           odin_reg_df %>% mutate(model='ODIN', index=ODIN_score),
                           odb_reg_df %>% mutate(model='ODB', index=odb),
                           gdb_reg_df %>% mutate(model='GDB', index=gdb)
                           ) %>%
  mutate(model=factor(model, levels=c('SPI','ODIN','ODB','GDB')))


#model1
test_models <- list(
'Model 1' = feols(log(NY.GDP.PCAP.KD) ~  index*model + model, data=combined_test_data, se='cluster', cluster='country'),

#model2
 'Model 2' = feols(log(NY.GDP.PCAP.KD) ~  index*model  + factor(date)*model + factor(country)*model + model, data=combined_test_data, se='cluster', cluster='country'),


#model3
'Model 3' =  feols(log(NY.GDP.PCAP.KD) ~  index*model  + NE.TRD.GNFS.ZS*model + NV.IND.MANF.ZS*model + NV.AGR.TOTL.ZS*model +  SE.PRM.ENRR*model   + WGI.OVL*model + factor(date)*model + factor(country)*model + model , data=combined_test_data, se='cluster', cluster='country')
)

modelsummary(test_models,
             estimate= "{estimate}{stars}",
              #vcov=list(NULL,"HC1",NULL),
              coef_map = c('index'='SPI',
                           'index:modelODIN' = 'SPI-ODIN',
                           'index:modelODB' = 'SPI-ODB',
                           'index:modelGDB' = 'SPI-GDB'),
              notes=" Note: * p<0.10, ** p<0.05, *** p<0.01. Standard errors are clustered at the country level.",
              stars = c('*' = .1, '**' = .05, '***' = .01),
              fmt = fmt_statistic("estimate" = 3, "std.error" = 2),
              escape = FALSE
              )

```


## Government Effectiveness

Table. Relationship between Worldwide Governance Index and SPI scores using data from 2016-2022.

```{r}

#create regression models
 GE_models <- list(

 'Model 1' = feols(WGI.OVL ~  SPI.INDEX , data=reg_df, se='cluster', cluster='country') ,


 'Model 2' = feols(WGI.OVL ~  SPI.INDEX  + factor(date) | country, data=reg_df, se='cluster', cluster='country') ,

 'Model 3' = feols(WGI.OVL ~  SPI.INDEX  + log(NY.GDP.PCAP.KD) + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR    + factor(date)| country , data=reg_df, se='cluster', cluster='country'),
 
 'Model 4' = feols(WGI.OVL ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5 , data=reg_df, se='cluster', cluster='country') ,


 'Model 5' = feols(WGI.OVL ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5    + factor(date) | country, data=reg_df, se='cluster', cluster='country') ,

 'Model 6' = feols(WGI.OVL ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5  +   log(NY.GDP.PCAP.KD) + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR    + factor(date)| country , data=reg_df, se='cluster', cluster='country')
 

 )
 modelsummary(GE_models,
              estimate= "{estimate}{stars}",
              #vcov=list(NULL,"HC1",NULL),
              coef_map = c("SPI.INDEX"  = "Overall SPI Score",
                              "SPI.INDEX.PIL1"  = "SPI Pillar 1 Score (Data use)",
                              "SPI.INDEX.PIL2"  = "SPI Pillar 2 Score (Data services)",
                              "SPI.INDEX.PIL3"  = "SPI Pillar 3 Score (Data products)",
                              "SPI.INDEX.PIL4"  = "SPI Pillar 4 Score (Data sources)",
                              "SPI.INDEX.PIL5"  = "SPI Pillar 5 Score (Data infrastructure)",
                              "log(NY.GDP.PCAP.KD)" = "Log GDP per capita (constant 2015 US$)",
                              "NE.TRD.GNFS.ZS" = "Trade (% of GDP)",
                              "NV.AGR.TOTL.ZS"= "Agriculture, forestry, fishing value added (% of GDP)",
                              "NV.IND.MANF.ZS"  = "Manufacturing value added (% of GDP)",
                              "SE.PRM.ENRR" = "School Enrollment, Primary (% gross)" ,
                              "WGI.OVL" = "WGI Index",
                              "factor(date)2017"="Year 2017",
                              "factor(date)2018"="Year 2018",
                              "factor(date)2019"="Year 2019",
                              "factor(date)2020"="Year 2020",
                              "factor(date)2021"="Year 2021",
                              "factor(date)2022"="Year 2022",
                              "(Intercept)" = "Constant",
                              "CC.EST" = "WGI: Control of Corruption: Estimate",
                              "GE.EST" = "WGI: Governance Effectiveness: Estimate",
                              "PV.EST" = "WGI: Political Stability and Absence of Violence/Terrorism: Estimate",
                              "RQ.EST" = "WGI: Regulatory Quality: Estimate",
                              "RL.EST" = "WGI: Rule of Law: Estimate",
                              "VA.EST" = "WGI: Voice and Accountability: Estimate"),
              notes="Note: * p<0.10, ** p<0.05, *** p<0.01. Standard errors are clustered at the country level. Data are from the World Bank's World Development Indicators (WDI) and SPI. In cases where data are missing for a particular covariate, the data are imputed forward using the nearest available value.",
              stars = c('*' = .1, '**' = .05, '***' = .01),
              fmt = fmt_statistic("estimate" = 3, "std.error" = 2),
              escape = FALSE
              )
```


```{r}
p <- plm::plm(WGI.OVL ~  SPI.INDEX, index=c('country', 'date'), data=reg_df, model='random') 
print(paste0("Model 2: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(WGI.OVL~  SPI.INDEX + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + log(NY.GDP.PCAP.KD), index=c('country', 'date'), data=reg_df, model='random') 
print(paste0("Model 3: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(WGI.OVL ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5, index=c('country', 'date'), data=reg_df, model='random') 
print(paste0("Model 5: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(WGI.OVL ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5 + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + log(NY.GDP.PCAP.KD), index=c('country', 'date'), data=reg_df, model='random')
print(paste0("Model 6: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))


```

### ODIN, ODB, GDB Results

```{r}

#create regression models
 models <- list(

 'ODIN - Model 1' = feols(WGI.OVL ~  ODIN_score , data=odin_reg_df, se='cluster', cluster='country') ,


 'ODIN - Model 2' = feols(WGI.OVL ~  ODIN_score  + factor(date) | country, data=odin_reg_df, se='cluster', cluster='country') ,

 'ODIN - Model 3' = feols(WGI.OVL ~  ODIN_score  + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + log(NY.GDP.PCAP.KD) + factor(date)| country , data=odin_reg_df, se='cluster', cluster='country'),

  'ODB - Model 1' = feols(WGI.OVL ~  odb , data=odb_reg_df, se='cluster', cluster='country') ,


 'ODB - Model 2' = feols(WGI.OVL ~  odb  + factor(date) | country, data=odb_reg_df, se='cluster', cluster='country') ,

 'ODB - Model 3' = feols(WGI.OVL ~  odb  + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + log(NY.GDP.PCAP.KD) + factor(date)| country , data=odb_reg_df, se='cluster', cluster='country'),
 
  'GDB - Model 1' = feols(WGI.OVL ~  gdb , data=gdb_reg_df, se='cluster', cluster='country') 
)

 modelsummary(models,
              estimate= "{estimate}{stars}",
              #vcov=list(NULL,"HC1",NULL),
              coef_map = c("SPI.INDEX"  = "Overall SPI Score",
                              "SPI.INDEX.PIL1"  = "SPI Pillar 1 Score (Data use)",
                              "SPI.INDEX.PIL2"  = "SPI Pillar 2 Score (Data services)",
                              "SPI.INDEX.PIL3"  = "SPI Pillar 3 Score (Data products)",
                              "SPI.INDEX.PIL4"  = "SPI Pillar 4 Score (Data sources)",
                              "SPI.INDEX.PIL5"  = "SPI Pillar 5 Score (Data infrastructure)",
                           "ODIN_score" = "ODIN Score",
                           "odb" = "Open Data Barometer Score",
                           "gdb" = "Global Data Barometer Score",
                              "NE.TRD.GNFS.ZS" = "Trade (% of GDP)",
                              "NV.AGR.TOTL.ZS"= "Agriculture, forestry, fishing value added (% of GDP)",
                              "NV.IND.MANF.ZS"  = "Manufacturing value added (% of GDP)",
                              "SE.PRM.ENRR" = "School Enrollment, Primary (% gross)" ,
                              "WGI.OVL" = "WGI Index",
                              "factor(date)2013"="Year 2013",
                              "factor(date)2014"="Year 2014",
                              "factor(date)2015"="Year 2015",
                              "factor(date)2016"="Year 2016",
                              "factor(date)2017"="Year 2017",
                              "factor(date)2018"="Year 2018",
                              "factor(date)2019"="Year 2019",
                              "factor(date)2020"="Year 2020",
                              "factor(date)2021"="Year 2021",
                              "factor(date)2022"="Year 2022",
                              "(Intercept)" = "Constant",
                              "CC.EST" = "WGI: Control of Corruption: Estimate",
                              "GE.EST" = "WGI: Governance Effectiveness: Estimate",
                              "PV.EST" = "WGI: Political Stability and Absence of Violence/Terrorism: Estimate",
                              "RQ.EST" = "WGI: Regulatory Quality: Estimate",
                              "RL.EST" = "WGI: Rule of Law: Estimate",
                              "VA.EST" = "WGI: Voice and Accountability: Estimate"),
              notes=" Note: * p<0.10, ** p<0.05, *** p<0.01. Standard errors are clustered at the country level. Data from the World Bank's World Development Indicators (WDI), Open Data Watch (ODIN), Global Data Barometer (GDB), and Open Data Barometer (ODB). In cases where data are missing for a particular covariate, the data are imputed forward using the nearest available value. Estimates with country fixed effects not available for the Global Data Barometer, because the indicator contains on ly one time period.",
              stars = c('*' = .1, '**' = .05, '***' = .01),
              fmt = fmt_statistic("estimate" = 3, "std.error" = 2),
              escape = FALSE
              )
```

```{r}
p <- plm::plm(WGI.OVL ~  ODIN_score, index=c('country', 'date'), data=odin_reg_df, model='random') 
print(paste0("ODIN Model 2: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(WGI.OVL ~  ODIN_score + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + log(NY.GDP.PCAP.KD), index=c('country', 'date'), data=odin_reg_df, model='random') 
print(paste0("ODIN Model 3: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(WGI.OVL ~  odb, index=c('country', 'date'), data=odb_reg_df, model='random') 
print(paste0("ODB Model 2: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))

p <- plm::plm(WGI.OVL ~  odb + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR   + log(NY.GDP.PCAP.KD), index=c('country', 'date'), data=odb_reg_df, model='random') 
print(paste0("ODB Model 3: sigma_e=",round(sqrt(p$ercomp$sigma2[1]),2), ". sigma_u=",round(sqrt(p$ercomp$sigma2[2]),2)))
```

### Test for significance between models

```{r}
#test differences between models
#stack the data and include interactions of index data.
# to test for significant differences, look for differences in the interactions
#step 1 combine data
combined_test_data <- bind_rows(reg_df %>% mutate(model='SPI', index=SPI.INDEX) ,
                           odin_reg_df %>% mutate(model='ODIN', index=ODIN_score),
                           odb_reg_df %>% mutate(model='ODB', index=odb),
                           gdb_reg_df %>% mutate(model='GDB', index=gdb)
                           ) %>%
  mutate(model=factor(model, levels=c('SPI','ODIN','ODB','GDB')))


#model1
test_models <- list(
'Model 1' = feols(WGI.OVL ~  index*model + model , data=combined_test_data, se='cluster', cluster='country'),

#model2
 'Model 2' = feols(WGI.OVL ~  index*model  + factor(date)*model + factor(country)*model + model, data=combined_test_data, se='cluster', cluster='country'),


#model3
'Model 3' =  feols(WGI.OVL ~  index*model  + NE.TRD.GNFS.ZS*model + NV.IND.MANF.ZS*model + NV.AGR.TOTL.ZS*model +  SE.PRM.ENRR*model   + log(NY.GDP.PCAP.KD)*model + factor(date)*model + factor(country)*model + model, data=combined_test_data, se='cluster', cluster='country')
)

modelsummary(test_models,
             estimate= "{estimate}{stars}",
              #vcov=list(NULL,"HC1",NULL),
              coef_map = c('index'='SPI',
                           'index:modelODIN' = 'ODIN-SPI',
                           'index:modelODB' = 'ODB-SPI',
                           'index:modelGDB' = 'GDB-SPI'),
              notes=" Note: * p<0.10, ** p<0.05, *** p<0.01. Standard errors are clustered at the country level.",
              stars = c('*' = .1, '**' = .05, '***' = .01),
              fmt = fmt_statistic("estimate" = 3, "std.error" = 2),
              escape = FALSE
              )

```

## Virtuous Data Cycle

![](SPI_cycle.png)

## The Dimensions and PIllars the Construct the New SPI

![](SPI_dashboard.png)

## SPI Overall Scores by Quintile in 2022

![](plots/map-1.png)



## SPI Overall Scores by Income Group in 2022


```{r incomecharts, echo=FALSE, message=FALSE, warning=FALSE}
spi_income_aggregates('SPI','SPI.INDEX','Statistical Performance Indicators -  Overall Scores')
```

```{r incomecharts2, echo=FALSE, message=FALSE, warning=FALSE}
income_charts('SPI','SPI.INDEX','Statistical Performance Indicators -  Overall Scores')
```

## SPI Overall Scores by Lending Type in 2022

```{r lendingcharts, echo=FALSE, message=FALSE, warning=FALSE}
lending_chart_aggregate('SPI','SPI.INDEX','Statistical Performance Indicators -  Overall Scores')
```

```{r lendingcharts2, echo=FALSE, message=FALSE, warning=FALSE}
lending_charts('SPI','SPI.INDEX','Statistical Performance Indicators -  Overall Scores')
```
## SPI Overall Scores by Region

![](plots/spiregcharts-1.png)


![](plots/spicountrycharts-1.png)

## SPI Overall Scores by FCS Status in 2022

```{r fcscharts, echo=FALSE, message=FALSE, warning=FALSE}
fcs_chart_aggregate('SPI','SPI.INDEX','Statistical Performance Indicators -  Overall Scores')
```

```{r fcscharts2, echo=FALSE, message=FALSE, warning=FALSE}
fcs_charts('SPI','SPI.INDEX','Statistical Performance Indicators -  Overall Scores')
```

## Correlation between the SPI Pillars in 2022

![](plots/dimcorr-1.png)


## Correlation of SPI with Income and Human Capital Levels

![](plots/gdpplot-1.png)

## Correlation of SPI with Government Effectiveness

![](plots/geplot-1.png)

## Correlation of SPI with Poverty Headcount Ratio & Gini Index


```{r pov_gini1}
#poverty
pov_df <- wbstats::wb_data(country="countries_only", 
              indicator='SI.POV.DDAY',
              start_date=2010,
              end_date=2022,
              mrv=10,
              gapfill=TRUE,
              return_wide = F) %>%
  left_join(select(spi_index_df,iso3c,date, region,starts_with('SPI.INDEX'))) #merge on SPI Index data
#get the correlation for 2022
pov_df_2022 <- pov_df %>%
  filter(date==2021) 
eq <- lm_robust(SPI.INDEX ~ value, data=pov_df_2022, se_type='HC2')
coef <- coef(eq)
std_err <- sqrt(diag(vcov(eq)))
r_2<- summary(eq)$r.squared
eq_txt <- sprintf("y = %.3f + %.3f x, R^2 = %.3f \n     (%.3f)   (%.3f)", coef[1], coef[2], r_2[1], std_err[1], std_err[2])
 # ggplot(data=pov_df_2022, aes(x=value, y=SPI.INDEX)) +
 #  facet_wrap(~indicator) +
 #  geom_text(aes(label=iso3c)) +
 #  geom_smooth(method='lm') +
 #  theme_spi() +
 #  #scale_x_continuous(trans = scales::log2_trans()) +
 #  ylab('SPI Overall Score') +
 #  xlab('Poverty Headcount Ratio at $1.90 a day') +
 #  stat_poly_eq(aes(label  = paste(stat(eq.label),
 #                                stat(rr.label), sep = "*\", \"*")), 
 #                     color='blue',
 #                     label.x.npc = "left", label.y.npc = 0.1,
 #                     formula = 'y~x', parse = TRUE, size = 4) +
 #    stat_fit_tidy(method = "lm",
 #                color='blue',
 #                label.x = "right",
 #                method.args = list(formula = y ~ x),
 #                mapping = aes(label = sprintf("Slope = %.3g,\n p-value = %.3g",
 #                                              stat(x_estimate),
 #                                              stat(x_p.value)))) +
 #    theme(legend.position = 'bottom')
pov_spi <- ggplot(data=pov_df_2022, aes(x=value, y=SPI.INDEX)) +
  facet_wrap(~indicator) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('SPI Overall Score') +
  xlab('Poverty Headcount Ratio at $1.90 a day') +
  geom_richtext(
    aes(x = 20, y = 5,label = eq_plot_txt(pov_df_2022, SPI.INDEX, value), hjust=0.2)
  ) +
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2022), hjust = 0) +
  theme(legend.position = 'bottom'
        )
#gini
gini_df <- wbstats::wb_data(
  indicator='SI.POV.GINI',
  start_date=2010,
  end_date=2022,
  mrv=10,
  gapfill=TRUE,
  return_wide = F
    ) %>%
  left_join(select(spi_index_df,iso3c,date, region,starts_with('SPI.INDEX'))) #merge on SPI Index data
#get the correlation for 2022
gini_df_2022 <- gini_df %>%
  filter(date==2021) 
  # gini_spi <- ggplot(data=gini_df_2022, aes(x=value, y=SPI.INDEX)) +
  # facet_wrap(~indicator) +
  # geom_text(aes(label=iso3c)) +
  # geom_smooth(method='lm') +
  # theme_spi() +
  # ylab('SPI Overall Score') +
  # xlab('Gini Index') +
  # theme(legend.position = 'bottom') +
  # stat_poly_eq(aes(label = paste(stat(eq.label),
  #                               stat(rr.label), sep = "*\", \"*")), 
  #                    color='blue',
  #                    label.x.npc = "right", label.y.npc = 0.1,
  #                    formula = 'y~x', parse = TRUE, size = 4) +
  #     stat_fit_tidy(method = "lm",
  #               label.x = "right",
  #               color='blue',
  #               method.args = list(formula = y ~ x),
  #               mapping = aes(label = sprintf("Slope = %.3g,\n p-value = %.3g",
  #                                             stat(x_estimate),
  #                                             stat(x_p.value))))
  
gini_spi <- ggplot(data=gini_df_2022, aes(x=value, y=SPI.INDEX)) +
  facet_wrap(~indicator) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('SPI Overall Score') +
  xlab('Gini Index')  +
  geom_richtext(
    aes(x = 40, y = 5,label = eq_plot_txt(gini_df_2022, SPI.INDEX, value), hjust=0.2)
  ) +
    theme(legend.position = 'bottom')
```


```{r pov_giniplot1}
### Scatterplot log GDP SPI
pov_spi + gini_spi   +
  plot_annotation(
    #title='Plot of SPI overall score on Poverty Ratio and Gini Index',
    caption='Source: All indicators come from the World Bank. SI.POV.DDAY & SI.POV.GINI.'
    )
  
```

## SPI Decomposition

```{r zipper, fig.height=12}
 # create dataframe by income
      df_aggregated <- spi_index_df %>%
        filter(date==2022) %>%
        select(country,income, starts_with('SPI.INDEX')) %>%
        ungroup() %>%
        filter(!is.na(SPI.INDEX)) %>%
        group_by(income) %>%
        mutate(rank=max(SPI.INDEX)) %>%
        arrange(SPI.INDEX)  %>%
        mutate(rank = rank(rank, ties.method = 'first')) %>%
        arrange(rank) %>%
        mutate(Country=factor(rank,  levels=rank, labels=country)) %>%
        mutate(across(starts_with("SPI.INDEX"), round,1))
      
      
      #plot by Pillar
      colors <- c("SPI Overall Score" = "#390099", "SPI Dim 1 - Data Use" = "#9b5de5", "SPI Dim 2 - Data Services" = "#f15bb5", "SPI Dim 3 - Data Products" = "#fee440", "SPI Dim 4 - Data Sources" = "#00bbf9", "SPI Dim 5 - Data Infrastructure" = "#00f5d4" )
      
      zipper_plt<-ggplot(df_aggregated, aes(x=Country, y=SPI.INDEX)) +
        facet_wrap(~income,scales = 'free_y') +
        geom_segment( aes(x=Country, xend=Country, y=0, yend=100), color="grey", size=1, alpha=0.1) +
        geom_point(aes(color="SPI Overall Score"),size=2,) +
        geom_point( aes(y=SPI.INDEX.PIL1, color="SPI Dim 1 - Data Use"),size=2,) +
        geom_point( aes(y=SPI.INDEX.PIL2, color="SPI Dim 2 - Data Services"), size=2,) +
        geom_point( aes(y=SPI.INDEX.PIL3, color="SPI Dim 3 - Data Products"), size=2,) +
        geom_point( aes(y=SPI.INDEX.PIL4, color="SPI Dim 4 - Data Sources"), size=2,) +
        geom_point( aes(y=SPI.INDEX.PIL5, color="SPI Dim 5 - Data Infrastructure"), size=2,) +
        #geom_text(aes(label=food_insecure_mod_severe), nudge_y = 3) +
        coord_flip()+
        theme_spi() +
        theme(
          panel.grid.major.x = element_blank(),
          panel.grid.major.y = element_blank(),
          panel.grid.minor = element_blank(),
          panel.border = element_blank(),
          axis.ticks.x = element_blank()
        ) +
        expand_limits(y=c(0,100)) +
        labs(
          x="",
          y="Statistical Performance Indicator",
          color="Legend"
        ) +
        #ggtitle(str_wrap("Decomposition of Statistical Performance Indicator Scores by Pillar", 120)) + 
        # scale_x_continuous(
        #   breaks = df_aggregated$rank, # specify tick breaks using rank column
        #   labels = df_aggregated$country # specify tick labels using x column
        # ) +
        scale_color_manual(values = colors,
                           breaks=c("SPI Overall Score", "SPI Dim 1 - Data Use", "SPI Dim 2 - Data Services", "SPI Dim 3 - Data Products", "SPI Dim 4 - Data Sources", "SPI Dim 5 - Data Infrastructure"),
                           labels=c("SPI Overall Score", "SPI Dim 1 - Data Use", "SPI Dim 2 - Data Services", "SPI Dim 3 - Data Products", "SPI Dim 4 - Data Sources", "SPI Dim 5 - Data Infrastructure"))
      zipper_plt
```

```{r decompstacked, echo=FALSE}
  decomp_stacked_df <- SPI %>%
    filter(date==2022) %>%
    select(country, income, iso3c, date, starts_with('SPI.INDEX')) %>%
    filter(!is.na(SPI.INDEX)) 
    
  
  #summarise into decile bins
  decomp_stacked_df <- decomp_stacked_df %>%
    group_by(income) %>%
    summarise(across(starts_with('SPI.INDEX'), mean, na.rm=T)) %>%
    pivot_longer(
      cols=c('SPI.INDEX.PIL1', 'SPI.INDEX.PIL2', 'SPI.INDEX.PIL3', 'SPI.INDEX.PIL4', 'SPI.INDEX.PIL5'),
      values_to='level',
      names_to='Pillar'
    ) %>%
    mutate(Pillar=case_when(
      Pillar=="SPI.INDEX.PIL1" ~ "Pillar 1: Data Use",
      Pillar=="SPI.INDEX.PIL2" ~ "Pillar 2: Data Services",
      Pillar=="SPI.INDEX.PIL3" ~ "Pillar 3: Data Products",
      Pillar=="SPI.INDEX.PIL4" ~ "Pillar 4: Data Sources",
      Pillar=="SPI.INDEX.PIL5" ~ "Pillar 5: Data Infrastructure"
    )) %>%
    group_by(income) %>%
    mutate(level=level/5,
           total=sum(level)) #divide by 5 so that Pillar scores sum to overall score.  This puts equal weight on each Pillar in the sum
  
```

```{r decompstackedplt, echo=FALSE, dpi=250, message=FALSE, warning=FALSE, fig.height=8, fig.width=12}
    name <- 'SPI Overall Score'
    income <- c("Low income", "Lower middle income","Upper middle income","High income")
#absolute graph
  ggplot(decomp_stacked_df, aes(x=income, y=level, fill=Pillar, label=paste0(round(level,1)))) +
    geom_bar(stat = "identity", position='stack') +
    geom_text(size = 4, position = position_stack(vjust = 0.5)) +
    geom_text(aes(y=total,label=paste0('Total = ' ,round(total,1))), size=4, nudge_y=7 ) +
    scale_x_discrete() +
    theme_spi() +
    
    labs(
      #title='Contribution of each Pillar to SPI overall score',
      subtitle='Each pillar receives equal 1/5th weight in overall score',
      caption=paste0(name,' scale = 0 - 100 points.')
    ) +
  scale_x_discrete(limits = income) +
    coord_flip() +
  expand_limits(y=c(0,100)) +
  theme(
    axis.title.y = element_text(angle=0, vjust = 0.5),
    text = element_text(size = 12),
    title= element_text(size = 14),
    legend.position = 'bottom'
  ) +
    guides(fill=guide_legend(nrow=2,byrow=TRUE))
  
#relative graph  
  ggplot(decomp_stacked_df, aes(x=income, y=100*level/total, fill=Pillar, label=paste0(round(100*level/total,1),"%"))) +
    geom_bar(stat = "identity", position='stack') +
    geom_text(size = 4, position = position_stack(vjust = 0.5)) +
    #geom_text(aes(y=total,label=paste0('Total = ' ,round(total,1))), size=4, nudge_y=7 ) +
    scale_x_discrete() +
    theme_spi() +
    ylab('percentage') +
    labs(
      #title='Relative Contribution of each dimension to SPI overall score',
      subtitle='Each pillar receives equal 1/5th weight in overall score',
      caption=paste0(name,' scale = 0 - 100 points.')
    ) +
  scale_x_discrete(limits = income) +
    coord_flip() +
  expand_limits(y=c(0,100)) +
  theme(
    axis.title.y = element_text(angle=0, vjust = 0.5),
    text = element_text(size = 12),
    title= element_text(size = 14),
    legend.position = 'bottom'
  ) +
    guides(fill=guide_legend(nrow=2,byrow=TRUE))  
```

## Changes Over Time

```{r elephant, echo=FALSE}
growth_plot <- function(variables, name) {
  
  elephant_df <- SPI %>%
    rename(spi_data=!! variables) %>%
    select(country, iso3c, date, spi_data) %>%
    group_by(country, date) %>%
    mutate(row = row_number()) %>%
    pivot_wider(names_from=date,
                names_prefix='spi_data_',
                values_from=c('spi_data')) %>%
    ungroup() %>%
    mutate(growth=(spi_data_2022-spi_data_2016)) %>%
    filter(!(is.na(spi_data_2022) | is.na(spi_data_2016))) %>%
    mutate(spi_rank=100*rank(spi_data_2016)/length(spi_data_2016),
           spi_bins=case_when( #calculate deciles
             between(spi_rank,0,10) ~ "1st Decile",
             between(spi_rank,10,20) ~ "2nd Decile",
             between(spi_rank,20,30) ~ "3rd Decile",
             between(spi_rank,30,40) ~ "4th Decile",
             between(spi_rank,40,50) ~ "5th Decile",
             between(spi_rank,50,60) ~ "6th Decile",
             between(spi_rank,60,70) ~ "7th Decile",
             between(spi_rank,70,80) ~ "8th Decile",
             between(spi_rank,80,90) ~ "9th Decile",
             between(spi_rank,90,100) ~ "Top Decile"
           )) %>%
    arrange(spi_rank)
  
  #summarise into decile bins
  elephant_df <- elephant_df %>%
    mutate(spi_bins=factor(spi_bins, levels=unique(elephant_df$spi_bins))) %>%
    group_by(spi_bins) %>%
    summarise(growth=mean(growth))
  
  ggplot(elephant_df, aes(x=spi_bins, y=growth, label=paste0(round(growth,1),""))) +
    geom_segment(aes(xend=as.numeric(spi_bins)-0.5,x=as.numeric(spi_bins)+0.5, y=growth, yend=growth)) +
    geom_point() +
    geom_bar(aes(alpha=growth), stat = "identity", fill='#007f5f') +
    ggrepel::geom_text_repel(nudge_y=0.1, size=4,segment.alpha =  0 ) +
    scale_x_discrete() +
    theme_spi() +
    xlab(str_wrap('Decile in 2016',40)) +
    ylab(str_wrap('Change in Score (2016-22)',20)) +
    labs(
      title=str_wrap("Countries in 2nd and 3rd deciles have grown most since 2016.",70),
      subtitle=str_wrap('Change in SPI Overall Score from 2016-22 by 2016 decile group',70),
      caption=paste0(name,' scale = 0 - 100 points.')
    ) +
    expand_limits(y=c(-2,10)) +
    scale_alpha_continuous(
      range=c(0.3,1)
    ) +
  theme(
    axis.title.y = element_text(angle=0, vjust = 0.5),
    text = element_text(size = 12),
    title= element_text(size = 14),
    legend.position = 'none'
  )
}
# growth_plot('SPI.INDEX.PIL1', 'SPI Pillar 1 (Data Use) Score')
# growth_plot('SPI.INDEX.PIL2', 'SPI Pillar 2 (Data Services) Score')
# growth_plot('SPI.INDEX.PIL3', 'SPI Pillar 3 (Data Products) Score')
# growth_plot('SPI.INDEX.PIL4', 'SPI Pillar 4 (Data Sources) Score')
# growth_plot('SPI.INDEX.PIL5', 'SPI Pillar 5 (Data Infrastructure) Score')
```

```{r elplot, echo=FALSE, fig.height=8, fig.width=12 }
growth_plot('SPI.INDEX', 'SPI Overall Score')
```

```{r bottom40}
overall_bottom_40 <- SPI %>%
    rename(spi_data=SPI.INDEX) %>%
    select(country, iso3c, date, spi_data) %>%
    group_by(country, date) %>%
    mutate(row = row_number()) %>%
    pivot_wider(names_from=date,
                names_prefix='spi_data_',
                values_from=c('spi_data')) %>%
    ungroup() %>%
    mutate(growth=(spi_data_2022-spi_data_2016)) %>%
    filter(!(is.na(spi_data_2022) | is.na(spi_data_2016))) %>%
    mutate(spi_rank=100*rank(spi_data_2016)/length(spi_data_2016),
           spi_bins=case_when( #calculate deciles
             between(spi_rank,0,10) ~ "1st Decile",
             between(spi_rank,10,20) ~ "2nd Decile",
             between(spi_rank,20,30) ~ "3rd Decile",
             between(spi_rank,30,40) ~ "4th Decile",
             between(spi_rank,40,50) ~ "5th Decile",
             between(spi_rank,50,60) ~ "6th Decile",
             between(spi_rank,60,70) ~ "7th Decile",
             between(spi_rank,70,80) ~ "8th Decile",
             between(spi_rank,80,90) ~ "9th Decile",
             between(spi_rank,90,100) ~ "Top Decile"
           )) %>%
    arrange(spi_rank)
  #summarise into decile bins
  bottom_40 <- overall_bottom_40 %>%
    filter(spi_rank<=40) %>%
    ungroup() %>%
    summarise(growth=mean(growth))
    #summarise overall
  overall_growth <- overall_bottom_40 %>%
    ungroup() %>%
    summarise(growth=mean(growth))
```


```{r elephantstacked, echo=FALSE}
  elephant_stacked_df <- SPI %>%
    select(country, iso3c, date, starts_with('SPI.INDEX')) %>%
    group_by(country, date) %>%
    mutate(row = row_number()) %>%
    pivot_wider(names_from=date,
                values_from=starts_with('SPI.INDEX')) %>%
    ungroup() %>%
    mutate(overall_growth=(SPI.INDEX_2022-SPI.INDEX_2016),
           dim1_growth=(SPI.INDEX.PIL1_2022-SPI.INDEX.PIL1_2016),
           dim2_growth=(SPI.INDEX.PIL2_2022-SPI.INDEX.PIL2_2016),
           dim3_growth=(SPI.INDEX.PIL3_2022-SPI.INDEX.PIL3_2016),
           dim4_growth=(SPI.INDEX.PIL4_2022-SPI.INDEX.PIL4_2016),
           dim5_growth=(SPI.INDEX.PIL5_2022-SPI.INDEX.PIL5_2016)
           ) %>%
    filter(!(is.na(SPI.INDEX_2022) | is.na(SPI.INDEX_2016))) %>%
    mutate(spi_rank=100*rank(SPI.INDEX_2016)/length(SPI.INDEX_2016),
           spi_bins=case_when( #calculate deciles
             between(spi_rank,0,10) ~ "1st Decile",
             between(spi_rank,10,20) ~ "2nd Decile",
             between(spi_rank,20,30) ~ "3rd Decile",
             between(spi_rank,30,40) ~ "4th Decile",
             between(spi_rank,40,50) ~ "5th Decile",
             between(spi_rank,50,60) ~ "6th Decile",
             between(spi_rank,60,70) ~ "7th Decile",
             between(spi_rank,70,80) ~ "8th Decile",
             between(spi_rank,80,90) ~ "9th Decile",
             between(spi_rank,90,100) ~ "Top Decile"
           )) %>%
    arrange(spi_rank)
  
  #summarise into decile bins
  elephant_stacked_df <- elephant_stacked_df %>%
    mutate(spi_bins=factor(spi_bins, levels=unique(elephant_stacked_df$spi_bins))) %>%
    group_by(spi_bins) %>%
    summarise(
              D1=mean(dim1_growth),
              D2=mean(dim2_growth),
              D3=mean(dim3_growth),
              D4=mean(dim4_growth),
              D5=mean(dim5_growth)) %>%
    pivot_longer(
      cols=c('D1', 'D2', 'D3', 'D4', 'D5'),
      values_to='growth',
      names_to='Pillar'
    ) %>%
    mutate(Pillar=case_when(
      Pillar=="D1" ~ "Pillar 1: Data Use",
      Pillar=="D2" ~ "Pillar 2: Data Services",
      Pillar=="D3" ~ "Pillar 3: Data Products",
      Pillar=="D4" ~ "Pillar 4: Data Sources",
      Pillar=="D5" ~ "Pillar 5: Data Infrastructure"
    )) %>%
    mutate(growth=growth/5) #divide by 5 so that Pillar scores sum to overall score.  This puts equal weight on each Pillar in the sum
  
```

```{r elplotstackedplt, echo=FALSE, fig.height=8, fig.width=12}
name <- 'SPI Overall Score'
  ggplot(elephant_stacked_df, aes(x=spi_bins, y=growth, fill=Pillar, label=paste0(round(growth,1)))) +
    geom_bar(stat = "identity", position='stack') +
    geom_text(size = 4, position = position_stack(vjust = 0.5)) +
    scale_x_discrete() +
    theme_spi() +
    xlab(str_wrap('Decile in 2016',40)) +
    ylab(str_wrap('Change in Score (2016-22)',20)) +
    labs(
      #title=str_wrap("Decomposition of Changes Over Time",70),
      subtitle=str_wrap('Change in SPI Overall Score from 2016-22 by 2016 decile group',70),
      caption=paste0(name,' scale = 0 - 100 points.')
    ) +
    expand_limits(y=c(-2,10)) +
  theme(
    axis.title.y = element_text(angle=0, vjust = 0.5),
    text = element_text(size = 12),
    title= element_text(size = 14),
    legend.position = 'bottom'
  ) +
    guides(fill=guide_legend(nrow=2,byrow=TRUE))
```

# Changes over time

```{r changesfun}
changes_fun <- function(var, title, start_date, end_date) {
  
    changes_df <-  SPI %>%
        left_join(country_metadata) %>%
        select(iso3c, country, region, lending, income, date, var , population) %>%
        filter(date==start_date | date==end_date) %>%
        mutate(period=case_when(
          date==start_date ~ 'start',
          date==end_date ~ 'end'
        ))
      
      
      # Rearrange for Plot
      #set up data
      changes_df_temp <- changes_df %>%
        select(country,iso3c, period, var) %>%
        pivot_longer( #create dataset that is countryXdateXindicator
          cols = var,
          names_to = 'series',
          values_to = 'values'
        ) %>% 
        unique() %>%
        filter(!is.na(values)) %>%
        pivot_wider( #reshape to be countryxindicator with columns with data
          id_cols=c('country','iso3c','series'),
          names_from='period',
          values_from='values'
        ) %>%
        mutate(change=end-start,
               color=if_else(change>=0,'improved', 'decreased'))  %>%
        left_join(metadata) %>%
        ungroup() 
      
      #read in 2016 metadata for lending classficiations
      WDI_metadata_2016 <- read_csv(paste0(raw_dir,"/metadata/WDI_metadata_2022.csv")) %>%
        as_tibble(.name_repair='universal') %>%
        transmute(country=Table.Name,
                  lending=Lending.category,
                  region=Region,
                  income=Income.Group)
      
      df_country_time <- changes_df_temp %>%
        left_join(WDI_metadata_2016) %>% #get lending classifications for 2022
        filter(!is.na(region)) %>%
        #filter(lending %in% c('IBRD','IDA','Blend')) %>%
        group_by(lending) %>%
        arrange(-end) %>% 
        mutate(Country=factor(country, levels=unique(changes_df_temp$country))) 
      
      
p <- ggplot(df_country_time, aes(x=Country)) +
        facet_wrap(~lending,scales = 'free_y', nrow=2) +
        geom_point(aes(y=start), shape=16) +
        geom_point(aes(y=end), color='blue', shape=17) +
        geom_segment( aes(x=Country ,xend=Country, y=start, yend=end,
                          color=color)) +
        scale_color_manual(values = c('decreased' = "red", 'improved' = "green")) +
        scale_y_continuous(name='SPI Value') +
        coord_flip() +
        theme_spi() +
        labs(
          color = 'Change'
        ) +
        ylab('SPI Value') +
        labs(
          title=str_wrap(paste0('Change in ', title, ' from ',start_date,' to ', end_date,' by Lending Type'),70),
          subtitle='Lending group based on 2022 classification'
        )
      
print(p)            
}     
      
```

```{r changesplot, fig.height=12}
changes_fun('SPI.INDEX', 'SPI Overall Score', 2016, 2022)
```

```{r changesplotpov, fig.height=12}
changes_fun('SPI.D1.5.POV', 'SPI Comparable Poverty Data Indicator', 2004, 2022)
```

```{r changesplot1, fig.height=12}
changes_fun('SPI.INDEX.PIL1', 'SPI Pillar 1 (Data Use) Score', 2016, 2022)
```

```{r changesplot2, fig.height=12}
changes_fun('SPI.INDEX.PIL2', 'SPI Pillar 2 (Data Services) Score', 2016, 2022)
```

```{r changesplot3, fig.height=12}
changes_fun('SPI.INDEX.PIL3', 'SPI Pillar 3 (Data Products) Score', 2016, 2022)
```

```{r changesplotpovind, fig.height=12}
changes_fun('SPI.D3.1.POV', 'SPI Pillar 3 (Data Products) - SDG 1 Score', 2004, 2022)
```
```{r changesplot4, fig.height=12}
changes_fun('SPI.INDEX.PIL4', 'SPI Pillar 4 (Data Sources) Score', 2016, 2022)
```

```{r changesplot4house, fig.height=12}
changes_fun('SPI.D4.1.4.HOUS', 'SPI Pillar 4 - Household Survey Availability - Score', 2010, 2022)
```

```{r changesplot5, fig.height=12}
changes_fun('SPI.INDEX.PIL5', 'SPI Pillar 5 (Data Infrastructure) Score', 2016, 2022)
```
# Tables

## Country SPI overall scores

Below, we present the full list of countries by their SPI overall score in 2022.  The first column is the country name and the following columns are the overall SPI overall score, and then the sub-scores for Pillar 1,2,3,4 and 5.  

The cells in the table are color coded based on the performance of countries on our index and the sub-scores of the pillars.  Given the imprecision inherent in the calculations we recommend that the color coding provides the most detailed subdivisions of maturity. Finer distinctions are unlikely to provide meaningful differentiation between countries. 

Countries shaded in dark red are the lowest performing, countries in dark green are the highest performing.  Countries are grouped into five groups:   

* **Top 20%**:  Countries in the top 20% are classified in this group.  Shading in <span style="color:#2ec4b6">dark green</span>.    
* **4th Quantile**: Countries in the 4th quantile, or those above the 60th percentile but below the 80th percentile are in this group.  Shading in <span style="color:#acece7">light green</span>.    
* **3rd Quantile**: Countries in the 3rd quantile, or those between the 40th and 60th percentile, are classified in this group.  Shading in <span style="color:#f1dc76">yellow</span>.  
* **2nd Quantile**: Countries in the 2nd quantile, or those above the 20th percentile but below the 40th percentile, are in this group.  Shading in <span style="color:#ffbf69">light orange</span>.  
* **Bottom 20%**: Countries in the bottom 20% are classified in this group.  Shading in <span style="color:#ff9f1c">dark orange </span>.  




```{r tab1, echo=FALSE}
#colors
col_palette <- c("#2ec4b6", "#acece7", "#f1dc76",  "#ffbf69","#ff9f1c"   )
col_palette2 <- c("#2ec4b6",  "#f1dc76", "#ff9f1c" )
#make the table
index_tab <- spi_index_df %>%
  ungroup() %>%
  filter(date==2022) %>%
  arrange(-SPI.INDEX) %>%
  mutate(across(starts_with('SPI.INDEX'),~1*.),
         across(starts_with('SPI.INDEX'),round,1)) %>%
  select(country, SPI.INDEX,SPI.INDEX.PIL1,SPI.INDEX.PIL2,SPI.INDEX.PIL3,SPI.INDEX.PIL4,SPI.INDEX.PIL5) 
 #calculate the breaks for the color coding
        brks <- quantile(index_tab$SPI.INDEX, probs=c(1,2,3,4)/5,na.rm=T)
        brks <- append(0,brks)
        brks <- append(brks,100)
        brks1 <- quantile(index_tab$SPI.INDEX.PIL1, probs=c(1,2,3,4)/5,na.rm=T)
        brks1 <- append(0,brks1)
        if (max(brks1)<100) brks1 <- append(brks1,100)
        
        brks2 <- quantile(index_tab$SPI.INDEX.PIL2, probs=c(1,2,3,4)/5,na.rm=T)
        brks2 <- append(0,brks2)
        if (max(brks2)<100) brks2 <- append(brks2,100)
        
        brks3 <- quantile(index_tab$SPI.INDEX.PIL3, probs=c(1,2,3,4)/5,na.rm=T)
        brks3 <- append(0,brks3)
        if (max(brks3)<100) brks3 <- append(brks3,100)
        
        brks4 <- quantile(index_tab$SPI.INDEX.PIL4, probs=c(1,2,3,4)/5,na.rm=T)
        brks4 <- append(0,brks4)
        if (max(brks4)<100) brks4 <- append(brks4,100)
        
        brks5 <- quantile(index_tab$SPI.INDEX.PIL5, probs=c(1,2,3,4)/5,na.rm=T)
        brks5 <- append(0,brks5)
        if (max(brks5)<100) brks5 <- append(brks5,100)
        
      #make nice looking
      index_tab <- index_tab %>%
        flextable() %>%
        add_header_lines('SPI overall score in 2022 and Pillar Scores.') %>%
        set_header_labels(values=list(
                             country="Country",
                             SPI.INDEX="SPI overall score",
                             SPI.INDEX.PIL1="Pil 1: Data Use",
                             SPI.INDEX.PIL2="Pil 2: Data Services",
                             SPI.INDEX.PIL3="Pil 3: Data Products ",
                             SPI.INDEX.PIL4="Pil 4: Data Sources",
                             SPI.INDEX.PIL5="Pil 5: Data Infrastructure"
                                         )) %>%
          bg(j = c('SPI.INDEX'),
             bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks, reverse=TRUE)) %>%
          bg(j = c('SPI.INDEX.PIL1'),
             bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks1, reverse=TRUE)) %>%
          bg(j = c('SPI.INDEX.PIL2'),
             bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks2, reverse=TRUE)) %>%
          bg(j = c('SPI.INDEX.PIL3'),
             bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks3, reverse=TRUE)) %>%
          bg(j = c('SPI.INDEX.PIL4'),
             bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks4, reverse=TRUE)) %>%
          bg(j = c('SPI.INDEX.PIL5'),
             bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks5, reverse=TRUE))
# 
# #make nice looking
# index_tab <- index_tab %>%
#   flextable() %>%
#   add_header_lines('SPI overall score in 2022 and Pillar Scores.') %>%
#   set_header_labels(values=list(
#                        country="Country", 
#                        SPI.INDEX="SPI overall score",
#                        SPI.INDEX.PIL1="Dim 1: Data Use",
#                        SPI.INDEX.PIL2="Dim 2: Data Services",
#                        SPI.INDEX.PIL3="Dim 3: Data Products ",
#                        SPI.INDEX.PIL4="Dim 4: Data Sources",
#                        SPI.INDEX.PIL5="Dim 5: Data Infrastructure"
#                                    )) %>%
#     bg(j = c('SPI.INDEX'), 
#        bg = scales::col_quantile(col_palette, domain=NULL, n=5, reverse=TRUE)) %>%
#     bg(j = c('SPI.INDEX.PIL1'),
#        bg = scales::col_quantile(col_palette, domain=NULL, n=5, reverse=TRUE)) %>%
#     bg(j = c('SPI.INDEX.PIL2'),
#        bg = scales::col_quantile(col_palette, domain=NULL, n=5, reverse=TRUE)) %>%
#     bg(j = c('SPI.INDEX.PIL3'),
#        bg = scales::col_quantile(col_palette, domain=NULL, n=5, reverse=TRUE)) %>%
#     bg(j = c('SPI.INDEX.PIL4'),
#        bg = scales::col_quantile(col_palette, domain=NULL, n=5, reverse=TRUE)) %>%
#     bg(j = c('SPI.INDEX.PIL5'),
#        bg = scales::col_quantile(col_palette, domain=NULL, n=5, reverse=TRUE))
# 
#   
FitFlextableToPage(index_tab)
```
## Country SPI overall scores over time


```{r tabtime, echo=FALSE}
#colors
col_palette <- c("#2ec4b6", "#acece7", "#f1dc76",  "#ffbf69","#ff9f1c"   )
col_palette2 <- c("#2ec4b6",  "#f1dc76", "#ff9f1c" )


#make the table
index_tab_time <- spi_index_df %>%
  select(iso3c, date, SPI.INDEX) %>%
  mutate(SPI.INDEX=round(SPI.INDEX,1)) %>%
  filter(!is.na(SPI.INDEX)) %>%
  pivot_wider(
    names_from=date,
    values_from=SPI.INDEX,
    names_prefix='SPI.INDEX.'
  ) %>%
  left_join(country_metadata) %>%
  select(country, starts_with('SPI.INDEX')) 

#quintile groups
        brks <- quantile(index_tab_time$SPI.INDEX.2021, probs=c(1,2,3,4)/5,na.rm=T)
        brks <- append(0,brks)
        brks <- append(brks,100)
        brks1 <- quantile(index_tab_time$SPI.INDEX.2020, probs=c(1,2,3,4)/5,na.rm=T)
        brks1 <- append(0,brks1)
        if (max(brks1)<100) brks1 <- append(brks1,100)
        
        brks2 <- quantile(index_tab_time$SPI.INDEX.2019, probs=c(1,2,3,4)/5,na.rm=T)
        brks2 <- append(0,brks2)
        if (max(brks2)<100) brks2 <- append(brks2,100)
        
        brks3 <- quantile(index_tab_time$SPI.INDEX.2018, probs=c(1,2,3,4)/5,na.rm=T)
        brks3 <- append(0,brks3)
        if (max(brks3)<100) brks3 <- append(brks3,100)
        
        brks4 <- quantile(index_tab_time$SPI.INDEX.2017, probs=c(1,2,3,4)/5,na.rm=T)
        brks4 <- append(0,brks4)
        if (max(brks4)<100) brks4 <- append(brks4,100)
        brks5 <- quantile(index_tab_time$SPI.INDEX.2016, probs=c(1,2,3,4)/5,na.rm=T)
        brks5 <- append(0,brks5)
        if (max(brks5)<100) brks5 <- append(brks5,100)
        brks6 <- quantile(index_tab_time$SPI.INDEX.2022, probs=c(1,2,3,4)/5,na.rm=T)
        brks6 <- append(0,brks6)
        if (max(brks6)<100) brks6 <- append(brks6,100)

#make nice looking
index_tab_time <- index_tab_time %>%
  flextable() %>%
  add_header_lines('SPI overall scores over time') %>%
  set_header_labels(values=list(
                       country="Country", 
                       SPI.INDEX.2022="2022",
                       SPI.INDEX.2021="2021",
                       SPI.INDEX.2020="2020",
                       SPI.INDEX.2019="2019",
                       SPI.INDEX.2018="2018",
                       SPI.INDEX.2017="2017",
                       SPI.INDEX.2016="2016"
                                   )) %>%
    bg(j = c('SPI.INDEX.2022'),
       bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks6, reverse=TRUE)) %>%
    bg(j = c('SPI.INDEX.2021'),
       bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks, reverse=TRUE)) %>%
    bg(j = c('SPI.INDEX.2020'),
       bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks1, reverse=TRUE)) %>%
    bg(j = c('SPI.INDEX.2019'),
       bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks2, reverse=TRUE)) %>%
    bg(j = c('SPI.INDEX.2018'),
       bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks3, reverse=TRUE)) %>%
    bg(j = c('SPI.INDEX.2017'),
       bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks4, reverse=TRUE)) %>%
    bg(j = c('SPI.INDEX.2016'),
       bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks5, reverse=TRUE))
  
FitFlextableToPage(index_tab_time)
```



## Figure A.1: Pillar 1 Scores in 2022

### Panel A: Global Map
 ![](plots/pillarsplot1-1.png)

### Panel B: By Country
  ![](plots/countrypillarsplot1-1.png)
## Figure A.2: Pillar 2 Scores in 2022

### Panel A: Global Map
  ![](plots/pillarsplot2-1.png)
### Panel B: By Country
   ![](plots/countrypillarsplot2-1.png)
## Figure A.3: Pillar 3 Scores in 2022

### Panel A: Global Map
  ![](plots/pillarsplot3-1.png)
### Panel B: By Country
   ![](plots/countrypillarsplot3-1.png)
## Figure A.4: Pillar 4 Scores in 2022

### Panel A: Global Map
  ![](plots/pillarsplot4-1.png)
### Panel B: By Country
   ![](plots/countrypillarsplot4-1.png)
## Figure A.5: Pillar 5 Scores in 2022

### Panel A: Global Map   
  ![](plots/pillarsplot5-1.png)
### Panel B: By Country 
   ![](plots/countrypillarsplot5-1.png)

## Unique values in SCI

```{r unique_sci}
#pull SCI values
Request_metadata <- GET(url = "http://api.worldbank.org/v2/country/all/indicator/IQ.SCI.OVRL?format=json&date=2004:2020&per_page=5000")
Response_metadata <- content(Request_metadata, as = "text", encoding = "UTF-8")
# Parse the JSON content and convert it to a data frame.
sci_df <- jsonlite::fromJSON(Response_metadata, flatten = TRUE) %>%
  data.frame() %>%
  transmute(
    iso3c=countryiso3code,
    country=country.value,
    date=as.numeric(date),
    SCI=value
  ) %>%
  left_join(country_metadata) %>% #add on country metadata
  filter(region!='Aggregates') %>%
  select(iso3c, country, date, SCI  ) %>%
  group_by(date) %>%
  arrange(-SCI) %>%
  mutate(SCI_rank=rank(-SCI),
         SCI_rank=if_else(is.na(SCI),as.numeric(NA),SCI_rank))
#check unique values by Pillar.
unique_scores_df <- sci_df %>% filter(date==2020) %>% filter(!is.na(SCI)) %>% mutate(SCI=round(SCI,3))
unique_scores_sci <-length(unique(unique_scores_df$SCI))
```

The SCI contains `r unique_scores_sci` unique scores for `r length(unique_scores_df$SCI)` countries in 2022.

## Volatility in SPI versus SCI

```{r volatility}
volatility_df <- SPI %>%
  left_join(sci_df) %>%
  select(country, iso3c, date,income, region, SPI.INDEX, SCI) %>%
  distinct()
           
  
```

```{r volatilityplt1}
volatility_scatter_df <- volatility_df %>%
  filter(date==2016 | date==2020) %>%
  as_tibble() %>%
  pivot_longer(
    cols=c('SPI.INDEX', 'SCI'),
    names_to='indicator',
    values_to='value'
  ) %>%
  pivot_wider(
    values_from='value',
    names_from='date',
    names_prefix='value_'
  ) %>%
  mutate(indicator=case_when(
    indicator=='SCI' ~ "SCI",
    indicator=="SPI.INDEX" ~ "SPI Overall Score"
  ))
ggplot(volatility_scatter_df, aes(x=value_2016, y=value_2020, label=iso3c)) +
  facet_wrap(~indicator) +
  geom_text(color='#457b9d') +
  # labs(
  #   title='Volatility Between 2016 and 2020 for SCI and SPI Overall Scores'
  # ) +
  xlab('2016 value') +
  ylab('2020 value') +
  expand_limits(x=c(0,100), y=c(0,100)) +
  theme_spi()
    
```

```{r volatilityplt2, fig.height=8}
country_samp <- sample(unique(volatility_df$country),25)
volatility_trace_df <- volatility_df %>%
  as_tibble() %>%
  filter(date>=2016) %>%
  filter(!is.na(SPI.INDEX) & !is.na(SCI)) %>%
  pivot_longer(
    cols=c('SPI.INDEX', 'SCI'),
    names_to='indicator',
    values_to='value'
  )  %>%
  mutate(indicator=case_when(
    indicator=='SCI' ~ "SCI",
    indicator=="SPI.INDEX" ~ "SPI Overall Score"
  ))
  
#randomly seleect a few countries  
set.seed(72456)
country_samp <- sample(unique(volatility_trace_df$country),15)
volatility_trace_sample_df <- volatility_trace_df  %>%
  filter(country %in% country_samp)
ggplot(volatility_trace_sample_df, aes(x=date, y=value, color=indicator)) +
  facet_wrap(~country) +
  geom_line( ) +
  geom_point(shape=21, fill="#69b3a2") +
  # labs(
  #   title='Volatility for SCI and SPI Overall Scores for 25 Randomly Selected Countries'
  # ) +
  xlab('') +
  ylab('') +
  expand_limits(y=c(0,100)) +
  theme_spi() +
  theme(legend.position = 'top')
    
```


```{r variance}
#create a table with the variance for a set of countries
#randomly seleect a few countries  
set.seed(9872454)
country_samp <- sample(unique(volatility_trace_df$country),15)
variance_df <- volatility_trace_df  %>%
  filter(country %in% country_samp) %>%
  group_by(country, indicator) %>%
  summarise(variance=sd(value)) %>%
  pivot_wider(
    names_from='indicator',
    values_from='variance'
  )
variance_samp_avg_df <- volatility_trace_df %>% 
  filter(country %in% country_samp) %>%
  group_by(country, indicator) %>%
  summarise(variance=sd(value)) %>%
  pivot_wider(
    names_from='indicator',
    values_from='variance'
  ) %>%
  ungroup() %>%
  summarise(across(c('SCI', 'SPI Overall Score'), mean)) %>%
  mutate(country="Selected Country Avg")
variance_avg_df <- volatility_trace_df %>%   
  group_by(country, indicator) %>%
  summarise(variance=sd(value)) %>%
  pivot_wider(
    names_from='indicator',
    values_from='variance'
  ) %>%
  ungroup() %>%
  summarise(across(c('SCI', 'SPI Overall Score'), mean, na.rm=T)) %>%
  mutate(country="Global Avg")
global_sd_sci <- variance_avg_df$SCI[1]
global_sd_spi <- variance_avg_df$`SPI Overall Score`[1]
```

Below we show a measure of volatility over time in a countries SCI or SPI Overall Score.  The volatility measure is the standard deviation of the measure from 2016-22.  The SCI has slightly greater volatility across time with a global average standard deviation of `r round(global_sd_sci,1)`.  The SPI Overall Score has a global average standard deviation across time of `r round(global_sd_spi,1)`

```{r varianceplot}
std_border = officer::fp_border(color="black", width = 1)
variance_df %>%
  bind_rows(variance_samp_avg_df) %>%
  bind_rows(variance_avg_df) %>%
  flextable() %>%
  add_header_lines('Standard Deviation Across Time for 15 Randomly Selected Countries for SPI Overall Score and SCI') %>%
  add_footer_lines('Global Avg represents the average standard deviation across time for all countries in dataset.  Selected Country Avg is the average standard deviation for the 15 randomly selected countries.' ) %>%
  hline(i = 15, part = "body",
        border = std_border) %>%
  FitFlextableToPage()
```

## Volatility in SPI versus ODIN, Open Data Barometer

Volatility for the Global Data Barometer was not considered, because the index has only one year of data available for countries.

```{r volatility_odin}
#combine spi with odin, odb
volatility_df <- SPI %>%
  left_join(odin_df) %>%
  left_join(
    bind_rows(
      (odb_df_2017 %>% mutate(date=2017)),
      (odb_df_2016 %>% mutate(date=2016, odb=odb_2016)),
      (odb_df_2015 %>% mutate(date=2015, iso3c=ISO3, odb=`ODB-Score-Scaled`)),
      (odb_df_2014 %>% mutate(date=2014, iso3c=ISO3, odb=`ODB-Score-Scaled`)),
      (odb_df_2013 %>% mutate(date=2013, iso3c=ISO3, odb=`ODB-Score-Scaled`)),
    )
  ) %>%
  select(country, iso3c, date,income, region, SPI.INDEX, ODIN_score, odb) 
           
  
```

```{r volatilityplt1_odin}
volatility_scatter_df <- volatility_df %>%
  filter(date==2016 | date==2022) %>%
  as_tibble() %>%
  pivot_longer(
    cols=c('SPI.INDEX', 'ODIN_score'),
    names_to='indicator',
    values_to='value'
  ) %>%
  pivot_wider(
    values_from='value',
    names_from='date',
    names_prefix='value_'
  ) %>%
  mutate(indicator=case_when(
    indicator=='ODIN_score' ~ "ODIN Score",
    indicator=="SPI.INDEX" ~ "SPI Overall Score"
  ))
ggplot(volatility_scatter_df, aes(x=value_2016, y=value_2022, label=iso3c)) +
  facet_wrap(~indicator) +
  geom_text(color='#457b9d') +
  # labs(
  #   title='Volatility Between 2016 and 2020 for SCI and SPI Overall Scores'
  # ) +
  xlab('2016 value') +
  ylab('2022 value') +
  expand_limits(x=c(0,100), y=c(0,100)) +
  theme_bw()
    
```

```{r volatilityplt2_odin, fig.height=8}
country_samp <- sample(unique(volatility_df$country),25)
volatility_trace_df <- volatility_df %>%
  as_tibble() %>%
  filter(date>=2016) %>%
  filter(!is.na(SPI.INDEX) & !is.na(ODIN_score)) %>%
  pivot_longer(
    cols=c('SPI.INDEX', 'ODIN_score'),
    names_to='indicator',
    values_to='value'
  )  %>%
  mutate(indicator=case_when(
    indicator=='ODIN_score' ~ "ODIN Score",
    indicator=="SPI.INDEX" ~ "SPI Overall Score"
  ))
  
#randomly seleect a few countries  
set.seed(72456)
country_samp <- sample(unique(volatility_trace_df$country),15)
volatility_trace_sample_df <- volatility_trace_df  %>%
  filter(country %in% country_samp)
ggplot(volatility_trace_sample_df, aes(x=date, y=value, color=indicator)) +
  facet_wrap(~country) +
  geom_line( ) +
  geom_point(shape=21, fill="#69b3a2") +
  # labs(
  #   title='Volatility for SCI and SPI Overall Scores for 25 Randomly Selected Countries'
  # ) +
  xlab('') +
  ylab('') +
  expand_limits(y=c(0,100)) +
  theme_bw() +
  theme(legend.position = 'top')
    
```


```{r variance_odin}
#create a table with the variance for a set of countries
#randomly seleect a few countries  
set.seed(9872454)
country_samp <- sample(unique(volatility_trace_df$country),15)
variance_df <- volatility_trace_df  %>%
  filter(country %in% country_samp) %>%
  group_by(country, indicator) %>%
  summarise(variance=sd(value)) %>%
  pivot_wider(
    names_from='indicator',
    values_from='variance'
  )
variance_samp_avg_df <- volatility_trace_df %>% 
  filter(country %in% country_samp) %>%
  group_by(country, indicator) %>%
  summarise(variance=sd(value)) %>%
  pivot_wider(
    names_from='indicator',
    values_from='variance'
  ) %>%
  ungroup() %>%
  summarise(across(c('ODIN Score', 'SPI Overall Score'), mean)) %>%
  mutate(country="Selected Country Avg")
variance_avg_df <- volatility_trace_df %>%   
  group_by(country, indicator) %>%
  summarise(variance=sd(value)) %>%
  pivot_wider(
    names_from='indicator',
    values_from='variance'
  ) %>%
  ungroup() %>%
  summarise(across(c('ODIN Score', 'SPI Overall Score'), mean, na.rm=T)) %>%
  mutate(country="Global Avg")
global_sd_odin<- variance_avg_df$`ODIN Score`[1]
global_sd_spi <- variance_avg_df$`SPI Overall Score`[1]
```

Below we show a measure of volatility over time in a countries ODIN or SPI Overall Score.  The volatility measure is the standard deviation of the measure from 2016-22.  The ODIN has greater volatility across time with a global average standard deviation of `r round(global_sd_sci,1)`.  The SPI Overall Score has a global average standard deviation across time of `r round(global_sd_spi,1)`

```{r varianceplot_odin}
std_border = officer::fp_border(color="black", width = 1)
variance_df %>%
  bind_rows(variance_samp_avg_df) %>%
  bind_rows(variance_avg_df) %>%
  flextable() %>%
  add_header_lines('Standard Deviation Across Time for 15 Randomly Selected Countries for SPI Overall Score and ODIN') %>%
  add_footer_lines('Global Avg represents the average standard deviation across time for all countries in dataset.  Selected Country Avg is the average standard deviation for the 15 randomly selected countries.' ) %>%
  hline(i = 15, part = "body",
        border = std_border) %>%
  FitFlextableToPage()
```




## how missing values can affect the SPI, and whether there is a minimal set of indicators that would allow meaningful inference in the case of missing values

```{r minset, eval=FALSE, include=FALSE}
# number of iterations
iterate <- 10000
#read in indicators
metadata_ind <- read_csv(paste(raw_dir, '/metadata/SPI_dimensions_sources.csv', sep="")) %>%
  filter(grepl("SPI.", source_id))
# create index dataset
spi_index_df_temp <- spi_df_final %>%
  select(country, iso3c, date, starts_with("SPI"), income, region, weights, population) %>%
  arrange(-date,country)
#Drop certain indicators that don't make cut because of imcomplete coverage usually
spi_index_df_temp <- spi_index_df_temp %>%
  select( -SPI.D5.3.DISK, -SPI.D4.3.GEO.second.admin.level) 
leave_out_fun <-  function(variables) {
  
spi_index_df_alt <- spi_index_df_temp %>%
  arrange(country, date) %>%
  group_by(country) %>%
  mutate(across(starts_with("SPI"), na.locf, na.rm=FALSE)) %>%
  mutate(across(matches(variables),~as.numeric(NA))) %>% #convert selected variable to missing values then begin calculation without them
  select(country, iso3c, date, everything())
#Create overall subscores corresponding to John's framework
spi_index_df_alt <- spi_index_df_alt %>%
  mutate(INDEX.SPI.D2.1=rowMeans(across(starts_with('SPI.D2.1'))),
         INDEX.SPI.D2.2=SPI.D2.2.Openness.subscore,
         INDEX.SPI.D2.4=SPI.D2.4.NADA,
         INDEX.SPI.D3.1=rowMeans(across(c("SPI.D3.1.POV",
                                          "SPI.D3.2.HNGR",
                                          "SPI.D3.3.HLTH",
                                          "SPI.D3.4.EDUC",
                                          "SPI.D3.5.GEND",
                                          "SPI.D3.6.WTRS")), na.rm=TRUE),
         INDEX.SPI.D3.2=rowMeans(across(c("SPI.D3.7.ENRG",
                                          "SPI.D3.8.WORK",
                                          "SPI.D3.9.INDY",
                                          "SPI.D3.10.NEQL",
                                          "SPI.D3.11.CITY",
                                          "SPI.D3.12.CNSP")), na.rm=TRUE),         
         INDEX.SPI.D3.3=rowMeans(across(c("SPI.D3.13.CLMT",
                                          "SPI.D3.15.LAND" )), na.rm=TRUE),
         INDEX.SPI.D3.4=rowMeans(across(c("SPI.D3.16.INST",
                                          "SPI.D3.17.PTNS" )), na.rm=TRUE),
         INDEX.SPI.D4.1=rowMeans(across(starts_with('SPI.D4.1')), na.rm=TRUE),
         INDEX.SPI.D4.2=rowMeans(across(starts_with('SPI.D4.2')), na.rm=TRUE),
         INDEX.SPI.D4.3=rowMeans(across(starts_with('SPI.D4.3')), na.rm=TRUE),
         #INDEX.SPI.D5.1=rowMeans(across(starts_with('SPI.D5.1'))),
         INDEX.SPI.D5.2=rowMeans(across(starts_with('SPI.D5.2')), na.rm=TRUE),
         #INDEX.SPI.D5.5=rowMeans(across(starts_with('SPI.D5.5')))
  ) %>%
  mutate(
    SPI.INDEX.PIL1=rowMeans(across(starts_with("SPI.D1.5")), na.rm=TRUE),
    SPI.INDEX.PIL2=rowMeans(across(starts_with("INDEX.SPI.D2")), na.rm=TRUE),
    SPI.INDEX.PIL3=(6*INDEX.SPI.D3.1 + 6*INDEX.SPI.D3.2 + 2*INDEX.SPI.D3.3 + 2*INDEX.SPI.D3.4)/16,
    SPI.INDEX.PIL4=rowMeans(across(starts_with("INDEX.SPI.D4")), na.rm=TRUE),
    SPI.INDEX.PIL5=rowMeans(across(starts_with("INDEX.SPI.D5")), na.rm=TRUE),
    SPI.INDEX.ALT=rowMeans(across(c('SPI.INDEX.PIL1',
                                    'SPI.INDEX.PIL2',
                                    'SPI.INDEX.PIL3',
                                    'SPI.INDEX.PIL4',
                                    'SPI.INDEX.PIL5')), na.rm=TRUE)
  ) %>% #
  mutate(across(starts_with('SPI.INDEX'),~100*.)) %>%
  arrange(-date, -SPI.INDEX.ALT) %>%
  select(country, iso3c, date, SPI.INDEX.ALT) %>%
  filter(date>=2016) #2016 is first year with complete data
  #form database with both measures
  temp <- spi_index_df %>%
    select(country, iso3c, date, SPI.INDEX) %>%
    left_join(spi_index_df_alt) 
  cor(temp$SPI.INDEX, temp$SPI.INDEX.ALT, use='pairwise.complete')
  
}
minset_df <- tibble(iteration=1:iterate) %>%
  mutate(ind_list=list(metadata_ind$source_id),
         rand_number=rbinom(n(),54,row_number()/iterate),
         rand_number=case_when( #generate random number for calculation
           as.numeric(rand_number)<=1 ~ 1,
           as.numeric(rand_number)>=54 ~ 53,
           TRUE ~ as.numeric(rand_number)
         )) %>%
  rowwise() %>%
  mutate(ind_list=list(sample(ind_list,rand_number)),
         source_id=paste(ind_list, collapse="|")) %>%
  as_tibble() %>%
  nest(source_id) %>%
  mutate(
    CORR=map(
      data,
      ~leave_out_fun(.x$source_id)
    )
  ) %>%
  #unnest(ABS.DIFF) %>%
  unnest(data) 
minset_df <- minset_df %>%
  mutate(CORR=as.numeric(CORR)) %>%
  arrange(-rand_number, -CORR)
full_ind_list <- as.character(metadata_ind$source_id)
minset_df <- minset_df %>%
  rename(drop_list=ind_list) %>%
  rowwise() %>%
  mutate(set=list(full_ind_list[which(!full_ind_list %in% drop_list)]))
minset_df %>%
 select(set,drop_list, rand_number, iteration, CORR) %>%
 save(file=paste0(output_dir, 'minimum_set_analysis.Rdata'))
# 
# 
# set=full_ind_list[which(!full_ind_list %in% minset_df$drop_list[1])]
```


## Simple Unweighted Index Comparison



```{r simpleindex, echo=FALSE}

# just take a simple numeric average across all indicators
# I will forward fill all indicators if they are missing
spi_index_simple <- spi_index_df %>%
  select(country, date, iso3c,starts_with('SPI.INDEX'), starts_with('SPI.D1'), starts_with('SPI.D2')
         , starts_with('SPI.D3'), starts_with('SPI.D4'), starts_with('SPI.D5')) %>%
  arrange(country, date) %>%
  group_by(country) %>%
  select(-c("SPI.D2.2.Machine.readable",
            "SPI.D2.2.Non.proprietary",
            "SPI.D2.2.Download.options",
            "SPI.D2.2.Metadata.available",
            "SPI.D2.2.Terms.of.use"), -SPI.D5.1.DILG, -SPI.D5.5.DIFI) %>%
  mutate(across(starts_with("SPI"), na.locf, na.rm=FALSE)) %>%
  mutate(SPI.INDEX.SIMP=100*rowMeans(across(starts_with("SPI.D")), na.rm=FALSE),
         SPI.INDEX.PIL1.SIMP=100*rowMeans(across(starts_with("SPI.D1")), na.rm=FALSE),
         SPI.INDEX.PIL2.SIMP=100*rowMeans(across(starts_with("SPI.D2")), na.rm=FALSE),
         SPI.INDEX.PIL3.SIMP=100*rowMeans(across(starts_with("SPI.D3")), na.rm=FALSE),
         SPI.INDEX.PIL4.SIMP=100*rowMeans(across(starts_with("SPI.D4")), na.rm=FALSE),
         SPI.INDEX.PIL5.SIMP=100*rowMeans(across(starts_with("SPI.D5")), na.rm=FALSE)
         ) %>% #
  arrange(-date, -SPI.INDEX) %>%
  select(country, iso3c, date, starts_with('SPI.INDEX')) %>%
  filter(date %in% c(2016:2022))

#correlations
cor_ovrl <- cor(spi_index_simple$SPI.INDEX, spi_index_simple$SPI.INDEX.SIMP, use='pairwise.complete' )
cor_p1 <- cor(spi_index_simple$SPI.INDEX.PIL1, spi_index_simple$SPI.INDEX.PIL1.SIMP, use='pairwise.complete' )
cor_p2 <- cor(spi_index_simple$SPI.INDEX.PIL2, spi_index_simple$SPI.INDEX.PIL2.SIMP, use='pairwise.complete' )
cor_p3 <- cor(spi_index_simple$SPI.INDEX.PIL3, spi_index_simple$SPI.INDEX.PIL3.SIMP, use='pairwise.complete' )
cor_p4 <- cor(spi_index_simple$SPI.INDEX.PIL4, spi_index_simple$SPI.INDEX.PIL4.SIMP, use='pairwise.complete' )
cor_p5 <- cor(spi_index_simple$SPI.INDEX.PIL5, spi_index_simple$SPI.INDEX.PIL5.SIMP, use='pairwise.complete' )

```

In the analysis below, we compare results over the period 2016-22 for a version of the SPI where we use unweighted aggregation for the SPI indicators to our nested version of the SPI described above. A quick note on terminology.  We will refer to the SPI documented above as the SPI overall score or SPI pillar scores, and we refer to the unweighted index as the unweighted SPI overall score and unweighted SPI pillar scores.

The correlation between the SPI overall score and the unweighted SPI overall score is `r cor_ovrl`.  The correlation between the two for Pillar 1 on data use is `r cor_p1`.  Because only one dimension is included and the indicators in this dimension are given equal weight in the SPI Pillar 1 score, the Pillar 1 score and the unweighted Pillar 1 score are identical.  The correlation for Pillar 2 on data services is `r cor_p2`.  The correlation for Pillar 3 on data products is `r cor_p3`.  Again, because each SDG indicator in Pillar 3 are weighted equally in each index, these scores are identical.  The correlation for Pillar 4 on data sources is `r cor_p4`.  The correlation for Pillar 5 on data infrastructure is `r cor_p5`, because only the methods and standards dimension is included.



```{r simpleplot}

simp_plot_df <- spi_index_simple %>%
  filter(date==2022) %>%
  pivot_longer(
    cols=starts_with('SPI.INDEX'),
    names_to = 'index',
    values_to = 'value'
  ) %>%
  mutate(
    type=if_else(grepl("SIMP",index),"Unweighted", "Original"),
    index=gsub(".SIMP","",index)
  ) %>%
  pivot_wider(
    names_from = 'type',
    values_from = 'value'
  )

ggplot(simp_plot_df, aes(x=Original, y=Unweighted)) +
  facet_wrap(~index) +
  geom_point() +
  theme_bw() +
  labs(
    title="Comparison of SPI Overall Scores and unweighted SPI scores in 2022."
  )
```

### Number of tied scores 

#### Table. Number of Unique Values for SPI and Unweighted SPI Scores. 
```{r unique_scores}

#calculate the number of unique values in the SPI Index
SPI_2022_simple <- spi_index_simple %>%
  filter(date==2022) %>%
  filter(!is.na(SPI.INDEX))

unique_scores <-  length(unique(SPI_2022_simple$SPI.INDEX))

#check unique values by pillar.
unique_scores1 <-  length(unique(SPI_2022_simple$SPI.INDEX.PIL1))
unique_scores2 <-  length(unique(SPI_2022_simple$SPI.INDEX.PIL2))
unique_scores3 <-  length(unique(SPI_2022_simple$SPI.INDEX.PIL3))
unique_scores4 <-  length(unique(SPI_2022_simple$SPI.INDEX.PIL4))
unique_scores5 <-  length(unique(SPI_2022_simple$SPI.INDEX.PIL5))

#simple index
unique_scores_simp <-  length(unique(SPI_2022_simple$SPI.INDEX.SIMP))


unique_scores1_simp <-  length(unique(SPI_2022_simple$SPI.INDEX.PIL1.SIMP))
unique_scores2_simp <-  length(unique(SPI_2022_simple$SPI.INDEX.PIL2.SIMP))
unique_scores3_simp <-  length(unique(SPI_2022_simple$SPI.INDEX.PIL3.SIMP))
unique_scores4_simp <-  length(unique(SPI_2022_simple$SPI.INDEX.PIL4.SIMP))
unique_scores5_simp <-  length(unique(SPI_2022_simple$SPI.INDEX.PIL5.SIMP))

unique_tab <- data.frame(Score=c('Overall Score', "Pillar 1", "Pillar 2", "Pillar 3", "Pillar 4", "Pillar 5"),
                         SPI=c(unique_scores, unique_scores1, unique_scores2, unique_scores3, unique_scores4, unique_scores5),
                         SPI.SIMP=c(unique_scores_simp, unique_scores1_simp, unique_scores2_simp, unique_scores3_simp, unique_scores4_simp, unique_scores5_simp))

unique_tab %>%
  flextable() %>%
  set_header_labels(values=list(
    Score="Score",
    SPI="SPI",
    SPI.SIMP="Unweighted SPI"
  ))

```



### Volatility



```{r volatilitypltsimp}
volatility_scatter_df <- spi_index_simple %>%
  select(country, iso3c, date, SPI.INDEX, SPI.INDEX.SIMP) %>%
  filter(date==2016 | date==2022) %>%
  as_tibble() %>%
  pivot_longer(
    cols=c('SPI.INDEX', 'SPI.INDEX.SIMP'),
    names_to='indicator',
    values_to='value'
  ) %>%
  pivot_wider(
    values_from='value',
    names_from='date',
    names_prefix='value_'
  ) %>%
  mutate(indicator=case_when(
    indicator=='SPI.INDEX.SIMP' ~ "Unweighted SPI Overall Score",
    indicator=="SPI.INDEX" ~ "SPI Overall Score"
  ))
ggplot(volatility_scatter_df, aes(x=value_2016, y=value_2022, label=iso3c)) +
  facet_wrap(~indicator) +
  geom_text(color='#459b9d') +
  # labs(
  #   title='Volatility Between 2016 and 2022 for SCI and SPI Overall Scores'
  # ) +
  xlab('2016 value') +
  ylab('2022 value') +
  expand_limits(x=c(0,100), y=c(0,100)) +
  theme_spi()
    
```
```{r variancesimp}
#create a table with the variance for a set of countries
#randomly seleect a few countries  
set.seed(9872454)
volatility_trace_df <- spi_index_simple %>%
  as_tibble() %>%
  filter(date>=2016) %>%
  filter(!is.na(SPI.INDEX) & !is.na(SPI.INDEX.SIMP)) %>%
  pivot_longer(
    cols=c('SPI.INDEX', 'SPI.INDEX.SIMP'),
    names_to='indicator',
    values_to='value'
  )  %>%
  mutate(indicator=case_when(
    indicator=='SPI.INDEX.SIMP' ~ "Unweighted SPI",
    indicator=="SPI.INDEX" ~ "SPI Overall Score"
  ))
  

variance_avg_df <- volatility_trace_df %>%   
  group_by(country, indicator) %>%
  summarise(variance=sd(value)) %>%
  pivot_wider(
    names_from='indicator',
    values_from='variance'
  ) %>%
  ungroup() %>%
  summarise(across(c('Unweighted SPI', 'SPI Overall Score'), mean)) %>%
  mutate(country="Global Avg")

global_sd_spi_simp <- variance_avg_df$`Unweighted SPI`[1]
global_sd_spi <- variance_avg_df$`SPI Overall Score`[1]
```

Below we show a measure of volatility over time in a countries Unweighted SPI or SPI Overall Score.  The volatility measure is the standard deviation of the measure from 2016-22.  The Unweighted SPI has  a global average standard deviation of `r round(global_sd_spi_simp,1)`.  The SPI Overall Score has a global average standard deviation across time of `r round(global_sd_spi,1)`

### Correlation with the other human capital, governance, poverty, and inequality indexes
*Table : Scatterplot of Statistical Capacity Index (SCI) and SPI Overall Score on Log GDP*
```{r scispiregtab1}


reg_df <- wbstats::wb_data(
  indicator='NY.GDP.PCAP.KD',
  start_date=2016,
  end_date=2022, return_wide = FALSE
    ) %>%
  mutate(value=log(value)) %>%
  left_join(select(spi_index_simple,iso3c,date, SPI.INDEX,SPI.INDEX.SIMP)) %>%
  filter(date==2022)


reg_long <- reg_df %>%
  pivot_longer(
    cols = c('SPI.INDEX', 'SPI.INDEX.SIMP'),
    names_to='index',
    values_to='index_values'
  ) %>%
  mutate(
    index_name=case_when(
      index=='SPI.INDEX' ~ "SPI overall score",
      index=='SPI.INDEX.SIMP' ~ "Unweighted SPI Index "
      
    )
  ) %>%
  filter(date==2022)

#add equations to plots
  eq <- lm_robust(SPI.INDEX ~ value, data=reg_df, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
eq_plot_txt1 <-  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )
#add equations to plots
  eq <- lm_robust(SPI.INDEX.SIMP ~ value, data=reg_df, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
eq_plot_txt2 <-  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )


p1 <- ggplot(reg_df, aes(x=value,y=SPI.INDEX)) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('SPI Overall Score') +
  xlab('Log GDP Per Capita') +
  geom_richtext(
    aes(x = 8, y = 10,label = eq_plot_txt1, hjust=0.2)
  ) 
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2022), hjust = 0) +

p2 <- ggplot(reg_df, aes(x=value,y=SPI.INDEX.SIMP)) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Unweighted SPI Score') +
  xlab('Log GDP Per Capita') +
  geom_richtext(
    aes(x = 8, y = 10,label = eq_plot_txt2, hjust=0.2)
  ) 
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2022), hjust = 0) +

p1 + p2
```

*Table : Scatterplot of Statistical Capacity Index (SCI) and SPI Overall Score on the HCI*
```{r scispiregtab2}


reg_df <- wbstats::wb_data(
  indicator='HD.HCI.OVRL',
  start_date=2016,
  end_date=2020, return_wide = FALSE
    ) %>%
  left_join(select(spi_index_simple,iso3c,date, SPI.INDEX,SPI.INDEX.SIMP)) %>%
  filter(date==2020)
  


reg_long <- reg_df %>%
  pivot_longer(
    cols = c('SPI.INDEX', 'SPI.INDEX.SIMP'),
    names_to='index',
    values_to='index_values'
  ) %>%
  mutate(
    index_name=case_when(
      index=='SPI.INDEX' ~ "SPI overall score",
      index=='SPI.INDEX.SIMP' ~ "Unweighted SPI Index "
      
    )
  ) %>%
  filter(date==2020)

#add equations to plots
  eq <- lm_robust(SPI.INDEX ~ value, data=reg_df, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
eq_plot_txt1 <-  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )
#add equations to plots
  eq <- lm_robust(SPI.INDEX.SIMP ~ value, data=reg_df, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
eq_plot_txt2 <-  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )


p1 <- ggplot(reg_df, aes(x=value,y=SPI.INDEX)) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('SPI Overall Score') +
  xlab('Human Capital Index') +
  geom_richtext(
    aes(x = 0.5, y = 10,label = eq_plot_txt1, hjust=0.2)
  ) 
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2020), hjust = 0) +

p2 <- ggplot(reg_df, aes(x=value,y=SPI.INDEX.SIMP)) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Unweighted SPI Score') +
  xlab('Human Capital Index') +
  geom_richtext(
    aes(x = 0.5, y = 10,label = eq_plot_txt2, hjust=0.2)
  ) 
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2020), hjust = 0) +

p1 + p2
```


*Table : Scatterplot of Statistical Capacity Index (SCI) and SPI Overall Score on Government Effectiveness*
```{r scispiregtab3}


reg_df <- wbstats::wb_data(
  indicator='GE.EST',
  start_date=2016,
  end_date=2019, return_wide = FALSE
    ) %>%
  left_join(select(spi_index_simple,iso3c,date, SPI.INDEX,SPI.INDEX.SIMP)) %>%
  filter(date==2019)
  


reg_long <- reg_df %>%
  pivot_longer(
    cols = c('SPI.INDEX', 'SPI.INDEX.SIMP'),
    names_to='index',
    values_to='index_values'
  ) %>%
  mutate(
    index_name=case_when(
      index=='SPI.INDEX' ~ "SPI overall score",
      index=='SPI.INDEX.SIMP' ~ "Unweighted SPI Index "
      
    )
  ) %>%
  filter(date==2019)

#add equations to plots
  eq <- lm_robust(SPI.INDEX ~ value, data=reg_df, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
eq_plot_txt1 <-  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )
#add equations to plots
  eq <- lm_robust(SPI.INDEX.SIMP ~ value, data=reg_df, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
eq_plot_txt2 <-  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )


p1 <- ggplot(reg_df, aes(x=value,y=SPI.INDEX)) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('SPI Overall Score') +
  xlab('Government Effectiveness') +
  geom_richtext(
    aes(x = -0.5, y = 10,label = eq_plot_txt1, hjust=0.2)
  ) 
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2019), hjust = 0) +

p2 <- ggplot(reg_df, aes(x=value,y=SPI.INDEX.SIMP)) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Unweighted SPI Score') +
  xlab('Government Effectiveness') +
  geom_richtext(
    aes(x = -0.5, y = 10,label = eq_plot_txt2, hjust=0.2)
  ) 
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2019), hjust = 0) +

p1 + p2
```


*Table : Scatterplot of Statistical Capacity Index (SCI) and SPI Overall Score on Poverty Headcount*
```{r scispiregtab4}


reg_df <- wbstats::wb_data(
  indicator='SI.POV.DDAY',
              start_date=2010,
              end_date=2022,
              mrv=10,
              gapfill=TRUE,
              return_wide = F)  %>%
  left_join(select(spi_index_simple,iso3c,date, SPI.INDEX,SPI.INDEX.SIMP)) %>%
  filter(date==2022)
  


reg_long <- reg_df %>%
  pivot_longer(
    cols = c('SPI.INDEX', 'SPI.INDEX.SIMP'),
    names_to='index',
    values_to='index_values'
  ) %>%
  mutate(
    index_name=case_when(
      index=='SPI.INDEX' ~ "SPI overall score",
      index=='SPI.INDEX.SIMP' ~ "Unweighted SPI Index "
      
    )
  ) %>%
  filter(date==2022)

#add equations to plots
  eq <- lm_robust(SPI.INDEX ~ value, data=reg_df, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
eq_plot_txt1 <-  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )
#add equations to plots
  eq <- lm_robust(SPI.INDEX.SIMP ~ value, data=reg_df, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
eq_plot_txt2 <-  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )


p1 <- ggplot(reg_df, aes(x=value,y=SPI.INDEX)) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('SPI Overall Score') +
  xlab('Poverty Headcount $1.90') +
  geom_richtext(
    aes(x = 20, y = 10,label = eq_plot_txt1, hjust=0.2)
  ) 
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2022), hjust = 0) +

p2 <- ggplot(reg_df, aes(x=value,y=SPI.INDEX.SIMP)) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Unweighted SPI Score') +
  xlab('Poverty Headcount $1.90') +
  geom_richtext(
    aes(x = 20, y = 10,label = eq_plot_txt2, hjust=0.2)
  ) 
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2022), hjust = 0) +

p1 + p2
```


*Table : Scatterplot of Statistical Capacity Index (SCI) and SPI Overall Score on Gini*
```{r scispiregtab5}


reg_df <- wbstats::wb_data(
  indicator='SI.POV.GINI',
              start_date=2010,
              end_date=2022,
              mrv=10,
              gapfill=TRUE,
              return_wide = F)  %>%
  left_join(select(spi_index_simple,iso3c,date, SPI.INDEX,SPI.INDEX.SIMP)) %>%
  filter(date==2022)
  


reg_long <- reg_df %>%
  pivot_longer(
    cols = c('SPI.INDEX', 'SPI.INDEX.SIMP'),
    names_to='index',
    values_to='index_values'
  ) %>%
  mutate(
    index_name=case_when(
      index=='SPI.INDEX' ~ "SPI overall score",
      index=='SPI.INDEX.SIMP' ~ "Unweighted SPI Index "
      
    )
  ) %>%
  filter(date==2022)

#add equations to plots
  eq <- lm_robust(SPI.INDEX ~ value, data=reg_df, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
eq_plot_txt1 <-  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )
#add equations to plots
  eq <- lm_robust(SPI.INDEX.SIMP ~ value, data=reg_df, se_type='HC2')
  coef <- coef(eq)
  std_err <- sqrt(diag(vcov(eq)))
  r_2<- summary(eq)$r.squared
eq_plot_txt2 <-  glue::glue("y = {round(coef[1],3)} + {round(coef[2],3)} x, R<sup>2</sup> = {round(r_2[1],3)} <br> &nbsp;   &nbsp;  	&nbsp; 	&nbsp;   ({round(std_err[1],3)}) &nbsp;   &nbsp;  ({round(std_err[2],3)})" )


p1 <- ggplot(reg_df, aes(x=value,y=SPI.INDEX)) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('SPI Overall Score') +
  xlab('Gini') +
  geom_richtext(
    aes(x = 30, y = 10,label = eq_plot_txt1, hjust=0.2)
  ) 
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2022), hjust = 0) +

p2 <- ggplot(reg_df, aes(x=value,y=SPI.INDEX.SIMP)) +
  geom_text(aes(label=iso3c)) +
  geom_smooth(method='lm') +
  theme_spi() +
  #scale_x_continuous(trans = scales::log2_trans()) +
  ylab('Unweighted SPI Score') +
  xlab('Gini') +
  geom_richtext(
    aes(x = 30, y = 10,label = eq_plot_txt2, hjust=0.2)
  ) 
  #annotate("label", x = 20, y = 5, label = eq_plot_txt(pov_df_2022), hjust = 0) +

p1 + p2
```



---
nocite: '@*'
---
panel.background = ggplot2::element_blank(),
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = ggplot2::element_rect(fill="white"),
strip.text = ggplot2::element_text(size  = 22,  hjust = 0)
)
}
geom_curve_polar <- function(...) {
layer <- geom_curve(...)
new_layer <- ggproto(NULL, layer)
old_geom <- new_layer$geom
geom <- ggproto(
NULL, old_geom,
draw_panel = function(data, panel_params, coord,
curvature = 0.5, angle = 90, ncp = 5,
arrow = NULL, arrow.fill = NULL,
lineend = "butt", linejoin = "round",
na.rm = FALSE) {
data <- ggplot2:::remove_missing(
data, na.rm = na.rm, c("x", "y", "xend", "yend",
"linetype", "size", "shape")
)
if (ggplot2:::empty(data)) {
return(zeroGrob())
}
coords <- coord$transform(data, panel_params)
ends <- transform(data, x = xend, y = yend)
ends <- coord$transform(ends, panel_params)
arrow.fill <- if (!is.null(arrow.fill)) arrow.fill else coords$colour
return(grid::curveGrob(
coords$x, coords$y, ends$x, ends$y,
default.units = "native", gp = grid::gpar(
col = alpha(coords$colour, coords$alpha),
fill = alpha(arrow.fill, coords$alpha),
lwd = coords$size * .pt,
lty = coords$linetype,
lineend = lineend,
linejoin = linejoin
),
curvature = curvature, angle = angle, ncp = ncp,
square = FALSE, squareShape = 1, inflect = FALSE, open = TRUE,
arrow = arrow
))
}
)
new_layer$geom <- geom
return(new_layer)
}
gg_bars <- function(z) {
#set color pallete
col_pal <- c("#ff595e","#ffca3a","#8ac926","#1982c4","#6a4c93")
names(col_pal) <- c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10))
z <- z
z <- na.omit(z)
x <- factor(x=c(1,2,3,4,5), labels=c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10)))
z <- data.frame(x = x, z = z, w = z < 0)
ggplot(z, aes(x = x, y = z)) +
geom_col(show.legend = FALSE, fill='#7A8776') +
geom_text(aes(label=scales::percent(z)), nudge_y = .01, size=5) +
geom_hline(aes(yintercept=0.2)) +
bbc_style() +
expand_limits(y=c(0,1)) +
theme(
axis.text.x = element_text()
) +
annotate('text', x=1.1, y=0.5, label=str_wrap("Line of Equal Weight",15)) +
geom_curve(aes(x=0.9,y=0.4, xend=1.2,yend=0.2), curvature=-0.2)
}
gg_bars2 <- function(z) {
#set color pallete
col_pal <- c("#ff595e","#ffca3a","#8ac926","#1982c4","#6a4c93")
names(col_pal) <- c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10))
z <- z
z <- na.omit(z)
x <- factor(x=c(1,2,3,4,5), labels=c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10)))
z <- data.frame(x = x, z = z, w = z < 0)
ggplot(z, aes(x = x, y = z)) +
geom_col(show.legend = FALSE, fill='#7A8776') +
geom_text(aes(label=scales::percent(z)), nudge_y = .01, size=5) +
geom_hline(aes(yintercept=0.2)) +
bbc_style() +
expand_limits(y=c(0,1)) +
theme(
axis.text.x = element_text()
) +
annotate('text', x=1.1, y=0.5, label=str_wrap("Line of Equal Weight",15)) +
geom_curve(aes(x=0.9,y=0.4, xend=1.2,yend=0.2), curvature=-0.2)
}
gg_polar <- function(z) {
#set color pallete
col_pal <- c("#ff595e","#ffca3a","#8ac926","#1982c4","#6a4c93")
names(col_pal) <- c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10))
z <- z
z <- na.omit(z)
x <- factor(x=c(1,2,3,4,5), labels=c(str_wrap("Data Use",10), str_wrap("Data Services",10), str_wrap("Data Products",10), str_wrap("Data Sources",10), str_wrap("Data Infrastructure",10)))
z <- data.frame(x = x, z = z, w = z < 0)
ggplot(z, aes(x = x, y = z, fill = x)) +
geom_col(show.legend = FALSE) +
geom_text(aes(y=0.35,label=scales::percent(z)), nudge_y = .01) +
geom_text(aes(y=0.6,label=x), nudge_y = .01, fontface="bold", font="TT Arial") +
geom_hline(aes(yintercept=0.2)) +
#geom_hline(aes(yintercept=0.4)) +
#geom_hline(aes(yintercept=0.8)) +
geom_vline(aes(xintercept=0.5)) +
geom_vline(aes(xintercept=1.5)) +
geom_vline(aes(xintercept=2.5)) +
geom_vline(aes(xintercept=3.5)) +
geom_vline(aes(xintercept=4.5)) +
scale_fill_manual(
values=col_pal,
na.value='grey'
) +
theme_void() +
expand_limits(y=c(0,1)) +
theme(
axis.text.y = element_blank(),
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family="TT Arial",
size=20,
face="bold",
color="#222222"),
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family="TT Arial",
size=22,
margin=ggplot2::margin(9,0,9,0)),
plot.caption = ggplot2::element_blank(),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family="TT Arial",
size=18,
color="#222222"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks. In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(family="TT Arial",
size=8,
color="#222222"),
axis.text.x = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
#panel.grid.major.x = ggplot2::element_line(color="#cbcbcb"),
panel.grid.major.y = ggplot2::element_blank(),
#Blank background
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
panel.background = ggplot2::element_blank(),
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = ggplot2::element_rect(fill="white"),
strip.text = ggplot2::element_text(size  = 22,  hjust = 0)
) +
coord_polar() +
# annotate('text', x=1.5, y=0.6, label=str_wrap("Line of Equal Weight",10)) +
# geom_curve_polar(aes(x=1.4,y=0.5, xend=1.6,yend=0.2), curvature=-0.2,
#                  arrow = arrow(length = unit(0.03, "npc")))     +      # Zoom in & cut off values
ylim(0, 0.65)
}
load(paste0(raw_dir, '/misc/maps.Rdata'))
standard_crop_wintri <- function() {
l <- list(
left=-12000000, right=16396891,
top=9400000, bottom=-6500000
)
l$xlim <- c(l$left, l$right)
l$ylim <- c(l$bottom, l$top)
l
}
country_metadata <- wbstats::wbcountries()
spi_mapper <- function(data, indicator, title) {
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(iso3c, date, data_available, weights) %>%
right_join(country_metadata) %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))
spi_groups_quantiles <- quantile(map_df$data_available, probs=c(1,2,3,4)/5,na.rm=T)
SPI_map <- map_df %>%
mutate(spi_groups=case_when(
between(data_available, spi_groups_quantiles[4],100) ~ "Top 20%",
between(data_available, spi_groups_quantiles[3],spi_groups_quantiles[4]) ~ "4th Quintile",
between(data_available, spi_groups_quantiles[2],spi_groups_quantiles[3]) ~ "3rd Quintile",
between(data_available, spi_groups_quantiles[1],spi_groups_quantiles[2]) ~ "2nd Quintile",
between(data_available, 0,spi_groups_quantiles[1]) ~ "Bottom 20%"
)) %>%
mutate(spi_groups=factor(spi_groups,
levels=c("Top 20%","4th Quintile","3rd Quintile","2nd Quintile","Bottom 20%" )))
#set color pallete
col_pal <- c("#2ec4b6","#acece7","#f1dc76","#ffbf69","#ff9f1c")
names(col_pal) <- c("Top 20%","4th Quintile","3rd Quintile","2nd Quintile","Bottom 20%" )
p1<-ggplot() +
geom_map(data = SPI_map, aes(map_id = iso3c, fill = spi_groups), map = maps$countries) +
geom_polygon(data = maps$disputed, aes(long, lat, group = group, map_id = id), fill = "grey80") +
geom_polygon(data = maps$lakes, aes(long, lat, group = group), fill = "white")  +
geom_path(data = maps$boundaries,
aes(long, lat, group = group),
color = "white",
size = 0.4,
lineend = maps$boundaries$lineend,
linetype = maps$boundaries$linetype) +
scale_x_continuous(expand = c(0, 0), limits = standard_crop_wintri()$xlim) +
scale_y_continuous(expand = c(0, 0), limits = standard_crop_wintri()$ylim) +
scale_fill_manual(
name='SPI Score',
values=col_pal,
na.value='grey'
) +
coord_equal() +
theme_map(base_size=12) +
labs(
title=str_wrap(title,100),
caption = 'Source: World Bank. Statistical Performance Indicators'
) +
theme(
text=element_text(size=14)
)
print(p1)
}
spi_charts  <- function(data, indicator, title) {
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(country, date, data_available, weights ) %>%
right_join(country_metadata) %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))
#add histogram by region
p2 <- map_df %>%
group_by(region) %>%
filter(region!='Aggregates') %>%
mutate(`SPI Score`=wtd.mean(data_available, weights = weights, na.rm=T),
Label = paste(round(`SPI Score`,0))) %>%
ggplot(aes(x=`SPI Score`, y=region, fill=region)) +
geom_bar(stat="identity",position='dodge') +
geom_text(aes(label=Label)) +
labs(
title=str_wrap(paste(title, 'By Region', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
expand_limits(x=c(0,100)) +
theme_spi() +
theme(
text=element_text(size=14)
)
#by income
income <- c("Low income", "Lower middle income","Upper middle income","High income")
p3 <- map_df %>%
group_by(income) %>%
filter(region!='Aggregates') %>%
mutate(`SPI Score`=wtd.mean(data_available, weights=weights, na.rm=T),
Label = paste(round(`SPI Score`,0))) %>%
ggplot(aes(x=`SPI Score`, y=income, fill=income)) +
geom_bar(stat="identity",position='dodge') +
geom_text(aes(label=Label)) +
labs(
title=str_wrap(paste(title, 'By Income', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
scale_y_discrete(limits = income) +
expand_limits(x=c(0,100)) +
theme_spi() +
theme(
text=element_text(size=14)
)
# #add line graph over time
p4 <- get(data)  %>%
rename(data_available=!! indicator) %>%
# right_join(spi_df_empty) %>%
group_by( date) %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available))) %>%
mutate(`SPI Score`=mean(data_available, na.rm=T),
Label = paste(round(`SPI Score`,0))) %>%
ungroup() %>%
ggplot(aes(y=`SPI Score`, x=date)) +
geom_point() +
geom_line(fill='blue') +
# geom_text_repel(aes(label=Label)) +
labs(
title=str_wrap(paste(title, 'By Date', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.'
) +
expand_limits(y=c(0,100)) +
theme_spi() +
theme(
text=element_text(size=14)
)
(p2 / p3)
}
spi_country_charts  <- function(data, indicator, title) {
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(country, date, data_available, weights ) %>%
right_join(country_metadata) %>%
filter(region!="Aggregates") %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))
spi_groups_quantiles <- quantile(map_df$data_available, probs=c(1,2,3,4)/5,na.rm=T)
SPI_map <- map_df %>%
mutate(spi_groups=case_when(
between(data_available, spi_groups_quantiles[4],100) ~ "Top 20%",
between(data_available, spi_groups_quantiles[3],spi_groups_quantiles[4]) ~ "4th Quintile",
between(data_available, spi_groups_quantiles[2],spi_groups_quantiles[3]) ~ "3rd Quintile",
between(data_available, spi_groups_quantiles[1],spi_groups_quantiles[2]) ~ "2nd Quintile",
between(data_available, 0,spi_groups_quantiles[1]) ~ "Bottom 20%"
)) %>%
mutate(spi_groups=factor(spi_groups,
levels=c("Top 20%","4th Quintile","3rd Quintile","2nd Quintile","Bottom 20%" )))
#set color pallete
col_pal <- c("#2ec4b6","#acece7","#f1dc76","#ffbf69","#ff9f1c")
names(col_pal) <- c("Top 20%","4th Quintile","3rd Quintile","2nd Quintile","Bottom 20%" )
p2_alt <- SPI_map %>%
ungroup() %>%
ggplot(aes(x=data_available, y=region, color=spi_groups)) +
geom_point() +
geom_text(aes(label=country), position=position_jitter(width=.1,height=.4), check_overlap=T) +
labs(
title=str_wrap(paste(title, 'By Country', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
xlab('Score') +
expand_limits(x=c(0,100)) +
scale_color_manual(
name='SPI Score',
values=col_pal,
na.value='grey'
) +
theme_spi() +
theme(legend.position = 'top',
text=element_text(size=14)
)
p2_alt
}
income_charts <- function(data, indicator, title) {
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(country, date, data_available, weights ) %>%
right_join(country_metadata) %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))
income <- c("Low income", "Lower middle income","Upper middle income","High income")
p2_alt3 <- map_df %>%
ungroup() %>%
filter(region!='Aggregates') %>%
mutate(`SPI Score`=(data_available),
Label = paste(round(`SPI Score`,0))) %>%
ggplot(aes(x=`SPI Score`, y=income, color=income)) +
geom_point() +
geom_text(aes(label=country), position=position_jitter(width=.1,height=.4), check_overlap=T) +
labs(
title=str_wrap(paste(title, 'By Income', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
scale_y_discrete(limits = income) +
expand_limits(x=c(0,100)) +
theme_spi() +
theme(legend.position = 'top',
text=element_text(size=14) )
p2_alt3
}
spi_income_aggregates <- function(data, indicator, title) {
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(country, date, data_available, weights ) %>%
right_join(country_metadata) %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))
income <- c("Low income", "Lower middle income","Upper middle income","High income")
p3 <- map_df %>%
group_by(income) %>%
filter(region!='Aggregates') %>%
mutate(`SPI Score`=wtd.mean(data_available, weights=weights, na.rm=T),
Label = paste(round(`SPI Score`,0))) %>%
ggplot(aes(x=`SPI Score`, y=income, fill=income)) +
geom_bar(stat="identity",position='dodge') +
geom_text(aes(label=Label)) +
labs(
title=str_wrap(paste(title, 'By Income', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
scale_y_discrete(limits = income) +
expand_limits(x=c(0,100)) +
theme_spi() +
theme(
text=element_text(size=14)
)
p3
}
lending_charts <- function(data, indicator, title) {
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(country, date, data_available, weights ) %>%
right_join(country_metadata) %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))
lending_list <- c("Not classified", "IBRD", "Blend", "IDA" )
p2_alt3 <- map_df %>%
ungroup() %>%
filter(region!='Aggregates') %>%
mutate(`SPI Score`=(data_available),
Label = paste(round(`SPI Score`,0))) %>%
ggplot(aes(x=`SPI Score`, y=lending, color=lending)) +
geom_point() +
geom_text(aes(label=country), position=position_jitter(width=.1,height=.4), check_overlap=T) +
labs(
title=str_wrap(paste(title, 'By Lending Status', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
scale_y_discrete(limits = lending_list) +
expand_limits(x=c(0,100)) +
theme_spi() +
theme(legend.position = 'top',
text=element_text(size=14) )
p2_alt3
}
lending_chart_aggregate <- function(data, indicator, title) {
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(country, date, data_available, weights ) %>%
right_join(country_metadata) %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))
lending_list <- c("Not classified", "IBRD", "Blend", "IDA" )
p2_alt3 <- map_df %>%
group_by(lending) %>%
filter(region!='Aggregates') %>%
mutate(`SPI Score`=wtd.mean(data_available, weights = weights, na.rm=T),
Label = paste(round(`SPI Score`,0))) %>%
ggplot(aes(x=`SPI Score`, y=lending, fill=lending)) +
geom_bar(stat="identity",position='dodge') +
geom_text(aes(label=Label)) +
labs(
title=str_wrap(paste(title, 'By Lending Status', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
scale_y_discrete(limits = lending_list) +
expand_limits(x=c(0,100)) +
theme_spi() +
theme(legend.position = 'top',
text=element_text(size=14) )
p2_alt3
}
fcs_charts <- function(data, indicator, title) {
#FY21 Fragile and conflict-affected situations (http://pubdocs.worldbank.org/en/888211594267968803/FCSList-FY21.pdf)
high_intensity_conflict <- c('Afghanistan', 'Libya', 'Somalia', 'Syrian Arab Republic' )
medium_intensity_conflict <- c('Burkina Faso', 'Cameroon','Central African Republic', 'Chad', 'Congo, Dem. Rep.',
'Iraq','Mali','Mozambique','Myanmar','Niger','Nigeria','South Sudan','Yemen, Rep.')
high_institutional_social_fragility <- c('Burundi','Congo, Rep.','Eritrea','Gambia, The','Guinea-Bissau',
'Haiti','Kosovo','Lao PDR','Lebanon','Liberia','Papua New Guinea',
'Sudan','Venezuela, RB','West Bank and Gaza','Zimbabwe')
small_states <- c('Comoros','Kiribati','Marshall Islands','Micronesia, Fed. Sts.','Solomon Islands','Timor-Leste','Tuvalu')
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
mutate(fcs=case_when( #create indicators for Fragile and Conflict-affected Situations
country %in% high_intensity_conflict ~ "FCS country",
country %in% medium_intensity_conflict ~ "FCS country",
country %in% high_institutional_social_fragility ~ "FCS country",
country %in% small_states ~ "FCS country",
TRUE ~ "Non-FCS country"
)) %>%
mutate(fcs_detail=case_when( #create indicators for Fragile and Conflict-affected Situations
country %in% high_intensity_conflict ~ "High-Intensity Conflict",
country %in% medium_intensity_conflict ~ "Medium-Intensity Conflict",
country %in% high_institutional_social_fragility ~ "High Institutional & Social Fragility",
country %in% small_states ~ "Small States",
TRUE ~ "Non-FCS country"
)) %>%
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(country,fcs,fcs_detail, date, data_available, weights ) %>%

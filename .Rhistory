labs(
title=str_wrap(paste(title, 'By Lending Status', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
scale_y_discrete(limits = lending_list) +
expand_limits(x=c(0,100)) +
theme_spi() +
theme(legend.position = 'top',
text=element_text(size=14) )
p2_alt3
}
lending_chart_aggregate <- function(data, indicator, title) {
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(country, date, data_available, weights ) %>%
right_join(country_metadata) %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))
lending_list <- c("Not classified", "IBRD", "Blend", "IDA" )
p2_alt3 <- map_df %>%
group_by(lending) %>%
filter(region!='Aggregates') %>%
mutate(`SPI Score`=wtd.mean(data_available, weights = weights, na.rm=T),
Label = paste(round(`SPI Score`,0))) %>%
ggplot(aes(x=`SPI Score`, y=lending, fill=lending)) +
geom_bar(stat="identity",position='dodge') +
geom_text(aes(label=Label)) +
labs(
title=str_wrap(paste(title, 'By Lending Status', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
scale_y_discrete(limits = lending_list) +
expand_limits(x=c(0,100)) +
theme_spi() +
theme(legend.position = 'top',
text=element_text(size=14) )
p2_alt3
}
fcs_charts <- function(data, indicator, title) {
#FY21 Fragile and conflict-affected situations (http://pubdocs.worldbank.org/en/888211594267968803/FCSList-FY21.pdf)
high_intensity_conflict <- c('Afghanistan', 'Libya', 'Somalia', 'Syrian Arab Republic' )
medium_intensity_conflict <- c('Burkina Faso', 'Cameroon','Central African Republic', 'Chad', 'Congo, Dem. Rep.',
'Iraq','Mali','Mozambique','Myanmar','Niger','Nigeria','South Sudan','Yemen, Rep.')
high_institutional_social_fragility <- c('Burundi','Congo, Rep.','Eritrea','Gambia, The','Guinea-Bissau',
'Haiti','Kosovo','Lao PDR','Lebanon','Liberia','Papua New Guinea',
'Sudan','Venezuela, RB','West Bank and Gaza','Zimbabwe')
small_states <- c('Comoros','Kiribati','Marshall Islands','Micronesia, Fed. Sts.','Solomon Islands','Timor-Leste','Tuvalu')
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
mutate(fcs=case_when( #create indicators for Fragile and Conflict-affected Situations
country %in% high_intensity_conflict ~ "FCS country",
country %in% medium_intensity_conflict ~ "FCS country",
country %in% high_institutional_social_fragility ~ "FCS country",
country %in% small_states ~ "FCS country",
TRUE ~ "Non-FCS country"
)) %>%
mutate(fcs_detail=case_when( #create indicators for Fragile and Conflict-affected Situations
country %in% high_intensity_conflict ~ "High-Intensity Conflict",
country %in% medium_intensity_conflict ~ "Medium-Intensity Conflict",
country %in% high_institutional_social_fragility ~ "High Institutional & Social Fragility",
country %in% small_states ~ "Small States",
TRUE ~ "Non-FCS country"
)) %>%
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(country,fcs,fcs_detail, date, data_available, weights ) %>%
right_join(country_metadata) %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))
fcs_list <- c("High-Intensity Conflict", "Medium-Intensity Conflict","High Institutional & Social Fragility","Small States","Non-FCS country")
fcs_list <- c("FCS country","Non-FCS country")
p2_alt2 <- map_df %>%
ungroup() %>%
filter(region!='Aggregates') %>%
mutate(`SPI Score`=(data_available),
Label = paste(round(`SPI Score`,0))) %>%
ggplot(aes(x=`SPI Score`, y=fcs, color=fcs)) +
geom_point() +
geom_text(aes(label=country), position=position_jitter(width=.1,height=.4), check_overlap=T) +
labs(
title=str_wrap(paste(title, 'By Fragile and Conflict-affected Situations (FCS)', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
scale_y_discrete(limits = fcs_list) +
expand_limits(x=c(0,100)) +
theme_spi() +
theme(legend.position = 'top',
text=element_text(size=14))
p2_alt2
}
fcs_chart_aggregate <- function(data, indicator, title) {
#FY21 Fragile and conflict-affected situations (http://pubdocs.worldbank.org/en/888211594267968803/FCSList-FY21.pdf)
high_intensity_conflict <- c('Afghanistan', 'Libya', 'Somalia', 'Syrian Arab Republic' )
medium_intensity_conflict <- c('Burkina Faso', 'Cameroon','Central African Republic', 'Chad', 'Congo, Dem. Rep.',
'Iraq','Mali','Mozambique','Myanmar','Niger','Nigeria','South Sudan','Yemen, Rep.')
high_institutional_social_fragility <- c('Burundi','Congo, Rep.','Eritrea','Gambia, The','Guinea-Bissau',
'Haiti','Kosovo','Lao PDR','Lebanon','Liberia','Papua New Guinea',
'Sudan','Venezuela, RB','West Bank and Gaza','Zimbabwe')
small_states <- c('Comoros','Kiribati','Marshall Islands','Micronesia, Fed. Sts.','Solomon Islands','Timor-Leste','Tuvalu')
indicator<-indicator
map_df <- get(data) %>%
filter(date==max(date, na.rm=T)) %>%
filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data.
mutate(fcs=case_when( #create indicators for Fragile and Conflict-affected Situations
country %in% high_intensity_conflict ~ "FCS country",
country %in% medium_intensity_conflict ~ "FCS country",
country %in% high_institutional_social_fragility ~ "FCS country",
country %in% small_states ~ "FCS country",
TRUE ~ "Non-FCS country"
)) %>%
mutate(fcs_detail=case_when( #create indicators for Fragile and Conflict-affected Situations
country %in% high_intensity_conflict ~ "High-Intensity Conflict",
country %in% medium_intensity_conflict ~ "Medium-Intensity Conflict",
country %in% high_institutional_social_fragility ~ "High Institutional & Social Fragility",
country %in% small_states ~ "Small States",
TRUE ~ "Non-FCS country"
)) %>%
group_by( country) %>%
#summarise(across(!! indicator,last)) %>%
rename(data_available=!! indicator) %>%
select(country,fcs,fcs_detail, date, data_available, weights ) %>%
right_join(country_metadata) %>%
mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))
fcs_list <- c("High-Intensity Conflict", "Medium-Intensity Conflict","High Institutional & Social Fragility","Small States","Non-FCS country")
fcs_list <- c("FCS country","Non-FCS country")
p2_alt2 <- map_df %>%
group_by(fcs) %>%
filter(region!='Aggregates') %>%
mutate(`SPI Score`=wtd.mean(data_available, weights = weights, na.rm=T),
Label = paste(round(`SPI Score`,0))) %>%
ggplot(aes(x=`SPI Score`, y=fcs, fill=fcs)) +
geom_bar(stat="identity",position='dodge') +
geom_text(aes(label=Label)) +
labs(
title=str_wrap(paste(title, 'By Fragile and Conflict-affected Situations (FCS)', sep=" - "),100),
caption = 'Source: World Bank. Statistical Performance Indicators.',
subtitle= 'Based on data for 2022 or the latest year available'
) +
scale_y_discrete(limits = fcs_list) +
expand_limits(x=c(0,100)) +
theme_spi() +
theme(legend.position = 'top',
text=element_text(size=14))
p2_alt2
}
FitFlextableToPage <- function(ft, pgwidth = 6){
ft_out <- ft %>% autofit()
ft_out <- width(ft_out, width = dim(ft_out)$widths*pgwidth /(flextable_dim(ft_out)$widths))
return(ft_out)
}
#add equations to plots
eq_plot_txt <- function(data, inp, var) {
eq <- lm_robust(inp ~ var, data=data, se_type='HC2')
coef <- round(coef(eq),1)
std_err <- round(sqrt(diag(vcov(eq))),1)
r_2<- round(summary(eq)$r.squared,2)
sprintf(" y = %.1f + %.1f x, R<sup>2</sup> = %.2f <br> (%.1f) <span style='color:white'> %s</span> (%.1f) ", coef[1], coef[2], r_2[1], std_err[1],"s", std_err[2])
}
#| label: dataread
#import data specificially about the SPI
spi_index_df <- read_csv(paste(raw_dir, 'SPI_index.csv', sep="/"))
spi_df_final <- read_csv( file = paste(raw_dir, 'SPI_data.csv', sep="/"))
#metadata
metadata <- data.frame(
series = c('SPI.INDEX', 'SPI.INDEX.PIL1', 'SPI.INDEX.PIL2', 'SPI.INDEX.PIL3', 'SPI.INDEX.PIL4', 'SPI.INDEX.PIL5'),
indicator_name = c('SPI Overall Score', 'Pillar 1: Data Use', 'Pillar 2: Data Services', 'Pillar 3: Data Products', 'Pillar 4: Data Sources', 'Pillar 5: Data Infrastructure')
)
SPI_end_date <- spi_index_df %>%
filter(date==end_date) %>%
filter(!is.na(SPI.INDEX) & !is.na(weights)) %>%
mutate(ISO_A3_EH=iso3c)
SPI <- spi_index_df
## Read in data produced in ./02_programs/misc/spi_lit_review_data_preparation.Rmd
fig1_df <- read_csv(paste0(output_dir, "/Figure_1_data.csv"))
#read in data comparing SPI to other indices and SDGs
comparison_df <- read_csv(paste0(output_dir, "/SPI_Index_SDG_comparisons_data_5yr.csv"))
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.height=6,
fig.width = 8,
dev=c("png","tiff")
)
library(data.table)
library(tidyverse)
library(flextable)
library(here)
library(haven)
library(wbstats)
library(readxl)
library(zoo)
#devtools::install_github("worldbank/pipr")
library(pipr) #World Bank PIP package
dir <- here()
raw_dir <- paste0(dir, "/01_raw_data/")
output_dir <- paste(dir, '/03_output/', sep="/")
#weights (either unity (1) or population)
wgt <- 1
end_date=2022
#| label: pipdata
#read in PIP data for Figure 1 from the paper.
#new pipr package already includes survey coverage and comparability measures
pip_df <- get_stats()
# get mean consumption/income per day as of latest year (mean)
welfare_df <- pip_df %>%
filter(survey_coverage %in% c('national')) %>% #keep just the national surveys
filter(reporting_level %in% c('national')) %>% #keep just the national survey
rename(iso3c=country_code,
mean_welfare=mean) %>%
group_by(iso3c) %>%
filter(year==max(year)) %>%
#keep consumption survey for Poland, Haiti, Angola, PHL
filter(!(iso3c=="POL" & welfare_type=='income'))    %>%
filter(!(iso3c=="HTI" & welfare_type=='income'))    %>%
filter(!(iso3c=="AGO" & welfare_type=='income'))    %>%
filter(!(iso3c=="PHL" & welfare_type=='income'))    %>%
select(iso3c, mean_welfare)
#reshape the data
pip_df <- pip_df %>%
filter(survey_coverage %in% c('national')) %>% #keep just the national surveys
filter(reporting_level %in% c('national')) %>% #keep just the national surveys
filter(between(year, 1982, 2022)) %>% #keep data from 1982 to 2022
#aggregate totals by country
rename(iso3c=country_code) %>%
group_by(iso3c) %>%
summarise(
number_surveys=n(),
avg_mean_welfare = mean(mean)
) #get counts of the number of surveys by country
#add welfare
pip_df <- pip_df %>%
left_join(welfare_df)
#save
write_excel_csv(pip_df, paste0(output_dir, "/Figure_1_data.csv"))
#add in population
pop_df <- wbstats::wb_data(country="all",
indicator='SP.POP.TOTL',
start_date=2004,
end_date=end_date) %>%
mutate(date=as.numeric(date)) %>%
mutate(population=SP.POP.TOTL) %>%
select(country, date, population)
#import data
spi_index_df <- read_csv(paste(raw_dir, 'SPI_index.csv', sep="/")) %>%
left_join(pop_df)
spi_df_final <- read_csv( file = paste(raw_dir, 'SPI_data.csv', sep="/")) %>%
left_join(pop_df)
#metadata
metadata <- data.frame(
series = c('SPI.INDEX', 'SPI.INDEX.PIL1', 'SPI.INDEX.PIL2', 'SPI.INDEX.PIL3', 'SPI.INDEX.PIL4', 'SPI.INDEX.PIL5'),
indicator_name = c('SPI Overall Score', 'Pillar 1: Data Use', 'Pillar 2: Data Services', 'Pillar 3: Data Products', 'Pillar 4: Data Sources', 'Pillar 5: Data Infrastructure')
)
#get list of country info
country_list <- wbstats::wb_countries()
write_excel_csv(country_list, paste0(raw_dir, "country_metadata.csv"))
SPI_end_date <- spi_index_df %>%
filter(date==end_date) %>%
filter(!is.na(SPI.INDEX) & !is.na(weights)) %>%
mutate(ISO_A3_EH=iso3c)
SPI <- spi_index_df
#read in TopoJSON from World Bank
#countries <- geojsonio::geojson_read("WB_countries_Admin0_lowres.geojson",
#                                     what = "sp")
span <- c(2004:end_date)
#produce an empty dataset with the right number of rows (country X year observations)
spi_df_empty <- bind_rows(replicate(length(span), wbstats::wbcountries(), simplify = FALSE), .id='date') %>%
mutate(date=as.numeric(date)+span[1]-1) %>%
filter(region!="Aggregates") # take out the aggregates (LAC, SAR, etc)
start_date=2010
correlates_df <- wb_data(country="all",
indicator=c('SI.POV.DDAY', 'SI.POV.GINI'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('SI.POV.DDAY', 'SI.POV.GINI'), .direction = 'downup') %>%
filter(date==end_date)
ge_df <- wb_data(country="all",
indicator=c('GE.EST'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('GE.EST'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c, date, GE.EST)
gdp_df <- wb_data(country="all",
indicator=c('NY.GDP.PCAP.KD'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('NY.GDP.PCAP.KD'), .direction = 'downup') %>%
filter(date==end_date) %>%  select(iso3c, date, NY.GDP.PCAP.KD)
hci_df <- wb_data(country="all",
indicator=c('HD.HCI.OVRL'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('HD.HCI.OVRL'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c, HD.HCI.OVRL)
undernourish_df <- wb_data(country="all",
indicator=c('SN.ITK.DEFC.ZS'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('SN.ITK.DEFC.ZS'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c, date, SN.ITK.DEFC.ZS)
mmt_df <-  wb_data(country="all",
indicator=c('SH.STA.MMRT'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('SH.STA.MMRT'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c,  SH.STA.MMRT)
lpov_df <-  wb_data(country="all",
indicator=c('SE.LPV.PRIM'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('SE.LPV.PRIM'), .direction = 'downup') %>%
filter(date==end_date)  %>%
select(iso3c, date, SE.LPV.PRIM)
wbl_df <- wb_data(country="all",
indicator=c('SG.LAW.INDX'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('SG.LAW.INDX'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c, date, SG.LAW.INDX)
safely_df <- wb_data(country="all",
indicator=c('SH.H2O.SMDW.ZS'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('SH.H2O.SMDW.ZS'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c, date, SH.H2O.SMDW.ZS)
elect_df <- wb_data(country="all",
indicator=c('EG.ELC.ACCS.ZS'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('EG.ELC.ACCS.ZS'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c, date, EG.ELC.ACCS.ZS)
manuf_df <- wb_data(country="all",
indicator=c('NV.IND.MANF.ZS'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('NV.IND.MANF.ZS'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c, date, NV.IND.MANF.ZS)
slums_df <- wb_data(country="all",
indicator=c('EN.POP.SLUM.UR.ZS'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('EN.POP.SLUM.UR.ZS'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c,  EN.POP.SLUM.UR.ZS)
ff_sub_df <- read_csv(paste0(raw_dir, "/Subsidies.csv")) %>%
rename(iso3c=code)
ghg_df <- wb_data(country="all",
indicator=c('EN.ATM.GHGT.KT.CE'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
right_join(spi_df_empty) %>%
fill(c('EN.ATM.GHGT.KT.CE'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c,  EN.ATM.GHGT.KT.CE)
protected_df <- wb_data(country="all",
indicator=c('ER.MRN.PTMR.ZS','ER.LND.PTLD.ZS'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
fill(c('ER.MRN.PTMR.ZS','ER.LND.PTLD.ZS'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c, date, ER.MRN.PTMR.ZS,ER.LND.PTLD.ZS)
debt_df <- wb_data(country="all",
indicator=c('DT.TDS.DECT.EX.ZS'),
start_date=start_date,
end_date=end_date,
) %>% # fill forward
group_by(country) %>%
fill(c('DT.TDS.DECT.EX.ZS'), .direction = 'downup') %>%
filter(date==end_date) %>%
select(iso3c, date, DT.TDS.DECT.EX.ZS)
#bring in Sachs SDG index
#https://dashboards.sdgindex.org/explorer
# accessed on 2023-07-20
sdg_index <- read_excel(path=paste0(raw_dir, "/SDR2023-data.xlsx"),
sheet='Backdated SDG Index'
) %>%
transmute(iso3c=`Country Code ISO3`,
date=year,
sdg_index_score=`SDG Index Score`)
#bring it all together
correlates_df_end_date <- correlates_df %>%
left_join(ge_df) %>%
left_join(gdp_df) %>%
left_join(hci_df) %>%
left_join(undernourish_df) %>%
left_join(mmt_df) %>%
left_join(lpov_df) %>%
left_join(wbl_df) %>%
left_join(safely_df) %>%
left_join(elect_df) %>%
left_join(manuf_df) %>%
left_join(slums_df) %>%
left_join(ff_sub_df) %>%
left_join(ghg_df) %>%
left_join(protected_df) %>%
left_join(debt_df) %>%
left_join(sdg_index) %>%
filter(region!="Aggregates") %>%
select(iso3c, c('SI.POV.DDAY', 'SI.POV.GINI','GE.EST','NY.GDP.PCAP.KD','HD.HCI.OVRL','SN.ITK.DEFC.ZS','SH.STA.MMRT','SE.LPV.PRIM','SG.LAW.INDX','SH.H2O.SMDW.ZS',"EG.ELC.ACCS.ZS",'NV.IND.MANF.ZS','EN.POP.SLUM.UR.ZS','subsidies','EN.ATM.GHGT.KT.CE','ER.MRN.PTMR.ZS','ER.LND.PTLD.ZS','DT.TDS.DECT.EX.ZS', 'sdg_index_score'))
sdgs <- c('SI.POV.DDAY','SN.ITK.DEFC.ZS','SH.STA.MMRT','SE.LPV.PRIM','SG.LAW.INDX',
'SH.H2O.SMDW.ZS','EG.ELC.ACCS.ZS','NY.GDP.PCAP.KD','NV.IND.MANF.ZS','SI.POV.GINI',
'EN.POP.SLUM.UR.ZS','subsidies','EN.ATM.GHGT.KT.CE','ER.MRN.PTMR.ZS','ER.LND.PTLD.ZS'
,'GE.EST','DT.TDS.DECT.EX.ZS', 'sdg_index_score')
sdg_names <- c('SDG 1: Extreme Poverty','SDG 2: Undernourishment','SDG 3: Maternal Mortality','SDG 4: Learning Poverty','SDG 5: Women, Business, Law Index',
'SDG 6: Safely Managed Water','SDG 7: Access to Electricity','SDG 8: GDP per capita (2015 constant $)','SDG 9: Manufacturing value added (% of GDP)','SDG 10: Gini Index',
'SDG 11: Population in Slums','SDG 12: Fossil Fuel Subsidies (% of GDP)','SDG 13: Greenhouse Gas Emissions','SDG 14: Marine protected areas','SDG 15: Terrestrial Protected Areas','SDG 16: Government Effectiveness','SDG 17: Total Debt Service', 'SDR: SDG Index Overall Score')
#pull SCI values
sci_df <- read_excel(paste0(raw_dir, "Statistical_Capacity_Indicators.xlsx")) %>%
mutate(YR2004=as.numeric(YR2004),
iso3c=`Country Code`) %>%
filter(`Series Code`=="IQ.SCI.OVRL") %>%
select(-`Country Code`, -`Series Code`) %>%
pivot_longer(
cols=c(YR2004:YR2020),
names_to='YR',
values_to='SCI'
) %>%
mutate(date=str_remove_all(YR,"YR"),
date=as.numeric(date)) %>%
select(iso3c, date, SCI)
# onvert it to a data frame.
sci_df <- sci_df %>%
left_join(spi_df_empty) %>% #add on country metadata
filter(!is.na(income)) %>%
select(iso3c, date, SCI  ) %>%
group_by(date) %>%
arrange(-SCI) %>%
mutate(SCI_rank=rank(-SCI),
SCI_rank=if_else(is.na(SCI),as.numeric(NA),SCI_rank))
#write to csv
write_excel_csv(sci_df, paste0(output_dir, "/SCI_formatted_data.csv"))
#read in ODIN data
for (i in c(2015,2016,2017,2018,2020,2022)) {
temp <- read_csv(paste(raw_dir, '/','ODIN_',i,'.csv', sep=""))  %>%
as_tibble(.name_repair = 'universal') %>%
mutate(date=i) %>%
filter(Data.categories=='All Categories') %>%
select(-Year)
assign(paste('odin_df',i,sep="_"), temp)
}
#bind different years together
odin_df <- bind_rows(odin_df_2015, odin_df_2016, odin_df_2017, odin_df_2018, odin_df_2020, odin_df_2022)
odin_df <- odin_df %>%
select(Country.Code, date, Overall.score) %>%
rename(iso3c=Country.Code,
ODIN_score=Overall.score) %>%
group_by(date) %>%
arrange(-ODIN_score) %>%
mutate(ODIN_rank=rank(-ODIN_score, na.last='NA')) %>%
right_join(spi_df_empty) %>%
arrange(country, date) %>%
group_by(country) %>%
mutate(across(starts_with("ODIN"), na.locf, na.rm=FALSE)) %>%
left_join(wbstats::wb_countries()) %>%
select(iso3c, date, starts_with("ODIN"))

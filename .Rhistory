"SPI"=15,
"SCI"=6,
"ODIN" = 17,
"ODB" = 18,
"GDB" = 19
)
) +
xlab("") +
ylab("") +
scale_x_discrete(labels=scales::wrap_format(30)) +
theme_spi() +
guides(
fill=guide_legend(' '),
color=guide_legend(' '),
shape=guide_legend(' ')
) +
theme(axis.text.y=element_text(size=11),
legend.text = element_text(size=11),
legend.position = 'top')
#arrange table and format
index_disp <- spi_index_df %>%
ungroup() %>%
filter(date==end_date) %>%
arrange(-SPI.INDEX) %>%
mutate(across(starts_with('SPI.INDEX'),~1*.),
across(starts_with('SPI.INDEX'),round,1)) %>%
select(country, iso3c, date, starts_with('SPI.INDEX'))
#colors
col_palette <- c("#2ec4b6", "#acece7", "#f1dc76",  "#ffbf69","#ff9f1c"   )
col_palette2 <- c("#2ec4b6",  "#f1dc76", "#ff9f1c" )
#make the table
index_tab <- index_disp %>%
filter(date==end_date) %>%
select(country, SPI.INDEX,SPI.INDEX.PIL1,SPI.INDEX.PIL2,SPI.INDEX.PIL3,SPI.INDEX.PIL4,SPI.INDEX.PIL5)
#calculate the breaks for the color coding
brks <- quantile(index_tab$SPI.INDEX, probs=c(1,2,3,4)/5,na.rm=T)
brks <- append(0,brks)
brks <- append(brks,100)
brks1 <- quantile(index_tab$SPI.INDEX.PIL1, probs=c(1,2,3,4)/5,na.rm=T)
brks1 <- append(0,brks1)
if (max(brks1)<100) brks1 <- append(brks1,100)
brks2 <- quantile(index_tab$SPI.INDEX.PIL2, probs=c(1,2,3,4)/5,na.rm=T)
brks2 <- append(0,brks2)
if (max(brks2)<100) brks2 <- append(brks2,100)
brks3 <- quantile(index_tab$SPI.INDEX.PIL3, probs=c(1,2,3,4)/5,na.rm=T)
brks3 <- append(0,brks3)
if (max(brks3)<100) brks3 <- append(brks3,100)
brks4 <- quantile(index_tab$SPI.INDEX.PIL4, probs=c(1,2,3,4)/5,na.rm=T)
brks4 <- append(0,brks4)
if (max(brks4)<100) brks4 <- append(brks4,100)
brks5 <- quantile(index_tab$SPI.INDEX.PIL5, probs=c(1,2,3,4)/5,na.rm=T)
brks5 <- append(0,brks5)
if (max(brks5)<100) brks5 <- append(brks5,100)
#make nice looking
index_tab <- index_tab %>%
flextable() %>%
# add_header_lines('SPI overall score in end_date and Pillar Scores.') %>%
set_header_labels(values=list(
country="Country",
SPI.INDEX="SPI overall score",
SPI.INDEX.PIL1="Pillar 1: Data Use",
SPI.INDEX.PIL2="Pillar 2: Data Services",
SPI.INDEX.PIL3="Pillar 3: Data Products ",
SPI.INDEX.PIL4="Pillar 4: Data Sources",
SPI.INDEX.PIL5="Pillar 5: Data Infrastructure"
)) %>%
bg(j = c('SPI.INDEX'),
bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks, reverse=TRUE)) %>%
bg(j = c('SPI.INDEX.PIL1'),
bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks1, reverse=TRUE)) %>%
bg(j = c('SPI.INDEX.PIL2'),
bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks2, reverse=TRUE)) %>%
bg(j = c('SPI.INDEX.PIL3'),
bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks3, reverse=TRUE)) %>%
bg(j = c('SPI.INDEX.PIL4'),
bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks4, reverse=TRUE)) %>%
bg(j = c('SPI.INDEX.PIL5'),
bg = scales::col_bin(col_palette, domain=c(0,100), bins=brks5, reverse=TRUE))
FitFlextableToPage(index_tab)
#get correlations with pvalues
index_cor_full <- comparison_df %>%
select(c('gdb','odb','ODIN_score', 'SCI', 'SPI.INDEX' ),sdgs) %>%
rename(
SPI=SPI.INDEX,
SCI=SCI,
ODIN=ODIN_score,
ODB=odb,
GDB=gdb
) %>%
as.matrix() %>%
rcorr()
#get just pearon correlation
index_cor <- index_cor_full$r
index_cor <- index_cor[6:23,1:5]
#get correlation between indices
index_between_cor <- index_cor_full$r
index_between_cor <- index_between_cor[1:5,1:5]
#get Ns
index_n <- index_cor_full$n
index_n <- index_n[6:23,1:5]
#round
index_cor <- round(index_cor,2)
#color
index_col <- index_cor
index_col[abs(index_cor)>=0.5] <- "#fcca46"
index_col[abs(index_cor)>=0.65] <- "#a1c181"
index_col[abs(index_cor)>=0.8] <- "#619b8a"
index_col[abs(index_cor)<0.5] <- "white"
#get statistical significance
index_sig <- index_cor_full$P
index_sig <- index_sig[6:23,1:5]
rownames(index_cor) <- sdg_names
rownames(index_sig) <- sdg_names
tab <- as_tibble(cbind(index_cor, index_sig,var=sdg_names), .name_repair="universal") %>%
mutate(across(c(1:10), as.numeric)) %>%
mutate(SPI=case_when(
between(SPI...10,0.05,0.1) ~   paste0(SPI...5,"*"),
between(SPI...10,0.01,0.5) ~  paste0(SPI...5,"**"),
between(SPI...10,0.0,0.01) ~ paste0(SPI...5,"***"),
is.na(SPI...5) ~ "",
TRUE ~      paste0(SPI...5,"")
),
SCI=case_when(
between(SCI...9,0.05,0.1) ~   paste0(SCI...4,"*"),
between(SCI...9,0.01,0.5) ~  paste0(SCI...4,"**"),
between(SCI...9,0.0,0.01) ~ paste0(SCI...4,"***"),
is.na(SCI...4) ~ "",
TRUE ~      paste0(SCI...4,"")
),
ODIN=case_when(
between(ODIN...8,0.05,0.1) ~   paste0(ODIN...3,"*"),
between(ODIN...8,0.01,0.5) ~  paste0(ODIN...3,"**"),
between(ODIN...8,0.0,0.01) ~ paste0(ODIN...3,"***"),
is.na(ODIN...3) ~ "",
TRUE ~      paste0(ODIN...3,"")
),
ODB=case_when(
between(ODB...7,0.05,0.1) ~   paste0(ODB...2,"*"),
between(ODB...7,0.01,0.5) ~  paste0(ODB...2,"**"),
between(ODB...7,0.0,0.01) ~ paste0(ODB...2,"***"),
is.na(ODB...2) ~ "",
TRUE ~      paste0(ODB...2,"")
),
GDB=case_when(
between(GDB...6,0.05,0.1) ~   paste0(GDB...1,"*"),
between(GDB...6,0.01,0.5) ~  paste0(GDB...1,"**"),
between(GDB...6,0.0,0.01) ~ paste0(GDB...1,"***"),
is.na(GDB...1) ~ "",
TRUE ~      paste0(GDB...1,"")
)
) %>% select( var,GDB, ODB, ODIN, SCI, SPI )
# Create a correlation matrix
cor_matrix <- index_cor
# Function to calculate p-value from z-score
p_value_from_z <- function(z) {
2 * (1 - pnorm(abs(z)))
}
# Iterate through the correlation matrix
n <- nrow(cor_matrix)
c <- ncol(cor_matrix)
p_values <- matrix(NA, n, c*c)  # Store p-values for each pairwise comparison
for (i in 1:n) {
for (j in 1:c) {
for (k in 1:c) {
row1 <- i
col1 <- j
correlation_1 <- cor_matrix[row1,col1]
row2 <- i
col2 <- k
correlation_2 <- cor_matrix[row2, col2]
#between correlation
correlation_between <- index_between_cor[col1,col2]
# Step 3: Calculate standard errors of z-transformed correlations
n_1 <- index_n[row1,col1]  # Sample size for correlation_1
n_2 <- index_n[row2,col2]  # Sample size for correlation_2
n_min <- min(n_1,n_2)
# Step 4: Perform z-test for the difference between z-scores. pearson1898: Pearson and Filonâ€™s [7] z
kfactor = correlation_between*(1-correlation_1^2-correlation_2^2)-0.5*(correlation_1*correlation_2)*(1-correlation_1^2-correlation_2^2-correlation_between^2)
z_diff <- sqrt(n_min)*(correlation_1-correlation_2)/sqrt((1-correlation_1^2)^2+(1-correlation_2^2)^2-2*kfactor)
if (is.na(z_diff)) {
z_diff=0
}
# Calculate p-value
pos <- (j-1)*5+k
pval <- p_value_from_z(z_diff)
if (k==1 & pval > 0.05)  {
txt <- "GDB"
} else if (k==2 & pval > 0.05) {
txt <- "ODB"
} else if (k==3  & pval > 0.05) {
txt <- "ODIN"
} else if (k==4  & pval > 0.05) {
txt <- "SCI"
} else if (k==5  & pval > 0.05) {
txt <- "SPI"
} else {
txt <- ""
}
p_values[i, pos] <- txt
}
}
}
#format as table
pval_df <- as.data.frame(p_values) %>%
cbind(SDG=sdg_names) %>%
select(-V1, -V7, -V13, -V19, -V25) %>%
select(SDG, everything())
## COmbined table
text_tab <- pval_df %>%
mutate(rownum=row_number(), font_small=TRUE) %>%
mutate(GDB_text=paste(V2, V3, V4, V5, sep=", "),
ODB_text=paste(V6, V8, V9, V10, sep=", "),
ODIN_text=paste(V11, V12, V14, V15, sep=", "),
SCI_text=paste(V16, V17, V18, V20, sep=", "),
SPI_text=paste(V21, V22, V23, V24, sep=", ")) %>%
mutate(across(ends_with('_text'), ~gsub(", ,","",.))) %>%
select(SDG, ends_with('_text'))
comb_tab <- tab %>%
rename(SDG=var) %>%
mutate(rownum=row_number()) %>%
left_join(text_tab) %>%
arrange(rownum) %>%
select(SDG, starts_with("GDB"), starts_with("ODB"),
starts_with("ODIN"), starts_with("SCI"), starts_with("SPI"))
flextable(comb_tab) %>%
set_header_labels(
SDG="SDG",
GDB="GDB", GDB_text="GDB",
ODB="ODB", ODB_text="ODB",
ODIN="ODIN", ODIN_text="ODIN",
SCI="SCI", SCI_text="SCI",
SPI="SPI", SPI_text="SPI"
) %>%
merge_at(i=1,j=2:3, part = 'header') %>%
merge_at(i=1,j=4:5, part = 'header') %>%
merge_at(i=1,j=6:7, part = 'header') %>%
merge_at(i=1,j=8:9, part = 'header') %>%
merge_at(i=1,j=10:11, part = 'header') %>%
fontsize(j = c(3,5,7,9,11), size = 6, part = "body") %>%
fontsize(j = c(1,2,4,6,8,10), size = 8, part = "body") %>%
vline(j=1) %>%
vline(j=3) %>%
vline(j=5) %>%
vline(j=7) %>%
vline(j=9) %>%
align(i=1, part="header", align="center") %>%
autofit()
#get correlations with pvalues
index_cor_full <- comparison_df %>%
select(c('gdb','odb','ODIN_score', 'SCI', 'SPI.INDEX' ),devindex) %>%
rename(
SPI=SPI.INDEX,
SCI=SCI,
ODIN=ODIN_score,
ODB=odb,
GDB=gdb
) %>%
as.matrix() %>%
rcorr()
#get just pearon correlation
index_cor <- index_cor_full$r
index_cor <- index_cor[6:11,1:5]
#get correlation between indices
index_between_cor <- index_cor_full$r
index_between_cor <- index_between_cor[1:5,1:5]
#get Ns
index_n <- index_cor_full$n
index_n <- index_n[6:11,1:5]
#round
index_cor <- round(index_cor,2)
#color
index_col <- index_cor
index_col[abs(index_cor)>=0.5] <- "#fcca46"
index_col[abs(index_cor)>=0.65] <- "#a1c181"
index_col[abs(index_cor)>=0.8] <- "#619b8a"
index_col[abs(index_cor)<0.5] <- "white"
#get statistical significance
index_sig <- index_cor_full$P
index_sig <- index_sig[6:11,1:5]
rownames(index_cor) <- devindex_names
rownames(index_sig) <- devindex_names
tab <- as_tibble(cbind(index_cor, index_sig,var=devindex_names), .name_repair="universal") %>%
mutate(across(c(1:10), as.numeric)) %>%
mutate(SPI=case_when(
between(SPI...10,0.05,0.1) ~   paste0(SPI...5,"*"),
between(SPI...10,0.01,0.5) ~  paste0(SPI...5,"**"),
between(SPI...10,0.0,0.01) ~ paste0(SPI...5,"***"),
is.na(SPI...5) ~ "",
TRUE ~      paste0(SPI...5,"")
),
SCI=case_when(
between(SCI...9,0.05,0.1) ~   paste0(SCI...4,"*"),
between(SCI...9,0.01,0.5) ~  paste0(SCI...4,"**"),
between(SCI...9,0.0,0.01) ~ paste0(SCI...4,"***"),
is.na(SCI...4) ~ "",
TRUE ~      paste0(SCI...4,"")
),
ODIN=case_when(
between(ODIN...8,0.05,0.1) ~   paste0(ODIN...3,"*"),
between(ODIN...8,0.01,0.5) ~  paste0(ODIN...3,"**"),
between(ODIN...8,0.0,0.01) ~ paste0(ODIN...3,"***"),
is.na(ODIN...3) ~ "",
TRUE ~      paste0(ODIN...3,"")
),
ODB=case_when(
between(ODB...7,0.05,0.1) ~   paste0(ODB...2,"*"),
between(ODB...7,0.01,0.5) ~  paste0(ODB...2,"**"),
between(ODB...7,0.0,0.01) ~ paste0(ODB...2,"***"),
is.na(ODB...2) ~ "",
TRUE ~      paste0(ODB...2,"")
),
GDB=case_when(
between(GDB...6,0.05,0.1) ~   paste0(GDB...1,"*"),
between(GDB...6,0.01,0.5) ~  paste0(GDB...1,"**"),
between(GDB...6,0.0,0.01) ~ paste0(GDB...1,"***"),
is.na(GDB...1) ~ "",
TRUE ~      paste0(GDB...1,"")
)
) %>% select( var,GDB, ODB, ODIN, SCI, SPI )
# Create a correlation matrix
cor_matrix <- index_cor
# Function to calculate p-value from z-score
p_value_from_z <- function(z) {
2 * (1 - pnorm(abs(z)))
}
# Iterate through the correlation matrix
n <- nrow(cor_matrix)
c <- ncol(cor_matrix)
p_values <- matrix(NA, n, c*c)  # Store p-values for each pairwise comparison
for (i in 1:n) {
for (j in 1:c) {
for (k in 1:c) {
row1 <- i
col1 <- j
correlation_1 <- cor_matrix[row1,col1]
row2 <- i
col2 <- k
correlation_2 <- cor_matrix[row2, col2]
#between correlation
correlation_between <- index_between_cor[col1,col2]
# Step 3: Calculate standard errors of z-transformed correlations
n_1 <- index_n[row1,col1]  # Sample size for correlation_1
n_2 <- index_n[row2,col2]  # Sample size for correlation_2
n_min <- min(n_1,n_2)
# Step 4: Perform z-test for the difference between z-scores. pearson1898: Pearson and Filonâ€™s [7] z
kfactor = correlation_between*(1-correlation_1^2-correlation_2^2)-0.5*(correlation_1*correlation_2)*(1-correlation_1^2-correlation_2^2-correlation_between^2)
z_diff <- sqrt(n_min)*(correlation_1-correlation_2)/sqrt((1-correlation_1^2)^2+(1-correlation_2^2)^2-2*kfactor)
if (is.na(z_diff)) {
z_diff=0
}
# Calculate p-value
pos <- (j-1)*5+k
pval <- p_value_from_z(z_diff)
if (k==1 & pval > 0.05)  {
txt <- "GDB"
} else if (k==2 & pval > 0.05) {
txt <- "ODB"
} else if (k==3  & pval > 0.05) {
txt <- "ODIN"
} else if (k==4  & pval > 0.05) {
txt <- "SCI"
} else if (k==5  & pval > 0.05) {
txt <- "SPI"
} else {
txt <- ""
}
p_values[i, pos] <- txt
}
}
}
#format as table
pval_df <- as.data.frame(p_values) %>%
cbind(`Dev Index`=devindex_names) %>%
select(-V1, -V7, -V13, -V19, -V25) %>%
select(`Dev Index`, everything())
## COmbined table
text_tab <- pval_df %>%
mutate(rownum=row_number(), font_small=TRUE) %>%
mutate(GDB_text=paste(V2, V3, V4, V5, sep=", "),
ODB_text=paste(V6, V8, V9, V10, sep=", "),
ODIN_text=paste(V11, V12, V14, V15, sep=", "),
SCI_text=paste(V16, V17, V18, V20, sep=", "),
SPI_text=paste(V21, V22, V23, V24, sep=", ")) %>%
mutate(across(ends_with('_text'), ~gsub(", ,","",.))) %>%
select(`Dev Index`, ends_with('_text'))
comb_tab <- tab %>%
rename(`Dev Index`=var) %>%
mutate(rownum=row_number()) %>%
left_join(text_tab) %>%
arrange(rownum) %>%
select(`Dev Index`, starts_with("GDB"), starts_with("ODB"),
starts_with("ODIN"), starts_with("SCI"), starts_with("SPI"))
flextable(comb_tab) %>%
set_header_labels(
`Dev Index`="Index",
GDB="GDB", GDB_text="GDB",
ODB="ODB", ODB_text="ODB",
ODIN="ODIN", ODIN_text="ODIN",
SCI="SCI", SCI_text="SCI",
SPI="SPI", SPI_text="SPI"
) %>%
merge_at(i=1,j=2:3, part = 'header') %>%
merge_at(i=1,j=4:5, part = 'header') %>%
merge_at(i=1,j=6:7, part = 'header') %>%
merge_at(i=1,j=8:9, part = 'header') %>%
merge_at(i=1,j=10:11, part = 'header') %>%
fontsize(j = c(3,5,7,9,11), size = 6, part = "body") %>%
fontsize(j = c(1,2,4,6,8,10), size = 8, part = "body") %>%
vline(j=1) %>%
vline(j=3) %>%
vline(j=5) %>%
vline(j=7) %>%
vline(j=9) %>%
align(i=1, part="header", align="center") %>%
autofit()
#| label: regdataprep
#this code will apply to the next 6 tables, as they rely on a constant set of predictors
#read in predictor variables created in spi_lit_review_data_preparation.Rmd
predictors_df <- read_csv( paste0(output_dir, "/SPI_regression_predictors.csv"))
#read in data for other indices
# predictors_df <- predictors_df %>%
#   left_join(imf_dta)
SPI_2016 <- spi_index_df %>%
filter(date>=2016) %>%
group_by(iso3c) %>%
fill(starts_with( 'SPI.INDEX'), .direction="downup") %>%
ungroup() %>%
filter(!is.na(SPI.INDEX))
countries_2016 <- unique(SPI_2016$country)
#add in some metadata about the country
reg_df <- SPI_2016 %>%
select(country, iso3c, date, region, SPI.INDEX, SPI.INDEX.PIL1, SPI.INDEX.PIL2, SPI.INDEX.PIL3, SPI.INDEX.PIL4, SPI.INDEX.PIL5) %>%
left_join(predictors_df) %>%
filter(between(date,2016,2022)) %>%
filter(!(is.na(SPI.INDEX) |
is.na(NY.GDP.PCAP.KD) |
is.na(NV.IND.MANF.ZS) |
is.na(NV.AGR.TOTL.ZS) |
is.na(SE.PRM.ENRR) |
is.na(NE.TRD.GNFS.ZS) |
is.na(CC.EST) |
is.na(GE.EST) |
is.na(PV.EST) |
is.na(RQ.EST) |
is.na(RL.EST) |
is.na(VA.EST) )) %>%
mutate(region_year_fe=paste(region,date,sep=" - "))
ncountry <- length(unique(reg_df$country))
#ODIN regressions
#add in some metadata about the country
odin_reg_df <- odin_df %>%
select(iso3c, date, ODIN_score) %>%
left_join(country_metadata) %>%
left_join(predictors_df) %>%
filter(between(date,2016,2022)) %>%
filter(!(is.na(ODIN_score) |
is.na(NY.GDP.PCAP.KD) |
is.na(NV.IND.MANF.ZS) |
is.na(NV.AGR.TOTL.ZS) |
is.na(SE.PRM.ENRR) |
is.na(NE.TRD.GNFS.ZS) |
is.na(CC.EST) |
is.na(GE.EST) |
is.na(PV.EST) |
is.na(RQ.EST) |
is.na(RL.EST) |
is.na(VA.EST) )) %>%
mutate(region_year_fe=paste(region,date,sep=" - "))
#ODB Regression
odb_reg_df <- read_csv(paste0(output_dir, "/ODB_formatted_data.csv")) %>%
select(iso3c, date, odb) %>%
left_join(country_metadata) %>%
left_join(predictors_df) %>%
filter(between(date,2013,2022)) %>%
filter(!(is.na(odb) |
is.na(NY.GDP.PCAP.KD) |
is.na(NV.IND.MANF.ZS) |
is.na(NV.AGR.TOTL.ZS) |
is.na(SE.PRM.ENRR) |
is.na(NE.TRD.GNFS.ZS) |
is.na(CC.EST) |
is.na(GE.EST) |
is.na(PV.EST) |
is.na(RQ.EST) |
is.na(RL.EST) |
is.na(VA.EST) )) %>%
mutate(region_year_fe=paste(region,date,sep=" - "))
#ODB Regression
gdb_reg_df <- read_csv(paste0(output_dir, "/GDB_formatted_data.csv")) %>%
select(iso3c, date, gdb) %>%
left_join(country_metadata) %>%
left_join(predictors_df) %>%
filter(between(date,2016,2022)) %>%
filter(!(is.na(gdb) |
is.na(NY.GDP.PCAP.KD) |
is.na(NV.IND.MANF.ZS) |
is.na(NV.AGR.TOTL.ZS) |
is.na(SE.PRM.ENRR) |
is.na(NE.TRD.GNFS.ZS) |
is.na(CC.EST) |
is.na(GE.EST) |
is.na(PV.EST) |
is.na(RQ.EST) |
is.na(RL.EST) |
is.na(VA.EST) )) %>%
mutate(region_year_fe=paste(region,date,sep=" - "))
#use modelsumary to predict
#modelsummary output
gm <- tibble::tribble(
~raw,        ~clean,          ~fmt,
"nobs",      "N",             0,
'r.squared', "R<sup>2</sup>", 3)

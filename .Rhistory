View(odb_reg_df)
#create regression models
SDG_models <- list(
'Model 1' = feols(sdg_index_score ~  SPI.INDEX , data=reg_df, se='cluster', cluster='country') ,
'Model 2' = feols(sdg_index_score ~  SPI.INDEX  + factor(date) | country, data=reg_df, se='cluster', cluster='country') ,
'Model 3' = feols(sdg_index_score ~  SPI.INDEX  + log(NY.GDP.PCAP.KD) + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR    + factor(date)| country , data=reg_df, se='cluster', cluster='country'),
'Model 4' = feols(sdg_index_score ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5 , data=reg_df, se='cluster', cluster='country') ,
'Model 5' = feols(sdg_index_score ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5    + factor(date) | country, data=reg_df, se='cluster', cluster='country') ,
'Model 6' = feols(sdg_index_score ~  SPI.INDEX.PIL1 + SPI.INDEX.PIL2 + SPI.INDEX.PIL3 + SPI.INDEX.PIL4 + SPI.INDEX.PIL5  +   log(NY.GDP.PCAP.KD) + NE.TRD.GNFS.ZS + NV.IND.MANF.ZS + NV.AGR.TOTL.ZS +  SE.PRM.ENRR    + factor(date)| country , data=reg_df, se='cluster', cluster='country')
)
modelsummary(SDG_models,
estimate= "{estimate}{stars}",
#vcov=list(NULL,"HC1",NULL),
coef_map = c("SPI.INDEX"  = "Overall SPI Score",
"SPI.INDEX.PIL1"  = "SPI Pillar 1 Score (Data use)",
"SPI.INDEX.PIL2"  = "SPI Pillar 2 Score (Data services)",
"SPI.INDEX.PIL3"  = "SPI Pillar 3 Score (Data products)",
"SPI.INDEX.PIL4"  = "SPI Pillar 4 Score (Data sources)",
"SPI.INDEX.PIL5"  = "SPI Pillar 5 Score (Data infrastructure)",
"log(NY.GDP.PCAP.KD)" = "Log GDP per capita (constant 2015 US$)",
"NE.TRD.GNFS.ZS" = "Trade (% of GDP)",
"NV.AGR.TOTL.ZS"= "Agriculture, forestry, fishing value added (% of GDP)",
"NV.IND.MANF.ZS"  = "Manufacturing value added (% of GDP)",
"SE.PRM.ENRR" = "School Enrollment, Primary (% gross)" ,
"WGI.OVL" = "WGI Index",
"factor(date)2017"="Year 2017",
"factor(date)2018"="Year 2018",
"factor(date)2019"="Year 2019",
"factor(date)2020"="Year 2020",
"factor(date)2021"="Year 2021",
"factor(date)2022"="Year 2022",
"factor(date)2023"="Year 2023",
"(Intercept)" = "Constant",
"CC.EST" = "WGI: Control of Corruption: Estimate",
"GE.EST" = "WGI: Governance Effectiveness: Estimate",
"PV.EST" = "WGI: Political Stability and Absence of Violence/Terrorism: Estimate",
"RQ.EST" = "WGI: Regulatory Quality: Estimate",
"RL.EST" = "WGI: Rule of Law: Estimate",
"VA.EST" = "WGI: Voice and Accountability: Estimate"),
notes="Note: * p<0.10, ** p<0.05, *** p<0.01. Standard errors are clustered at the country level. Data are from the World Bank's World Development Indicators (WDI) and SPI. In cases where data are missing for a particular covariate, the data are imputed forward using the nearest available value.",
stars = c('*' = .1, '**' = .05, '***' = .01),
fmt = fmt_statistic("estimate" = 3, "std.error" = 2),
escape = FALSE
)
view(odin_df)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(dataCompareR)
library(validate)
library(here)
library(ggcorrplot)
#set directories
dir <- here()
raw_dir <- paste0(dir, "/01_raw_data/")
output_dir <- paste(dir, '03_output', sep="/")
#weights (either unity (1) or population)
wgt <- 1
end_date=2023
#| label: dataread
#import data specificially about the SPI
spi_index_df <- read_csv(paste(raw_dir, 'SPI_index.csv', sep="/"))
spi_df_final <- read_csv( file = paste(raw_dir, 'SPI_data.csv', sep="/"))
#metadata
metadata <- data.frame(
series = c('SPI.INDEX', 'SPI.INDEX.PIL1', 'SPI.INDEX.PIL2', 'SPI.INDEX.PIL3', 'SPI.INDEX.PIL4', 'SPI.INDEX.PIL5'),
indicator_name = c('SPI Overall Score', 'Pillar 1: Data Use', 'Pillar 2: Data Services', 'Pillar 3: Data Products', 'Pillar 4: Data Sources', 'Pillar 5: Data Infrastructure')
)
SPI_end_date <- spi_index_df %>%
filter(date==end_date) %>%
filter(!is.na(SPI.INDEX) & !is.na(weights)) %>%
mutate(ISO_A3_EH=iso3c)
SPI <- spi_index_df
#read in regression data with covariates
predictors_df <- read_csv(paste0(output_dir, "/SPI_regression_predictors.csv"))
#read in ODIN
odin_df <- read_csv(paste0(output_dir, "/ODIN_formatted_data.csv")) %>%
select(iso3c, date, ODIN_score) %>%
left_join(country_metadata) %>%
left_join(predictors_df) %>%
filter(between(date,2016,2022))
#| label: dataread
#import data specificially about the SPI
spi_index_df <- read_csv(paste(raw_dir, 'SPI_index.csv', sep="/"))
spi_df_final <- read_csv( file = paste(raw_dir, 'SPI_data.csv', sep="/"))
#metadata
metadata <- data.frame(
series = c('SPI.INDEX', 'SPI.INDEX.PIL1', 'SPI.INDEX.PIL2', 'SPI.INDEX.PIL3', 'SPI.INDEX.PIL4', 'SPI.INDEX.PIL5'),
indicator_name = c('SPI Overall Score', 'Pillar 1: Data Use', 'Pillar 2: Data Services', 'Pillar 3: Data Products', 'Pillar 4: Data Sources', 'Pillar 5: Data Infrastructure')
)
SPI_end_date <- spi_index_df %>%
filter(date==end_date) %>%
filter(!is.na(SPI.INDEX) & !is.na(weights)) %>%
mutate(ISO_A3_EH=iso3c)
SPI <- spi_index_df
#read in regression data with covariates
predictors_df <- read_csv(paste0(output_dir, "/SPI_regression_predictors.csv"))
country_metadata <- read_csv(paste0(raw_dir, "country_metadata.csv"))
#read in ODIN
odin_df <- read_csv(paste0(output_dir, "/ODIN_formatted_data.csv")) %>%
select(iso3c, date, ODIN_score) %>%
left_join(country_metadata) %>%
left_join(predictors_df) %>%
filter(between(date,2016,2022))
# ODB
odb_df <- read_csv(paste0(output_dir, "/ODB_formatted_data.csv")) %>%
select(iso3c, date, odb) %>%
left_join(country_metadata) %>%
left_join(predictors_df) %>%
filter(between(date,2013,2022))
# GDB
#ODB Regression
gdb_reg_df <- read_csv(paste0(output_dir, "/GDB_formatted_data.csv")) %>%
select(iso3c, date, gdb) %>%
left_join(country_metadata) %>%
left_join(predictors_df) %>%
filter(between(date,2016,2022))
View(odb_df)
#| label: correlations
#for each of SPI, ODIN, ODB, GDB, correlate data across years. Then check if all values between 0 and 100
#create a function to do so.
scm_correlations <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
spread(date, indicator) %>%
select(-iso3c) %>%
as.matrix() %>%
cor()
}
#SPI
spi_cor <- scm_correlations(SPI, 'SPI.INDEX')
#ODIN
odin_cor <- scm_correlations(odin_df, 'ODIN_score')
#ODB
odb_cor <- scm_correlations(odb_df, 'odb')
odb_df$odb
odb_df$date
View(odb_df)
odb_df %>%
group_by(iso3c, date) %>%
summarise(n=n()) %>%
filter(n>1)
#| label: dataread
#import data specificially about the SPI
spi_index_df <- read_csv(paste(raw_dir, 'SPI_index.csv', sep="/"))
spi_df_final <- read_csv( file = paste(raw_dir, 'SPI_data.csv', sep="/"))
#metadata
metadata <- data.frame(
series = c('SPI.INDEX', 'SPI.INDEX.PIL1', 'SPI.INDEX.PIL2', 'SPI.INDEX.PIL3', 'SPI.INDEX.PIL4', 'SPI.INDEX.PIL5'),
indicator_name = c('SPI Overall Score', 'Pillar 1: Data Use', 'Pillar 2: Data Services', 'Pillar 3: Data Products', 'Pillar 4: Data Sources', 'Pillar 5: Data Infrastructure')
)
SPI_end_date <- spi_index_df %>%
filter(date==end_date) %>%
filter(!is.na(SPI.INDEX) & !is.na(weights)) %>%
mutate(ISO_A3_EH=iso3c)
SPI <- spi_index_df
#read in regression data with covariates
predictors_df <- read_csv(paste0(output_dir, "/SPI_regression_predictors.csv"))
country_metadata <- read_csv(paste0(raw_dir, "country_metadata.csv"))
#read in ODIN
odin_df <- read_csv(paste0(output_dir, "/ODIN_formatted_data.csv")) %>%
select(iso3c, date, ODIN_score) %>%
left_join(country_metadata) %>%
left_join(predictors_df) %>%
filter(between(date,2016,2022))
# ODB
odb_df <- read_csv(paste0(output_dir, "/ODB_formatted_data.csv")) %>%
select(iso3c, date, odb) %>%
left_join(country_metadata) %>%
left_join(predictors_df) %>%
filter(between(date,2013,2022)) %>%
filter(!is.na(iso3c))
# GDB
#ODB Regression
gdb_reg_df <- read_csv(paste0(output_dir, "/GDB_formatted_data.csv")) %>%
select(iso3c, date, gdb) %>%
left_join(country_metadata) %>%
left_join(predictors_df) %>%
filter(between(date,2016,2022))
#| label: correlations
#for each of SPI, ODIN, ODB, GDB, correlate data across years. Then check if all values between 0 and 100
#create a function to do so.
scm_correlations <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
spread(date, indicator) %>%
select(-iso3c) %>%
as.matrix() %>%
cor()
}
#SPI
spi_cor <- scm_correlations(SPI, 'SPI.INDEX')
#ODIN
odin_cor <- scm_correlations(odin_df, 'ODIN_score')
#ODB
odb_cor <- scm_correlations(odb_df, 'odb')
#GDB
gdb_cor <- scm_correlations(gdb_reg_df, 'gdb')
gdb_cor
odb_cor
?cor
#| label: correlations
#for each of SPI, ODIN, ODB, GDB, correlate data across years. Then check if all values between 0 and 100
#create a function to do so.
scm_correlations <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
spread(date, indicator) %>%
select(-iso3c) %>%
as.matrix() %>%
cor(use="pairwise.complete.obs")
}
#SPI
spi_cor <- scm_correlations(SPI, 'SPI.INDEX')
#ODIN
odin_cor <- scm_correlations(odin_df, 'ODIN_score')
#ODB
odb_cor <- scm_correlations(odb_df, 'odb')
#GDB
gdb_cor <- scm_correlations(gdb_reg_df, 'gdb')
odb_cor
odb_df$odb
gdb_df$gdb
gdb_reg_df$gdb
#| label: correlations
#for each of SPI, ODIN, ODB, GDB, correlate data across years. Then check if all values between 0 and 100
#create a function to do so.
scm_correlations <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
spread(date, indicator) %>%
select(-iso3c) %>%
as.matrix() %>%
cor(use="pairwise.complete.obs")
}
#SPI
spi_cor <- scm_correlations(SPI, 'SPI.INDEX')
#ODIN
odin_cor <- scm_correlations(odin_df, 'ODIN_score')
#ODB
odb_cor <- scm_correlations(odb_df, 'odb')
#GDB
gdb_cor <- scm_correlations(gdb_reg_df, 'gdb')
#creat a function to check if all values are between 0 and 100
scm_check_values <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
spread(date, indicator) %>%
select(-iso3c) %>%
as.matrix() %>%
apply(1, function(x) all(x >= 0 & x <= 100))
}
#SPI
spi_check <- scm_check_values(SPI, 'SPI.INDEX')
#ODIN
odin_check <- scm_check_values(odin_df, 'ODIN_score')
#ODB
odb_check <- scm_check_values(odb_df, 'odb')
#GDB
gdb_check <- scm_check_values(gdb_reg_df, 'gdb')
spi_check
odin_check
spi_cor
?all
#| label: correlations
#for each of SPI, ODIN, ODB, GDB, correlate data across years. Then check if all values between 0 and 100
#create a function to do so.
scm_correlations <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
spread(date, indicator) %>%
select(-iso3c) %>%
as.matrix() %>%
cor(use="pairwise.complete.obs")
}
#SPI
spi_cor <- scm_correlations(SPI, 'SPI.INDEX')
#ODIN
odin_cor <- scm_correlations(odin_df, 'ODIN_score')
#ODB
odb_cor <- scm_correlations(odb_df, 'odb')
#GDB
gdb_cor <- scm_correlations(gdb_reg_df, 'gdb')
#creat a function to check if all values are between 0 and 100
scm_check_values <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
spread(date, indicator) %>%
filter(!is.na(indicator)) %>%
select(-iso3c) %>%
as.matrix() %>%
apply(1, function(x) all(x >= 0 & x <= 100))
}
#SPI
spi_check <- scm_check_values(SPI, 'SPI.INDEX')
#ODIN
odin_check <- scm_check_values(odin_df, 'ODIN_score')
#ODB
odb_check <- scm_check_values(odb_df, 'odb')
#GDB
gdb_check <- scm_check_values(gdb_reg_df, 'gdb')
spi_check
#| label: correlations
#for each of SPI, ODIN, ODB, GDB, correlate data across years. Then check if all values between 0 and 100
#create a function to do so.
scm_correlations <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
spread(date, indicator) %>%
select(-iso3c) %>%
as.matrix() %>%
cor(use="pairwise.complete.obs")
}
#SPI
spi_cor <- scm_correlations(SPI, 'SPI.INDEX')
#ODIN
odin_cor <- scm_correlations(odin_df, 'ODIN_score')
#ODB
odb_cor <- scm_correlations(odb_df, 'odb')
#GDB
gdb_cor <- scm_correlations(gdb_reg_df, 'gdb')
#creat a function to check if all values are between 0 and 100
scm_check_values <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
filter(!is.na(indicator)) %>%
spread(date, indicator) %>%
select(-iso3c) %>%
as.matrix() %>%
apply(1, function(x) all(x >= 0 & x <= 100))
}
#SPI
spi_check <- scm_check_values(SPI, 'SPI.INDEX')
#ODIN
odin_check <- scm_check_values(odin_df, 'ODIN_score')
#ODB
odb_check <- scm_check_values(odb_df, 'odb')
#GDB
gdb_check <- scm_check_values(gdb_reg_df, 'gdb')
spi_check
spi_check <- scm_check_values(spi_df_final, 'SPI.INDEX')
spi_check <- scm_check_values(spi_index_df, 'SPI.INDEX')
spi_check
?all
#| label: correlations
#for each of SPI, ODIN, ODB, GDB, correlate data across years. Then check if all values between 0 and 100
#create a function to do so.
scm_correlations <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
spread(date, indicator) %>%
select(-iso3c) %>%
as.matrix() %>%
cor(use="pairwise.complete.obs")
}
#SPI
spi_cor <- scm_correlations(SPI, 'SPI.INDEX')
#ODIN
odin_cor <- scm_correlations(odin_df, 'ODIN_score')
#ODB
odb_cor <- scm_correlations(odb_df, 'odb')
#GDB
gdb_cor <- scm_correlations(gdb_reg_df, 'gdb')
#creat a function to check if all values are between 0 and 100
scm_check_values <- function(data, indicator) {
data <- data %>%
select(iso3c, date, indicator) %>%
spread(date, indicator) %>%
select(-iso3c) %>%
as.matrix() %>%
apply(1, function(x) all(x >= 0 & x <= 100, na.rm=TRUE))
}
#SPI
spi_check <- scm_check_values(spi_index_df, 'SPI.INDEX')
#ODIN
odin_check <- scm_check_values(odin_df, 'ODIN_score')
#ODB
odb_check <- scm_check_values(odb_df, 'odb')
#GDB
gdb_check <- scm_check_values(gdb_reg_df, 'gdb')
spi_check
odin_check
odb_check
gdb_check
#plot correlation matrix
spi_cor_plot <- ggcorrplot(spi_cor, type = "lower", lab = TRUE, method = "number", title = "SPI Correlation Matrix")
?ggcorrplot
#plot correlation matrix
spi_cor_plot <- ggcorrplot(spi_cor, type = "lower", lab = TRUE, method = "square", title = "SPI Correlation Matrix")
#plot correlation matrix
spi_cor_plot <- ggcorrplot(spi_cor, type = "lower", lab = TRUE, method = "square", title = "SPI Correlation Matrix")
spi_cor_plot
#check if all values are between 0 and 100
#put results in a summary table
spi_check_summary <- data.frame(
indicator = 'SPI',
all_values_between_0_and_100 = all(spi_check)
)
spi_check_summary
#check if all values are between 0 and 100
#put results in a summary table
spi_check_summary <- data.frame(
indicator = 'SPI',
all_values_between_0_and_100 = all(spi_check)
)
spi_check_summary
flextable(spi_check_summary) %>%
set_table_properties(width = .5) %>%
theme_zebra() %>%
align_text(align = "center", part = "all") %>%
set_caption("SPI Check Values Summary")
#check if all values are between 0 and 100
#put results in a summary table
spi_check_summary <- data.frame(
indicator = 'SPI',
all_values_between_0_and_100 = all(spi_check)
)
flextable(spi_check_summary) %>%
set_table_properties(width = .5) %>%
theme_zebra() %>%
align_text(align = "center", part = "all") %>%
set_caption("SPI Check Values Summary")
#check if all values are between 0 and 100
#put results in a summary table
spi_check_summary <- data.frame(
indicator = 'SPI',
all_values_between_0_and_100 = all(spi_check)
)
flextable(spi_check_summary) %>%
set_table_properties(width = .5) %>%
theme_zebra() %>%
set_caption("SPI Check Values Summary")
#check if all values are between 0 and 100
#put results in a summary table
spi_check_summary <- data.frame(
indicator = 'SPI',
`All values pass range check?` = all(spi_check)
)
flextable(spi_check_summary) %>%
set_table_properties(width = .5) %>%
theme_zebra() %>%
set_caption("SPI Check Values Summary")
#check if all values are between 0 and 100
#put results in a summary table
spi_check_summary <- data.frame(
indicator = 'SPI',
Pass = all(spi_check)
)
flextable(spi_check_summary) %>%
set_table_properties(width = .5) %>%
theme_zebra() %>%
set_caption("Check that SPI Values Conform to Range Expectations (0-100)")
?flextable
#check if all values are between 0 and 100
#put results in a summary table
spi_check_summary <- data.frame(
Indicator = 'SPI',
Pass = all(spi_check)
)
flextable(spi_check_summary) %>%
set_table_properties(width = .5) %>%
theme_zebra() %>%
set_caption("Check that SPI Values Conform to Range Expectations (0-100)")
library(tidyverse)
library(dataCompareR)
library(validate)
library(here)
library(ggcorrplot)
library(flextable)
#set directories
dir <- here()
raw_dir <- paste0(dir, "/01_raw_data/")
output_dir <- paste(dir, '03_output', sep="/")
#weights (either unity (1) or population)
wgt <- 1
end_date=2023
#check if all values are between 0 and 100
#put results in a summary table
odin_check_summary <- data.frame(
Indicator = 'ODIN',
Pass = all(odin_check)
)
flextable(odin_check_summary) %>%
set_table_properties(width = .5) %>%
theme_zebra() %>%
set_caption("Check that ODIN Values Conform to Range Expectations (0-100)")
#check if all values are between 0 and 100
#put results in a summary table
odin_check_summary <- data.frame(
Indicator = 'ODIN',
Pass = all(odin_check)
)
flextable(odin_check_summary) %>%
set_table_properties(width = .5) %>%
set_caption("Check that ODIN Values Conform to Range Expectations (0-100)")
#check if all values are between 0 and 100
#put results in a summary table
odin_check_summary <- data.frame(
Indicator = 'ODIN',
Pass = all(odin_check)
)
flextable(odin_check_summary) %>%
autofit() %>%
set_caption("Check that ODIN Values Conform to Range Expectations (0-100)")
#check if all values are between 0 and 100
#put results in a summary table
odin_check_summary <- data.frame(
Indicator = 'ODIN',
Pass = all(odin_check)
)
flextable(odin_check_summary) %>%
set_caption("Check that ODIN Values Conform to Range Expectations (0-100)") %>%
autofit()
